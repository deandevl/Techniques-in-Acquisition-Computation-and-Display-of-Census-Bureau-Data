[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "Introduction\nTHe book Analyzing US Census Data: Methods, Maps, and Models in R by Kyle Walker presents an excellent introduction to the US Census Bureau’s API. The topics from 7 chapters presented in the book are followed here to offer alternative techniques in the acquisition, manipulation, and visualization of the Census data. The focus will be on four packages:\nRcensusPkg is applied to acquire both Census Bureau data and acess to the TIGER line shapefile geometries.\nRspatialPkg combines Census Bureau spatial geographic features with survey data to create ggplot2 based choropleth maps.\nRplotterPkg provide an easy interface to both static and interactive ggplot2 plotting such as histograms, bar charts, and scatterplots along with layout of multiple plots.\nAll three of the above packages can be installed via github.\nAlso from CRAN, data.table is used extensively in data manipulation.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html",
    "href": "2_intro_to_tidyverse.html",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(usmap)\nlibrary(data.table)\nlibrary(kableExtra)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(magrittr)\nlibrary(devtools)\n\n\nLoad the package ‘deandevl/RcensusPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\n\n\n\nThe RcensusPkg uses the US Census Bureau’s API to download data. Users of the API must request a census key. All API requests to the Census Bureau require a “key” in the http url address. Sign-up for a key is free and can be obtained here. RcensusPkg will automatically attach this “key” to each request. All the package functions will check for a global setting of the key via Sys.getenv(\"CENSUS_KEY\"). Run usethis::edit_r_environ() and edit your .Renviron file with the line: CENSUS_KEY\nSo our task in getting started:\n\nObtain and set the global value of your own Census Bureau API key on your machine.\n\n\n\nWe are interested in data set “dec/sf1” and variable “P001001” (which is TOTAL POPULATION) in our request to the Census Bureau.\nCall RcensusPkg::get_vintage_data():\n\nFrom the Decennial Census data set (“dec/sf1”) get the total population for each state for 2010.\n\n\nsf1_pop_2010_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/sf1\",\n  vintage = 2010,\n  vars = \"P001001\",\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = \"P001001\", new = \"value\")  %&gt;% \n.[, `:=`(variable = \"P001001\", state = NULL)] %&gt;% \n.[, .(GEOID, NAME, variable, value)]\n\n\n\n\n\nTable 2.1: Total population by state, 2010 Census\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n01\nAlabama\nP001001\n4779736\n\n\n02\nAlaska\nP001001\n710231\n\n\n04\nArizona\nP001001\n6392017\n\n\n05\nArkansas\nP001001\n2915918\n\n\n06\nCalifornia\nP001001\n37253956\n\n\n22\nLouisiana\nP001001\n4533372\n\n\n\n\n\n\n\n\n\n\nSummary files provide additional details for a Decennial Census year.\n\nRetrieve information on the American Indian & Alaska Native population by state from the 2020 summary decennial Census.\n\nUse RcensusPkg::get_vintage_data() with arguments vars set to “P1_005N” and dataset set to “dec/pl”:\n\naian_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"P1_005N\",\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = \"P1_005N\", new = \"value\")  %&gt;% \n.[, `:=`(variable = \"P1_005N\", state = NULL)] %&gt;% \n.[, .(GEOID, NAME, variable, value)]  \n\n\n\n\n\nTable 2.2: American Indian or Alaska Native alone population by state from the 2020 decennial Census\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n42\nPennsylvania\nP1_005N\n31052\n\n\n06\nCalifornia\nP1_005N\n631016\n\n\n54\nWest Virginia\nP1_005N\n3706\n\n\n49\nUtah\nP1_005N\n41644\n\n\n36\nNew York\nP1_005N\n149690\n\n\n11\nDistrict of Columbia\nP1_005N\n3193\n\n\n\n\n\n\n\n\n\n\n\n\nThe ACS offers additional variables not found in the decennial Census.\nFrom the ACS we are interested in “B05006_150E” and “B05006_150M” which the Census Bureau describes as\n\nConcept – PLACE OF BIRTH FOR THE FOREIGN-BORN POPULATION IN THE UNITED STATES\nLabel – Estimate!!Total:!!Americas:!!Latin America:!!Central America:!!Mexico\n“B05006_150E” and “B05006_150M” fetches data on the number of residents born in Mexico by state.\n\n\nFrom the 5-year ACS survey data set (“acs/acs5”) retrieve variables “B05006_150E” and “B05006_150M” for 2020 for each state.\n\nNote that there is also a 1-year survey (“acs/acs1”).\nCall RcensusPkg::get_vintage_data():\n\nborn_in_mexico_5yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B05006_150E\", \"B05006_150M\"),\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = c(\"B05006_150E\", \"B05006_150M\"), new = c(\"estimate\", \"moe\")) %&gt;%   \n.[, variable := \"B05006_150\"]  %&gt;% \ndata.table::setorder(NAME) %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.3: Mexican-born population by state, 2016-2020 5-year ACS\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01\nAlabama\nB05006_150\n46927\n1846\n\n\n02\nAlaska\nB05006_150\n4181\n709\n\n\n04\nArizona\nB05006_150\n510639\n8028\n\n\n05\nArkansas\nB05006_150\n60236\n2182\n\n\n06\nCalifornia\nB05006_150\n3962910\n25353\n\n\n08\nColorado\nB05006_150\n215778\n4888\n\n\n\n\n\n\n\n\n\nGet the 1-year ACS survey of “B05006_150E” and “B05006_150M” for 2020 for each state.\n\nCall RcensusPkg::get_vintage_data():\n\nborn_in_mexico_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B05006_150E\", \"B05006_150M\"),\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = c(\"B05006_150E\", \"B05006_150M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, variable := \"B05006_150\"]  %&gt;%\ndata.table::setorder(NAME) %&gt;%\n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.4 Mexican-born population by state, 2019 1-year ACS\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01\nAlabama\nB05006_150\nNA\nNA\n\n\n02\nAlaska\nB05006_150\nNA\nNA\n\n\n04\nArizona\nB05006_150\n516618\n15863\n\n\n05\nArkansas\nB05006_150\nNA\nNA\n\n\n06\nCalifornia\nB05006_150\n3951224\n40506\n\n\n08\nColorado\nB05006_150\n209408\n12214\n\n\n\n\n\n\n\n\nWe can get many related variables at once using a group (sometimes referred to as a “table”), defined by the Census Bureau.\n\nUsing the list of variables associated with the group/table named “B01001” (which covers sex broken down by age) from the 2015-2020 5-year ACS, get the estimated values for each by state.\n\nUse RcensusPkg::get_vintage_data() and set the group parameter to “B01001”:\n\nB01001_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  region = \"state\",\n  wide_to_long = T\n) %&gt;% \n  data.table::setorderv(cols = \"NAME\")\n\n\n\n\n\nTable 2.5: Table B01001 by state from the 2016-2020 5-year ACS\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\n\n\n\n\nAlabama\n01\nB01001_001\n4893186\n-555555555\n\n\nAlabama\n01\nB01001_002\n2365734\n1090\n\n\nAlabama\n01\nB01001_003\n149579\n672\n\n\nAlabama\n01\nB01001_004\n150937\n2202\n\n\nAlabama\n01\nB01001_005\n160287\n2159\n\n\nAlabama\n01\nB01001_006\n96832\n565\n\n\n\n\n\n\n\n\nWe can easily get the descriptions of the B01001 variables by calling RcensusPkg::get_variable_names()\n\nGet the B01001 group’s variable descriptions by calling RcensusPkg::get_variable_names() filtered to get only the estimate variables.\n\n\nB01001_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  filter_group_est = TRUE\n)\n\n\n\n\n\nTable 2.5a: Variable descriptions for group B01001 from the 2016-2020 5-year ACS\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB01001_001E\nEstimate!!Total:\nSEX BY AGE\nNA\nint\n\n\nB01001_002E\nEstimate!!Total:!!Male:\nSEX BY AGE\nNA\nint\n\n\nB01001_003E\nEstimate!!Total:!!Male:!!Under 5 years\nSEX BY AGE\nNA\nint\n\n\nB01001_004E\nEstimate!!Total:!!Male:!!5 to 9 years\nSEX BY AGE\nNA\nint\n\n\nB01001_005E\nEstimate!!Total:!!Male:!!10 to 14 years\nSEX BY AGE\nNA\nint\n\n\nB01001_006E\nEstimate!!Total:!!Male:!!15 to 17 years\nSEX BY AGE\nNA\nint\n\n\n\n\n\n\n\n\n\n\n\n\nOften we need to get data based on state, county, county subdivision, tract, block group, and place. Depending on the vintage and dataset of interest, data for these geographies are not always available. We can get the available geographies by calling RcensusPkg::get_geography().\n\nGet the available geographies of dataset “acs/acs5” for 2016-2020 5-year ACS.\n\n\nacs5_geo_dt &lt;- RcensusPkg::get_geography(\n  dataset = \"acs/acs5\",\n  vintage = 2020\n)\n\nNote that this table is showing the first 6 of 87 different geographies for acs/acs5, 2020\n\n\n\n\nTable 2.6a: First 6 available geographies from the 2016-2020 5-year ACS\n\n\nname\ngeoLevelDisplay\n\n\n\n\nus\n010\n\n\nregion\n020\n\n\ndivision\n030\n\n\nstate\n040\n\n\ncounty\n050\n\n\ncounty subdivision\n060\n\n\n\n\n\n\n\n\nWe set the ‘region’ parameter of RcensusPkg::get_vintage_data() to retrieve data for a specific geography. As an example, ‘core-based statistical areas’ or cbsa, cooresponds to the Census Bureau’s region ‘metropolitan statistical area/micropolitan statistical area’.\n\nUsing the “cbsa” geography level find the estimates for variable “B01003_001”.\n\n\nacs5_cbsa_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B01003_001E\", \"B01003_001M\"),\n  region = \"metropolitan statistical area/micropolitan statistical area\",\n) %&gt;% \ndata.table::setnames(., old = c(\"B01003_001E\", \"B01003_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(`metropolitan statistical area/micropolitan statistical area` = NULL, variable = \"B01003_001\", moe = ifelse(moe == \"-555555555\",NA,moe))] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]  \n\n\n\n\n\nTable 2.6: Population by CBSA\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n10100\nAberdeen, SD Micro Area\nB01003_001\n42864\nNA\n\n\n10140\nAberdeen, WA Micro Area\nB01003_001\n73769\nNA\n\n\n10180\nAbilene, TX Metro Area\nB01003_001\n171354\nNA\n\n\n10220\nAda, OK Micro Area\nB01003_001\n38385\nNA\n\n\n10300\nAdrian, MI Micro Area\nB01003_001\n98310\nNA\n\n\n10380\nAguadilla-Isabela, PR Metro Area\nB01003_001\n295172\nNA\n\n\n\n\n\n\n\n\n\n\nWe often get Census Bureau estimates at the state/county level and requires us to know their FIPS codes (Federal Information Processing Standard).\n\nFor all counties in the state of Wisconsin find the estimated household income from “acs/acs5” for 2020.\n\nGet the fips number for Wisconsin:\n\nwis_fips &lt;- usmap::fips(\"WI\")\n\nGet the household income (“B19013_001E”,“B19013_001M”) for all the counties in Wisconsin:\n\nwi_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", wis_fips)\n) %&gt;% \ndata.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(state = NULL, county = NULL, variable = \"B19013_001\")] %&gt;% \n.[order(NAME)] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]    \n\nNote that we received 72 rows/observations for the 72 counties in Wisconsin in reporting household income using the ACS 5-year dataset\n\n\n\n\nTable 2.7: Median household income by county in Wisconsin\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n55001\nAdams County, Wisconsin\nB19013_001\n48906\n2387\n\n\n55003\nAshland County, Wisconsin\nB19013_001\n47869\n3190\n\n\n55005\nBarron County, Wisconsin\nB19013_001\n52346\n2092\n\n\n55007\nBayfield County, Wisconsin\nB19013_001\n57257\n2496\n\n\n55009\nBrown County, Wisconsin\nB19013_001\n64728\n1419\n\n\n55011\nBuffalo County, Wisconsin\nB19013_001\n58364\n1871\n\n\n\n\n\n\n\n\n\nRepeat the above call for Dane County, Wisconsin median income at the ‘tract’ geography level\n\nGet the fips numbers for Dane County and Wisconsin:\n\nwi_dane_fips &lt;- usmap::fips(state = \"WI\", county = \"Dane\")\nwi_fips &lt;- substr(wi_dane_fips,1,2)\ndane_fips &lt;- substr(wi_dane_fips,3,5)\n\nRequest the data from the “acs/acs5” dataset:\n\ndane_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", wi_fips, \"+county:\", dane_fips)\n) %&gt;% \ndata.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(state = NULL, county = NULL, tract = NULL, variable = \"B19013_001\")] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.8: Median household income in Dane County by Census tract\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n55025000100\nCensus Tract 1, Dane County, Wisconsin\nB19013_001\n74054\n15662\n\n\n55025000201\nCensus Tract 2.01, Dane County, Wisconsin\nB19013_001\n92460\n27067\n\n\n55025000202\nCensus Tract 2.02, Dane County, Wisconsin\nB19013_001\n88092\n5189\n\n\n55025000204\nCensus Tract 2.04, Dane County, Wisconsin\nB19013_001\n82717\n12175\n\n\n55025000205\nCensus Tract 2.05, Dane County, Wisconsin\nB19013_001\n100000\n17506\n\n\n55025000301\nCensus Tract 3.01, Dane County, Wisconsin\nB19013_001\n37016\n11524\n\n\n\n\n\n\n\n\nWe noted above that for county household income in Wisconsin we obtained 72 rows from the 5-year ACS.\n\nHow many rows would we obtain requesting the same data from the American Community Survey: 1-Year Estimates(“acs/acs1”)?\n\nRepeat the above request for the 1-year ACS dataset:\nNote that there are only 23 rows in the data table, representing the 23 counties that meet the “total population of 65,000 or greater” criteria for the ACS 1-year survey.\n\nwi_income_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", wi_fips),\n)\n\nwi_income_acs1_rows &lt;- nrow(wi_income_1yr_dt)\n\nRows from Wisconsin counties’ ACS 1-year household income: 23.\n\n\n\n\nThe RcensusPkg::get_variable_names() function provides a way to determine the availability and variable acronyms from the various datasets. It has a requirement for the dataset name along with optional parameters for vintage, and group.\nThe function also has the filter_name_str/filter_label_str – character strings by which to filter the resultant data.table using the “name” and/or “label” columns. If the group parameter is defined, the function has a filter_group_est logical parameter which if TRUE will return only estimate and margin of error related variables.\nBe aware that RcensusPkg::get_variable_names() can be time consuming. The following request is an example of a time consumer that returns a data frame with over 22000 rows of variable names if unfiltered.\n\nFind the variables available under the “acs/acs5” dataset for vintage 2016.\n\n\nacs5_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5\",\n  vintage = 2016\n) %&gt;% \nna.omit(., cols = \"concept\")  \n\nNote that there are a total of 22819 variables for the 2012-2016 5-year ACS\n\n\n\n\nTable 2.9: Variables in the 2012-2016 5-year ACS\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB00001_001E\nEstimate!!Total\nUNWEIGHTED SAMPLE COUNT OF THE POPULATION\nNA\nint\n\n\nB00002_001E\nEstimate!!Total\nUNWEIGHTED SAMPLE HOUSING UNITS\nNA\nint\n\n\nB01001A_001E\nEstimate!!Total\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_002E\nEstimate!!Total!!Male\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_003E\nEstimate!!Total!!Male!!Under 5 years\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_004E\nEstimate!!Total!!Male!!5 to 9 years\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\n\n\n\n\n\n\n\n\n\nIn calling RcensusPkg::get_vintage_data() with group specified the data.table outputs are in a shape called the “wide” form with each column representing a specific variable. To reshape the data.table to a “long” form, we can set the function’s wide_to_long to TRUE.\n\nShow the resulting “long” form when we define the group parameter as “B19001” from the “acs/acs1” dataset by state.\n\nCall RcensusPkg::get_vintage_data() for group “B19001”:\n\nB19001_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2016,\n  group = \"B19001\",\n  region = \"state\",\n  wide_to_long = T\n) %&gt;% \n.[order(NAME)]\n\nNote that we are showing a data.table with 884 rows and 5 columns. This is the “long” form.\n\n\n\n\nTable 2.10: Household income groups by state 2016 1-year ACS\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\n\n\n\n\nAlabama\n01\nB19001_001\n1852518\n12189\n\n\nAlabama\n01\nB19001_002\n176641\n6328\n\n\nAlabama\n01\nB19001_003\n120590\n5347\n\n\nAlabama\n01\nB19001_004\n117332\n5956\n\n\nAlabama\n01\nB19001_005\n108912\n5308\n\n\nAlabama\n01\nB19001_006\n102080\n4740\n\n\n\n\n\n\n\n\n\nUsing RcensusPkg::long_to_wide() create a “wide” form of B19001_1yr_dt.\n\nWe can reshape B19001_1yr_dt where the unique values under the “variable” column become the columns.\nCall RcensusPkg::long_to_wide():\n\nB19001_1yr_wide_dt &lt;- RcensusPkg::long_to_wide(\n  dt = B19001_1yr_dt,\n  parameter_col = \"variable\",\n  value_col = c(\"estimate\", \"moe\")\n)\n\nNote that we are showing a data.table with 52 rows and 36 columns of “estimate” and “moe”. This is the “wide” form.\n\n\n\n\nTable 2.11: Income table in wide form (57 x 36)\n\n\nNAME\nGEOID\nB19001_001E\nB19001_002E\nB19001_003E\nB19001_004E\n\n\n\n\nAlabama\n01\n1852518\n176641\n120590\n117332\n\n\nAlaska\n02\n248468\n9066\n7301\n7545\n\n\nArizona\n04\n2519052\n184109\n123141\n116678\n\n\nArkansas\n05\n1142718\n101085\n75579\n71364\n\n\nCalifornia\n06\n12944178\n699927\n584989\n526006\n\n\nColorado\n08\n2108992\n108697\n80074\n81207\n\n\n\n\n\n\n\n\n\n\nIn the above tables we have been showing a “GEOID”. These values uniquely idenify geographic units in a dataset.\n\nFind the number of households in Cimarron County, Oklahoma using the GEOID block level from the 2020 Census.\n\nGet the fips numbers for Cimarron County and Oklahoma:\n\nok_cim_fips &lt;- usmap::fips(state = \"OK\", county = \"Cimarron\")\nok_fips &lt;- substr(ok_cim_fips,1,2)\ncim_fips &lt;- substr(ok_cim_fips,3,5)\n\nCall RcensusPkg::get_vintage_data:\n\ncimarron_blocks_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"H1_001N\",\n  region = \"block:*\",\n  regionin = paste0(\"state:\", ok_fips, \"+county:\", cim_fips) )%&gt;% \n  .[order(GEOID)] %&gt;% \n.[, `:=`(variable = \"H1_001N\")] %&gt;% \ndata.table::setnames(., old = \"H1_001N\", new = \"value\") %&gt;% \n.[, .(GEOID, NAME, variable, value)]  \n\n\n\n\n\nTable 2.12: Households by block in Cimarron County, Oklahoma\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n400259501001000\nBlock 1000, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001001\nBlock 1001, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n1\n\n\n400259501001002\nBlock 1002, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001003\nBlock 1003, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001004\nBlock 1004, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001005\nBlock 1005, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n\n\n\n\n\n\nBreaking out the first row’s GEOID value, we have:\n\n\n40 – FIPS code for state of Oklahoma\n\n\n025 – FIPS code for Cimarron County\n\n\n950100 – the block’s Census tract\n\n1 – the parent block group of the Census block\n\n\n000 – the individual Census block\n\n\n\n\n\nUsing the data.table package we can reassign Census IDs to new names.\n\nTaking the counties in Georgia from the 2015-2019 five-year ACS show the median age and income.\n\nCall RcensusPkg::get_vintage_data() and rename the variables with the help of data.table:\n\nga_fips &lt;- usmap::fips(\"GA\")\nga_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B01002_001E\", \"B19013_001M\", \"B01002_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", ga_fips)) %&gt;% \n  .[order(NAME)] %&gt;% \n  data.table::setnames(.,old=c(\"B01002_001E\",\"B01002_001M\",\"B19013_001E\", \"B19013_001M\"), new=c(\"medageE\", \"medageM\", \"medincE\", \"medincM\")) %&gt;% \n  .[, .(GEOID, NAME, medageE, medageM, medincE, medincM)]\n\nThe result is a data.table in its default “wide” format with the renamed variables.\n\n\n\n\nTable 2.14: Georgia dataset in wide form\n\n\nGEOID\nNAME\nmedageE\nmedageM\nmedincE\nmedincM\n\n\n\n\n13001\nAppling County, Georgia\n39.9\n1.7\n37924\n4761\n\n\n13003\nAtkinson County, Georgia\n35.9\n1.5\n35703\n5493\n\n\n13005\nBacon County, Georgia\n36.5\n1.0\n36692\n3774\n\n\n13007\nBaker County, Georgia\n52.2\n4.8\n34034\n9879\n\n\n13009\nBaldwin County, Georgia\n35.8\n0.5\n46250\n4707\n\n\n13011\nBanks County, Georgia\n41.5\n1.1\n50912\n4278\n\n\n\n\n\n\n\n\nReshape the data.table into a “long” format:\n\nga_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ga_dt\n)\n\n\n\n\n\nTable 2.13: Multi-variable dataset for Georgia counties (long form)\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nAppling County, Georgia\n13001\nmedageE\n39.9\n\n\nAtkinson County, Georgia\n13003\nmedageE\n35.9\n\n\nBacon County, Georgia\n13005\nmedageE\n36.5\n\n\nBaker County, Georgia\n13007\nmedageE\n52.2\n\n\nBaldwin County, Georgia\n13009\nmedageE\n35.8\n\n\nBanks County, Georgia\n13011\nmedageE\n41.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPEP as described by the Census Bureau:\n\nPEP annually utilizes current data on births, deaths, and migration to calculate population change since the most recent decennial census and produces a time series of estimates of population, demographic components of change, and housing units.\n\n\nFor the county of Queens, NY request all variables that are components of change population estimates for 2019. We will be using the “pep/components” dataset.\n\nCall RcensusPkg::get_vintage_data():\n\nny_queens_fips &lt;- usmap::fips(state = \"NY\", county = \"Queens\")\n\nqueens_components_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/components\",\n  vintage = 2019,\n  vars = c(\"BIRTHS\",\"DEATHS\",\"DOMESTICMIG\",\"INTERNATIONALMIG\",\"NATURALINC\",\"NETMIG\",\"RBIRTH\",\"RDEATH\",\"RDOMESTICMIG\",\"RINTERNATIONALMIG\"),\n  region = paste0(\"county:\", substr(ny_queens_fips,3,5)),\n  regionin = paste0(\"state:\", substr(ny_queens_fips,1,2))\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nReshape queens_components_dt in the “long” format:\n\nqueens_components_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = queens_components_dt\n)\n\nThe table reflects data from the “pep/components” dataset in the Population Estimates Program (pep). What other datasets are available in the “pep”.\n\n\n\n\nTable 2.15: Components of change estimates for Queens County, NY\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nQueens County, New York\n36081\nBIRTHS\n27453\n\n\nQueens County, New York\n36081\nDEATHS\n16380\n\n\nQueens County, New York\n36081\nDOMESTICMIG\n-41789\n\n\nQueens County, New York\n36081\nINTERNATIONALMIG\n9883\n\n\nQueens County, New York\n36081\nNATURALINC\n11073\n\n\nQueens County, New York\n36081\nNETMIG\n-31906\n\n\nQueens County, New York\n36081\nRBIRTH\n12.12464362\n\n\nQueens County, New York\n36081\nRDEATH\n7.23424261\n\n\nQueens County, New York\n36081\nRDOMESTICMIG\n-18.45615168\n\n\nQueens County, New York\n36081\nRINTERNATIONALMIG\n4.36483637\n\n\n\n\n\n\n\n\n\nGet a listing of all the Population Estimates Program (pep) related datasets for the year 2019.\n\nCall RcensusPkg::get_dataset_names() for a brief listing using “pep” as a filter to the “title” column:\n\npep_datasets_ls &lt;- RcensusPkg::get_dataset_names(\n  filter_title_str = \"population estimates\",\n  vintage = 2019) \n\n\n\n\n\nTable 2.15a: Population Estimates Program (pep) related datasets, 2019\n\n\nname\nvintage\ntitle\n\n\n\n\npep/charage\n2019\nPopulation Estimates: Estimates by Age, Sex, Race, and Hispanic Origin\n\n\npep/charagegroups\n2019\nPopulation Estimates: Estimates by Age Group, Sex, Race, and Hispanic Origin\n\n\npep/components\n2019\nPopulation Estimates: Census Bureau Version: Components of Change Estimates\n\n\npep/housing\n2019\nPopulation Estimates: Housing Unit Estimates for US, States, and Counties\n\n\npep/natmonthly\n2019\nPopulation Estimates: National Monthly Population Estimates\n\n\npep/population\n2019\nPopulation Estimates: Population Estimates\n\n\n\n\n\n\n\n\n\nFrom the PEP “pep/charagegroups” dataset get the characteristics for Louisiana, 2019. We are interested in variables “SEX”, “HISP”, and “POP”.\n\nCall RcensusPkg::get_vintage_data():\n\nla_fips &lt;- usmap::fips(\"LA\")\nlouisiana_sex_hisp_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019,\n  vars = c(\"SEX\",\"HISP\",\"POP\"),\n  region = paste0(\"state:\", la_fips)) %&gt;%\ndata.table::setnames(., old = \"POP\", new = \"value\") %&gt;%\n.[, .(GEOID, NAME, value, SEX, HISP)]\n\nUsing data.table techniques do some minor wrangling by converting the values for variables “SEX” and “HISP” from “0”’s and “1”’s to more descriptive values:\n\nlouisiana_sex_hisp_dt[, SEX := fcase(\n  SEX == \"0\", \"Both sexes\",\n  SEX == \"1\", \"Male\",\n  SEX == \"2\", \"Female\"\n)]\n\nlouisiana_sex_hisp_dt[, HISP := fcase(\n  HISP == \"0\", \"Both Hispanic Origins\",\n  HISP == \"1\", \"Non-Hispanic\",\n  HISP == \"2\", \"Hispanic\"\n)]\n\n\n\n\n\nTable 2.16: Population characteristics for Louisiana\n\n\nGEOID\nNAME\nvalue\nSEX\nHISP\n\n\n\n\n22\nLouisiana\n4648794\nBoth sexes\nBoth Hispanic Origins\n\n\n22\nLouisiana\n4401822\nBoth sexes\nNon-Hispanic\n\n\n22\nLouisiana\n246972\nBoth sexes\nHispanic\n\n\n22\nLouisiana\n2267050\nMale\nBoth Hispanic Origins\n\n\n22\nLouisiana\n2135979\nMale\nNon-Hispanic\n\n\n22\nLouisiana\n131071\nMale\nHispanic\n\n\n22\nLouisiana\n2381744\nFemale\nBoth Hispanic Origins\n\n\n22\nLouisiana\n2265843\nFemale\nNon-Hispanic\n\n\n22\nLouisiana\n115901\nFemale\nHispanic\n\n\n\n\n\n\n\n\n\nVariables available from the dataset “pep/charagegroups” have characteristic breakdowns for Age Group, Sex, Race, and Hispanic Origins. Get a listing of all the variables in this dataset.\n\nCall RcensusPkg::get_variable_names():\n\npep_char_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019\n)\n\n\n\n\n\nTable 2.16a: All variables, pep/charagegroups,2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nAGEGROUP\nAge Group\nNA\ndefault displayed\nint\n\n\nCOUNTY\nGeography\nNA\nNA\nNA\n\n\nDATE_CODE\nEstimate Date\nNA\ndefault displayed\nint\n\n\nDATE_DESC\nDescription of DATE values\nNA\nNA\nstring\n\n\nGEOCOMP\nGEO_ID Component\nNA\ndefault displayed\nstring\n\n\nGEO_ID\nGeography\nNA\nNA\nstring\n\n\nHISP\nHispanic Origin\nNA\ndefault displayed\nint\n\n\nLASTUPDATE\nLast Update\nNA\nNA\nstring\n\n\nNATION\nGeography\nNA\nNA\nNA\n\n\nPOP\nPopulation\nNA\nNA\nNA\n\n\nRACE\nRace\nNA\ndefault displayed\nint\n\n\nSEX\nSex\nNA\ndefault displayed\nint\n\n\nSTATE\nGeography\nNA\nNA\nNA\n\n\nSUMLEVEL\nSummary Level code\nNA\nNA\nstring\n\n\nUNIVERSE\nPopulation Universe\nNA\nNA\nstring\n\n\nfor\nCensus API FIPS 'for' clause\nCensus API Geography Specification\nNA\nfips-for\n\n\nin\nCensus API FIPS 'in' clause\nCensus API Geography Specification\nNA\nfips-in\n\n\nucgid\nUniform Census Geography Identifier clause\nCensus API Geography Specification\nNA\nucgid\n\n\n\n\n\n\n\n\n\n\n\nThe Census Bureau offers data on both in- and out-migration for states, counties, and metropolitan areas.\n\nFind the migration flows data for Honolulu County, Hawaii from the “acs/flows” dataset for 2019.\n\nFrom the “acs/flows” dataset of the American Community Survey we will be using the variables “FULL1_NAME”, “FULL2_NAME”, “MOVEDIN”, “MOVEDIN_M”,“MOVEDOUT”, “MOVEDOUT_M”,“MOVEDNET”,“MOVEDNET_M”.\nCall RcensusPkg::get_vintage_data():\n\nhonolulu_fips &lt;- usmap::fips(state = \"HI\", county = \"Honolulu\")\nhonolulu_migration_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/flows\",\n  vintage = 2019,\n  NAME_GEOID = FALSE,\n  vars = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\", \"MOVEDIN\", \"MOVEDIN_M\",\"MOVEDOUT\", \"MOVEDOUT_M\",\"MOVEDNET\",\"MOVEDNET_M\"),\n  region = paste0(\"county:\", substr(honolulu_fips,3,5)),\n  regionin = paste0(\"state:\", substr(honolulu_fips,1,2))\n)\n\nReshape honolulu_migration_dt to the “long” format:\n\nhonolulu_migration_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = honolulu_migration_dt,\n  id_v = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\"),\n  measure_v = c(\"MOVEDIN\", \"MOVEDOUT\", \"MOVEDNET\")\n)\n\nhonolulu_migration_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = honolulu_migration_dt,\n  id_v = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\"),\n  measure_v = c(\"MOVEDIN_M\", \"MOVEDOUT_M\", \"MOVEDNET_M\"),\n  value_name = \"moe\"\n)\n\nhonolulu_migration_long_dt &lt;- honolulu_migration_est_dt[, moe := honolulu_migration_moe_dt$moe]\n\n\n\n\n\nTable 2.17: Migration flows data for Honolulu, HI\n\n\nGEOID1\nGEOID2\nFULL1_NAME\nFULL2_NAME\nvariable\nestimate\nmoe\n\n\n\n\n15003\nNA\nHonolulu County, Hawaii\nAfrica\nMOVEDIN\n152\n156\n\n\n15003\nNA\nHonolulu County, Hawaii\nAsia\nMOVEDIN\n7680\n884\n\n\n15003\nNA\nHonolulu County, Hawaii\nCentral America\nMOVEDIN\n192\n100\n\n\n15003\nNA\nHonolulu County, Hawaii\nCaribbean\nMOVEDIN\n97\n78\n\n\n15003\nNA\nHonolulu County, Hawaii\nEurope\nMOVEDIN\n1800\n494\n\n\n15003\nNA\nHonolulu County, Hawaii\nU.S. Island Areas\nMOVEDIN\n863\n238",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html#getting-started-with-tidycensus-rcensuspkg",
    "href": "2_intro_to_tidyverse.html#getting-started-with-tidycensus-rcensuspkg",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "The RcensusPkg uses the US Census Bureau’s API to download data. Users of the API must request a census key. All API requests to the Census Bureau require a “key” in the http url address. Sign-up for a key is free and can be obtained here. RcensusPkg will automatically attach this “key” to each request. All the package functions will check for a global setting of the key via Sys.getenv(\"CENSUS_KEY\"). Run usethis::edit_r_environ() and edit your .Renviron file with the line: CENSUS_KEY\nSo our task in getting started:\n\nObtain and set the global value of your own Census Bureau API key on your machine.\n\n\n\nWe are interested in data set “dec/sf1” and variable “P001001” (which is TOTAL POPULATION) in our request to the Census Bureau.\nCall RcensusPkg::get_vintage_data():\n\nFrom the Decennial Census data set (“dec/sf1”) get the total population for each state for 2010.\n\n\nsf1_pop_2010_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/sf1\",\n  vintage = 2010,\n  vars = \"P001001\",\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = \"P001001\", new = \"value\")  %&gt;% \n.[, `:=`(variable = \"P001001\", state = NULL)] %&gt;% \n.[, .(GEOID, NAME, variable, value)]\n\n\n\n\n\nTable 2.1: Total population by state, 2010 Census\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n01\nAlabama\nP001001\n4779736\n\n\n02\nAlaska\nP001001\n710231\n\n\n04\nArizona\nP001001\n6392017\n\n\n05\nArkansas\nP001001\n2915918\n\n\n06\nCalifornia\nP001001\n37253956\n\n\n22\nLouisiana\nP001001\n4533372\n\n\n\n\n\n\n\n\n\n\nSummary files provide additional details for a Decennial Census year.\n\nRetrieve information on the American Indian & Alaska Native population by state from the 2020 summary decennial Census.\n\nUse RcensusPkg::get_vintage_data() with arguments vars set to “P1_005N” and dataset set to “dec/pl”:\n\naian_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"P1_005N\",\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = \"P1_005N\", new = \"value\")  %&gt;% \n.[, `:=`(variable = \"P1_005N\", state = NULL)] %&gt;% \n.[, .(GEOID, NAME, variable, value)]  \n\n\n\n\n\nTable 2.2: American Indian or Alaska Native alone population by state from the 2020 decennial Census\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n42\nPennsylvania\nP1_005N\n31052\n\n\n06\nCalifornia\nP1_005N\n631016\n\n\n54\nWest Virginia\nP1_005N\n3706\n\n\n49\nUtah\nP1_005N\n41644\n\n\n36\nNew York\nP1_005N\n149690\n\n\n11\nDistrict of Columbia\nP1_005N\n3193\n\n\n\n\n\n\n\n\n\n\n\n\nThe ACS offers additional variables not found in the decennial Census.\nFrom the ACS we are interested in “B05006_150E” and “B05006_150M” which the Census Bureau describes as\n\nConcept – PLACE OF BIRTH FOR THE FOREIGN-BORN POPULATION IN THE UNITED STATES\nLabel – Estimate!!Total:!!Americas:!!Latin America:!!Central America:!!Mexico\n“B05006_150E” and “B05006_150M” fetches data on the number of residents born in Mexico by state.\n\n\nFrom the 5-year ACS survey data set (“acs/acs5”) retrieve variables “B05006_150E” and “B05006_150M” for 2020 for each state.\n\nNote that there is also a 1-year survey (“acs/acs1”).\nCall RcensusPkg::get_vintage_data():\n\nborn_in_mexico_5yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B05006_150E\", \"B05006_150M\"),\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = c(\"B05006_150E\", \"B05006_150M\"), new = c(\"estimate\", \"moe\")) %&gt;%   \n.[, variable := \"B05006_150\"]  %&gt;% \ndata.table::setorder(NAME) %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.3: Mexican-born population by state, 2016-2020 5-year ACS\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01\nAlabama\nB05006_150\n46927\n1846\n\n\n02\nAlaska\nB05006_150\n4181\n709\n\n\n04\nArizona\nB05006_150\n510639\n8028\n\n\n05\nArkansas\nB05006_150\n60236\n2182\n\n\n06\nCalifornia\nB05006_150\n3962910\n25353\n\n\n08\nColorado\nB05006_150\n215778\n4888\n\n\n\n\n\n\n\n\n\nGet the 1-year ACS survey of “B05006_150E” and “B05006_150M” for 2020 for each state.\n\nCall RcensusPkg::get_vintage_data():\n\nborn_in_mexico_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B05006_150E\", \"B05006_150M\"),\n  region = \"state\"\n) %&gt;% \ndata.table::setnames(old = c(\"B05006_150E\", \"B05006_150M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, variable := \"B05006_150\"]  %&gt;%\ndata.table::setorder(NAME) %&gt;%\n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.4 Mexican-born population by state, 2019 1-year ACS\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01\nAlabama\nB05006_150\nNA\nNA\n\n\n02\nAlaska\nB05006_150\nNA\nNA\n\n\n04\nArizona\nB05006_150\n516618\n15863\n\n\n05\nArkansas\nB05006_150\nNA\nNA\n\n\n06\nCalifornia\nB05006_150\n3951224\n40506\n\n\n08\nColorado\nB05006_150\n209408\n12214\n\n\n\n\n\n\n\n\nWe can get many related variables at once using a group (sometimes referred to as a “table”), defined by the Census Bureau.\n\nUsing the list of variables associated with the group/table named “B01001” (which covers sex broken down by age) from the 2015-2020 5-year ACS, get the estimated values for each by state.\n\nUse RcensusPkg::get_vintage_data() and set the group parameter to “B01001”:\n\nB01001_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  region = \"state\",\n  wide_to_long = T\n) %&gt;% \n  data.table::setorderv(cols = \"NAME\")\n\n\n\n\n\nTable 2.5: Table B01001 by state from the 2016-2020 5-year ACS\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\n\n\n\n\nAlabama\n01\nB01001_001\n4893186\n-555555555\n\n\nAlabama\n01\nB01001_002\n2365734\n1090\n\n\nAlabama\n01\nB01001_003\n149579\n672\n\n\nAlabama\n01\nB01001_004\n150937\n2202\n\n\nAlabama\n01\nB01001_005\n160287\n2159\n\n\nAlabama\n01\nB01001_006\n96832\n565\n\n\n\n\n\n\n\n\nWe can easily get the descriptions of the B01001 variables by calling RcensusPkg::get_variable_names()\n\nGet the B01001 group’s variable descriptions by calling RcensusPkg::get_variable_names() filtered to get only the estimate variables.\n\n\nB01001_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  filter_group_est = TRUE\n)\n\n\n\n\n\nTable 2.5a: Variable descriptions for group B01001 from the 2016-2020 5-year ACS\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB01001_001E\nEstimate!!Total:\nSEX BY AGE\nNA\nint\n\n\nB01001_002E\nEstimate!!Total:!!Male:\nSEX BY AGE\nNA\nint\n\n\nB01001_003E\nEstimate!!Total:!!Male:!!Under 5 years\nSEX BY AGE\nNA\nint\n\n\nB01001_004E\nEstimate!!Total:!!Male:!!5 to 9 years\nSEX BY AGE\nNA\nint\n\n\nB01001_005E\nEstimate!!Total:!!Male:!!10 to 14 years\nSEX BY AGE\nNA\nint\n\n\nB01001_006E\nEstimate!!Total:!!Male:!!15 to 17 years\nSEX BY AGE\nNA\nint",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html#geography-and-variables-in-tidycensus",
    "href": "2_intro_to_tidyverse.html#geography-and-variables-in-tidycensus",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "Often we need to get data based on state, county, county subdivision, tract, block group, and place. Depending on the vintage and dataset of interest, data for these geographies are not always available. We can get the available geographies by calling RcensusPkg::get_geography().\n\nGet the available geographies of dataset “acs/acs5” for 2016-2020 5-year ACS.\n\n\nacs5_geo_dt &lt;- RcensusPkg::get_geography(\n  dataset = \"acs/acs5\",\n  vintage = 2020\n)\n\nNote that this table is showing the first 6 of 87 different geographies for acs/acs5, 2020\n\n\n\n\nTable 2.6a: First 6 available geographies from the 2016-2020 5-year ACS\n\n\nname\ngeoLevelDisplay\n\n\n\n\nus\n010\n\n\nregion\n020\n\n\ndivision\n030\n\n\nstate\n040\n\n\ncounty\n050\n\n\ncounty subdivision\n060\n\n\n\n\n\n\n\n\nWe set the ‘region’ parameter of RcensusPkg::get_vintage_data() to retrieve data for a specific geography. As an example, ‘core-based statistical areas’ or cbsa, cooresponds to the Census Bureau’s region ‘metropolitan statistical area/micropolitan statistical area’.\n\nUsing the “cbsa” geography level find the estimates for variable “B01003_001”.\n\n\nacs5_cbsa_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B01003_001E\", \"B01003_001M\"),\n  region = \"metropolitan statistical area/micropolitan statistical area\",\n) %&gt;% \ndata.table::setnames(., old = c(\"B01003_001E\", \"B01003_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(`metropolitan statistical area/micropolitan statistical area` = NULL, variable = \"B01003_001\", moe = ifelse(moe == \"-555555555\",NA,moe))] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]  \n\n\n\n\n\nTable 2.6: Population by CBSA\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n10100\nAberdeen, SD Micro Area\nB01003_001\n42864\nNA\n\n\n10140\nAberdeen, WA Micro Area\nB01003_001\n73769\nNA\n\n\n10180\nAbilene, TX Metro Area\nB01003_001\n171354\nNA\n\n\n10220\nAda, OK Micro Area\nB01003_001\n38385\nNA\n\n\n10300\nAdrian, MI Micro Area\nB01003_001\n98310\nNA\n\n\n10380\nAguadilla-Isabela, PR Metro Area\nB01003_001\n295172\nNA\n\n\n\n\n\n\n\n\n\n\nWe often get Census Bureau estimates at the state/county level and requires us to know their FIPS codes (Federal Information Processing Standard).\n\nFor all counties in the state of Wisconsin find the estimated household income from “acs/acs5” for 2020.\n\nGet the fips number for Wisconsin:\n\nwis_fips &lt;- usmap::fips(\"WI\")\n\nGet the household income (“B19013_001E”,“B19013_001M”) for all the counties in Wisconsin:\n\nwi_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", wis_fips)\n) %&gt;% \ndata.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(state = NULL, county = NULL, variable = \"B19013_001\")] %&gt;% \n.[order(NAME)] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]    \n\nNote that we received 72 rows/observations for the 72 counties in Wisconsin in reporting household income using the ACS 5-year dataset\n\n\n\n\nTable 2.7: Median household income by county in Wisconsin\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n55001\nAdams County, Wisconsin\nB19013_001\n48906\n2387\n\n\n55003\nAshland County, Wisconsin\nB19013_001\n47869\n3190\n\n\n55005\nBarron County, Wisconsin\nB19013_001\n52346\n2092\n\n\n55007\nBayfield County, Wisconsin\nB19013_001\n57257\n2496\n\n\n55009\nBrown County, Wisconsin\nB19013_001\n64728\n1419\n\n\n55011\nBuffalo County, Wisconsin\nB19013_001\n58364\n1871\n\n\n\n\n\n\n\n\n\nRepeat the above call for Dane County, Wisconsin median income at the ‘tract’ geography level\n\nGet the fips numbers for Dane County and Wisconsin:\n\nwi_dane_fips &lt;- usmap::fips(state = \"WI\", county = \"Dane\")\nwi_fips &lt;- substr(wi_dane_fips,1,2)\ndane_fips &lt;- substr(wi_dane_fips,3,5)\n\nRequest the data from the “acs/acs5” dataset:\n\ndane_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", wi_fips, \"+county:\", dane_fips)\n) %&gt;% \ndata.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;% \n.[, `:=`(state = NULL, county = NULL, tract = NULL, variable = \"B19013_001\")] %&gt;% \n.[, c(\"GEOID\", \"NAME\", \"variable\", \"estimate\", \"moe\")]\n\n\n\n\n\nTable 2.8: Median household income in Dane County by Census tract\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n55025000100\nCensus Tract 1, Dane County, Wisconsin\nB19013_001\n74054\n15662\n\n\n55025000201\nCensus Tract 2.01, Dane County, Wisconsin\nB19013_001\n92460\n27067\n\n\n55025000202\nCensus Tract 2.02, Dane County, Wisconsin\nB19013_001\n88092\n5189\n\n\n55025000204\nCensus Tract 2.04, Dane County, Wisconsin\nB19013_001\n82717\n12175\n\n\n55025000205\nCensus Tract 2.05, Dane County, Wisconsin\nB19013_001\n100000\n17506\n\n\n55025000301\nCensus Tract 3.01, Dane County, Wisconsin\nB19013_001\n37016\n11524\n\n\n\n\n\n\n\n\nWe noted above that for county household income in Wisconsin we obtained 72 rows from the 5-year ACS.\n\nHow many rows would we obtain requesting the same data from the American Community Survey: 1-Year Estimates(“acs/acs1”)?\n\nRepeat the above request for the 1-year ACS dataset:\nNote that there are only 23 rows in the data table, representing the 23 counties that meet the “total population of 65,000 or greater” criteria for the ACS 1-year survey.\n\nwi_income_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", wi_fips),\n)\n\nwi_income_acs1_rows &lt;- nrow(wi_income_1yr_dt)\n\nRows from Wisconsin counties’ ACS 1-year household income: 23.",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html#searching-for-variables-in-tidycensus",
    "href": "2_intro_to_tidyverse.html#searching-for-variables-in-tidycensus",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "The RcensusPkg::get_variable_names() function provides a way to determine the availability and variable acronyms from the various datasets. It has a requirement for the dataset name along with optional parameters for vintage, and group.\nThe function also has the filter_name_str/filter_label_str – character strings by which to filter the resultant data.table using the “name” and/or “label” columns. If the group parameter is defined, the function has a filter_group_est logical parameter which if TRUE will return only estimate and margin of error related variables.\nBe aware that RcensusPkg::get_variable_names() can be time consuming. The following request is an example of a time consumer that returns a data frame with over 22000 rows of variable names if unfiltered.\n\nFind the variables available under the “acs/acs5” dataset for vintage 2016.\n\n\nacs5_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5\",\n  vintage = 2016\n) %&gt;% \nna.omit(., cols = \"concept\")  \n\nNote that there are a total of 22819 variables for the 2012-2016 5-year ACS\n\n\n\n\nTable 2.9: Variables in the 2012-2016 5-year ACS\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB00001_001E\nEstimate!!Total\nUNWEIGHTED SAMPLE COUNT OF THE POPULATION\nNA\nint\n\n\nB00002_001E\nEstimate!!Total\nUNWEIGHTED SAMPLE HOUSING UNITS\nNA\nint\n\n\nB01001A_001E\nEstimate!!Total\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_002E\nEstimate!!Total!!Male\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_003E\nEstimate!!Total!!Male!!Under 5 years\nSEX BY AGE (WHITE ALONE)\nNA\nint\n\n\nB01001A_004E\nEstimate!!Total!!Male!!5 to 9 years\nSEX BY AGE (WHITE ALONE)\nNA\nint",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html#data-structure-in-tidycensus",
    "href": "2_intro_to_tidyverse.html#data-structure-in-tidycensus",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "In calling RcensusPkg::get_vintage_data() with group specified the data.table outputs are in a shape called the “wide” form with each column representing a specific variable. To reshape the data.table to a “long” form, we can set the function’s wide_to_long to TRUE.\n\nShow the resulting “long” form when we define the group parameter as “B19001” from the “acs/acs1” dataset by state.\n\nCall RcensusPkg::get_vintage_data() for group “B19001”:\n\nB19001_1yr_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2016,\n  group = \"B19001\",\n  region = \"state\",\n  wide_to_long = T\n) %&gt;% \n.[order(NAME)]\n\nNote that we are showing a data.table with 884 rows and 5 columns. This is the “long” form.\n\n\n\n\nTable 2.10: Household income groups by state 2016 1-year ACS\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\n\n\n\n\nAlabama\n01\nB19001_001\n1852518\n12189\n\n\nAlabama\n01\nB19001_002\n176641\n6328\n\n\nAlabama\n01\nB19001_003\n120590\n5347\n\n\nAlabama\n01\nB19001_004\n117332\n5956\n\n\nAlabama\n01\nB19001_005\n108912\n5308\n\n\nAlabama\n01\nB19001_006\n102080\n4740\n\n\n\n\n\n\n\n\n\nUsing RcensusPkg::long_to_wide() create a “wide” form of B19001_1yr_dt.\n\nWe can reshape B19001_1yr_dt where the unique values under the “variable” column become the columns.\nCall RcensusPkg::long_to_wide():\n\nB19001_1yr_wide_dt &lt;- RcensusPkg::long_to_wide(\n  dt = B19001_1yr_dt,\n  parameter_col = \"variable\",\n  value_col = c(\"estimate\", \"moe\")\n)\n\nNote that we are showing a data.table with 52 rows and 36 columns of “estimate” and “moe”. This is the “wide” form.\n\n\n\n\nTable 2.11: Income table in wide form (57 x 36)\n\n\nNAME\nGEOID\nB19001_001E\nB19001_002E\nB19001_003E\nB19001_004E\n\n\n\n\nAlabama\n01\n1852518\n176641\n120590\n117332\n\n\nAlaska\n02\n248468\n9066\n7301\n7545\n\n\nArizona\n04\n2519052\n184109\n123141\n116678\n\n\nArkansas\n05\n1142718\n101085\n75579\n71364\n\n\nCalifornia\n06\n12944178\n699927\n584989\n526006\n\n\nColorado\n08\n2108992\n108697\n80074\n81207\n\n\n\n\n\n\n\n\n\n\nIn the above tables we have been showing a “GEOID”. These values uniquely idenify geographic units in a dataset.\n\nFind the number of households in Cimarron County, Oklahoma using the GEOID block level from the 2020 Census.\n\nGet the fips numbers for Cimarron County and Oklahoma:\n\nok_cim_fips &lt;- usmap::fips(state = \"OK\", county = \"Cimarron\")\nok_fips &lt;- substr(ok_cim_fips,1,2)\ncim_fips &lt;- substr(ok_cim_fips,3,5)\n\nCall RcensusPkg::get_vintage_data:\n\ncimarron_blocks_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"H1_001N\",\n  region = \"block:*\",\n  regionin = paste0(\"state:\", ok_fips, \"+county:\", cim_fips) )%&gt;% \n  .[order(GEOID)] %&gt;% \n.[, `:=`(variable = \"H1_001N\")] %&gt;% \ndata.table::setnames(., old = \"H1_001N\", new = \"value\") %&gt;% \n.[, .(GEOID, NAME, variable, value)]  \n\n\n\n\n\nTable 2.12: Households by block in Cimarron County, Oklahoma\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n400259501001000\nBlock 1000, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001001\nBlock 1001, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n1\n\n\n400259501001002\nBlock 1002, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001003\nBlock 1003, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001004\nBlock 1004, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n400259501001005\nBlock 1005, Block Group 1, Census Tract 9501, Cimarron County, Oklahoma\nH1_001N\n0\n\n\n\n\n\n\n\n\nBreaking out the first row’s GEOID value, we have:\n\n\n40 – FIPS code for state of Oklahoma\n\n\n025 – FIPS code for Cimarron County\n\n\n950100 – the block’s Census tract\n\n1 – the parent block group of the Census block\n\n\n000 – the individual Census block\n\n\n\n\n\nUsing the data.table package we can reassign Census IDs to new names.\n\nTaking the counties in Georgia from the 2015-2019 five-year ACS show the median age and income.\n\nCall RcensusPkg::get_vintage_data() and rename the variables with the help of data.table:\n\nga_fips &lt;- usmap::fips(\"GA\")\nga_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B01002_001E\", \"B19013_001M\", \"B01002_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", ga_fips)) %&gt;% \n  .[order(NAME)] %&gt;% \n  data.table::setnames(.,old=c(\"B01002_001E\",\"B01002_001M\",\"B19013_001E\", \"B19013_001M\"), new=c(\"medageE\", \"medageM\", \"medincE\", \"medincM\")) %&gt;% \n  .[, .(GEOID, NAME, medageE, medageM, medincE, medincM)]\n\nThe result is a data.table in its default “wide” format with the renamed variables.\n\n\n\n\nTable 2.14: Georgia dataset in wide form\n\n\nGEOID\nNAME\nmedageE\nmedageM\nmedincE\nmedincM\n\n\n\n\n13001\nAppling County, Georgia\n39.9\n1.7\n37924\n4761\n\n\n13003\nAtkinson County, Georgia\n35.9\n1.5\n35703\n5493\n\n\n13005\nBacon County, Georgia\n36.5\n1.0\n36692\n3774\n\n\n13007\nBaker County, Georgia\n52.2\n4.8\n34034\n9879\n\n\n13009\nBaldwin County, Georgia\n35.8\n0.5\n46250\n4707\n\n\n13011\nBanks County, Georgia\n41.5\n1.1\n50912\n4278\n\n\n\n\n\n\n\n\nReshape the data.table into a “long” format:\n\nga_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ga_dt\n)\n\n\n\n\n\nTable 2.13: Multi-variable dataset for Georgia counties (long form)\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nAppling County, Georgia\n13001\nmedageE\n39.9\n\n\nAtkinson County, Georgia\n13003\nmedageE\n35.9\n\n\nBacon County, Georgia\n13005\nmedageE\n36.5\n\n\nBaker County, Georgia\n13007\nmedageE\n52.2\n\n\nBaldwin County, Georgia\n13009\nmedageE\n35.8\n\n\nBanks County, Georgia\n13011\nmedageE\n41.5",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "2_intro_to_tidyverse.html#other-census-bureau-datasets-in-tidycensus",
    "href": "2_intro_to_tidyverse.html#other-census-bureau-datasets-in-tidycensus",
    "title": "2 An introduction to tidyverse",
    "section": "",
    "text": "PEP as described by the Census Bureau:\n\nPEP annually utilizes current data on births, deaths, and migration to calculate population change since the most recent decennial census and produces a time series of estimates of population, demographic components of change, and housing units.\n\n\nFor the county of Queens, NY request all variables that are components of change population estimates for 2019. We will be using the “pep/components” dataset.\n\nCall RcensusPkg::get_vintage_data():\n\nny_queens_fips &lt;- usmap::fips(state = \"NY\", county = \"Queens\")\n\nqueens_components_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/components\",\n  vintage = 2019,\n  vars = c(\"BIRTHS\",\"DEATHS\",\"DOMESTICMIG\",\"INTERNATIONALMIG\",\"NATURALINC\",\"NETMIG\",\"RBIRTH\",\"RDEATH\",\"RDOMESTICMIG\",\"RINTERNATIONALMIG\"),\n  region = paste0(\"county:\", substr(ny_queens_fips,3,5)),\n  regionin = paste0(\"state:\", substr(ny_queens_fips,1,2))\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nReshape queens_components_dt in the “long” format:\n\nqueens_components_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = queens_components_dt\n)\n\nThe table reflects data from the “pep/components” dataset in the Population Estimates Program (pep). What other datasets are available in the “pep”.\n\n\n\n\nTable 2.15: Components of change estimates for Queens County, NY\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nQueens County, New York\n36081\nBIRTHS\n27453\n\n\nQueens County, New York\n36081\nDEATHS\n16380\n\n\nQueens County, New York\n36081\nDOMESTICMIG\n-41789\n\n\nQueens County, New York\n36081\nINTERNATIONALMIG\n9883\n\n\nQueens County, New York\n36081\nNATURALINC\n11073\n\n\nQueens County, New York\n36081\nNETMIG\n-31906\n\n\nQueens County, New York\n36081\nRBIRTH\n12.12464362\n\n\nQueens County, New York\n36081\nRDEATH\n7.23424261\n\n\nQueens County, New York\n36081\nRDOMESTICMIG\n-18.45615168\n\n\nQueens County, New York\n36081\nRINTERNATIONALMIG\n4.36483637\n\n\n\n\n\n\n\n\n\nGet a listing of all the Population Estimates Program (pep) related datasets for the year 2019.\n\nCall RcensusPkg::get_dataset_names() for a brief listing using “pep” as a filter to the “title” column:\n\npep_datasets_ls &lt;- RcensusPkg::get_dataset_names(\n  filter_title_str = \"population estimates\",\n  vintage = 2019) \n\n\n\n\n\nTable 2.15a: Population Estimates Program (pep) related datasets, 2019\n\n\nname\nvintage\ntitle\n\n\n\n\npep/charage\n2019\nPopulation Estimates: Estimates by Age, Sex, Race, and Hispanic Origin\n\n\npep/charagegroups\n2019\nPopulation Estimates: Estimates by Age Group, Sex, Race, and Hispanic Origin\n\n\npep/components\n2019\nPopulation Estimates: Census Bureau Version: Components of Change Estimates\n\n\npep/housing\n2019\nPopulation Estimates: Housing Unit Estimates for US, States, and Counties\n\n\npep/natmonthly\n2019\nPopulation Estimates: National Monthly Population Estimates\n\n\npep/population\n2019\nPopulation Estimates: Population Estimates\n\n\n\n\n\n\n\n\n\nFrom the PEP “pep/charagegroups” dataset get the characteristics for Louisiana, 2019. We are interested in variables “SEX”, “HISP”, and “POP”.\n\nCall RcensusPkg::get_vintage_data():\n\nla_fips &lt;- usmap::fips(\"LA\")\nlouisiana_sex_hisp_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019,\n  vars = c(\"SEX\",\"HISP\",\"POP\"),\n  region = paste0(\"state:\", la_fips)) %&gt;%\ndata.table::setnames(., old = \"POP\", new = \"value\") %&gt;%\n.[, .(GEOID, NAME, value, SEX, HISP)]\n\nUsing data.table techniques do some minor wrangling by converting the values for variables “SEX” and “HISP” from “0”’s and “1”’s to more descriptive values:\n\nlouisiana_sex_hisp_dt[, SEX := fcase(\n  SEX == \"0\", \"Both sexes\",\n  SEX == \"1\", \"Male\",\n  SEX == \"2\", \"Female\"\n)]\n\nlouisiana_sex_hisp_dt[, HISP := fcase(\n  HISP == \"0\", \"Both Hispanic Origins\",\n  HISP == \"1\", \"Non-Hispanic\",\n  HISP == \"2\", \"Hispanic\"\n)]\n\n\n\n\n\nTable 2.16: Population characteristics for Louisiana\n\n\nGEOID\nNAME\nvalue\nSEX\nHISP\n\n\n\n\n22\nLouisiana\n4648794\nBoth sexes\nBoth Hispanic Origins\n\n\n22\nLouisiana\n4401822\nBoth sexes\nNon-Hispanic\n\n\n22\nLouisiana\n246972\nBoth sexes\nHispanic\n\n\n22\nLouisiana\n2267050\nMale\nBoth Hispanic Origins\n\n\n22\nLouisiana\n2135979\nMale\nNon-Hispanic\n\n\n22\nLouisiana\n131071\nMale\nHispanic\n\n\n22\nLouisiana\n2381744\nFemale\nBoth Hispanic Origins\n\n\n22\nLouisiana\n2265843\nFemale\nNon-Hispanic\n\n\n22\nLouisiana\n115901\nFemale\nHispanic\n\n\n\n\n\n\n\n\n\nVariables available from the dataset “pep/charagegroups” have characteristic breakdowns for Age Group, Sex, Race, and Hispanic Origins. Get a listing of all the variables in this dataset.\n\nCall RcensusPkg::get_variable_names():\n\npep_char_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019\n)\n\n\n\n\n\nTable 2.16a: All variables, pep/charagegroups,2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nAGEGROUP\nAge Group\nNA\ndefault displayed\nint\n\n\nCOUNTY\nGeography\nNA\nNA\nNA\n\n\nDATE_CODE\nEstimate Date\nNA\ndefault displayed\nint\n\n\nDATE_DESC\nDescription of DATE values\nNA\nNA\nstring\n\n\nGEOCOMP\nGEO_ID Component\nNA\ndefault displayed\nstring\n\n\nGEO_ID\nGeography\nNA\nNA\nstring\n\n\nHISP\nHispanic Origin\nNA\ndefault displayed\nint\n\n\nLASTUPDATE\nLast Update\nNA\nNA\nstring\n\n\nNATION\nGeography\nNA\nNA\nNA\n\n\nPOP\nPopulation\nNA\nNA\nNA\n\n\nRACE\nRace\nNA\ndefault displayed\nint\n\n\nSEX\nSex\nNA\ndefault displayed\nint\n\n\nSTATE\nGeography\nNA\nNA\nNA\n\n\nSUMLEVEL\nSummary Level code\nNA\nNA\nstring\n\n\nUNIVERSE\nPopulation Universe\nNA\nNA\nstring\n\n\nfor\nCensus API FIPS 'for' clause\nCensus API Geography Specification\nNA\nfips-for\n\n\nin\nCensus API FIPS 'in' clause\nCensus API Geography Specification\nNA\nfips-in\n\n\nucgid\nUniform Census Geography Identifier clause\nCensus API Geography Specification\nNA\nucgid\n\n\n\n\n\n\n\n\n\n\n\nThe Census Bureau offers data on both in- and out-migration for states, counties, and metropolitan areas.\n\nFind the migration flows data for Honolulu County, Hawaii from the “acs/flows” dataset for 2019.\n\nFrom the “acs/flows” dataset of the American Community Survey we will be using the variables “FULL1_NAME”, “FULL2_NAME”, “MOVEDIN”, “MOVEDIN_M”,“MOVEDOUT”, “MOVEDOUT_M”,“MOVEDNET”,“MOVEDNET_M”.\nCall RcensusPkg::get_vintage_data():\n\nhonolulu_fips &lt;- usmap::fips(state = \"HI\", county = \"Honolulu\")\nhonolulu_migration_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/flows\",\n  vintage = 2019,\n  NAME_GEOID = FALSE,\n  vars = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\", \"MOVEDIN\", \"MOVEDIN_M\",\"MOVEDOUT\", \"MOVEDOUT_M\",\"MOVEDNET\",\"MOVEDNET_M\"),\n  region = paste0(\"county:\", substr(honolulu_fips,3,5)),\n  regionin = paste0(\"state:\", substr(honolulu_fips,1,2))\n)\n\nReshape honolulu_migration_dt to the “long” format:\n\nhonolulu_migration_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = honolulu_migration_dt,\n  id_v = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\"),\n  measure_v = c(\"MOVEDIN\", \"MOVEDOUT\", \"MOVEDNET\")\n)\n\nhonolulu_migration_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = honolulu_migration_dt,\n  id_v = c(\"GEOID1\", \"GEOID2\", \"FULL1_NAME\", \"FULL2_NAME\"),\n  measure_v = c(\"MOVEDIN_M\", \"MOVEDOUT_M\", \"MOVEDNET_M\"),\n  value_name = \"moe\"\n)\n\nhonolulu_migration_long_dt &lt;- honolulu_migration_est_dt[, moe := honolulu_migration_moe_dt$moe]\n\n\n\n\n\nTable 2.17: Migration flows data for Honolulu, HI\n\n\nGEOID1\nGEOID2\nFULL1_NAME\nFULL2_NAME\nvariable\nestimate\nmoe\n\n\n\n\n15003\nNA\nHonolulu County, Hawaii\nAfrica\nMOVEDIN\n152\n156\n\n\n15003\nNA\nHonolulu County, Hawaii\nAsia\nMOVEDIN\n7680\n884\n\n\n15003\nNA\nHonolulu County, Hawaii\nCentral America\nMOVEDIN\n192\n100\n\n\n15003\nNA\nHonolulu County, Hawaii\nCaribbean\nMOVEDIN\n97\n78\n\n\n15003\nNA\nHonolulu County, Hawaii\nEurope\nMOVEDIN\n1800\n494\n\n\n15003\nNA\nHonolulu County, Hawaii\nU.S. Island Areas\nMOVEDIN\n863\n238",
    "crumbs": [
      "2 An introduction to tidyverse"
    ]
  },
  {
    "objectID": "3_wrangling_census_data_with_tidyverse_tools.html",
    "href": "3_wrangling_census_data_with_tidyverse_tools.html",
    "title": "3 Wrangling Census Data with tidyverse tools",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(usmap)\nlibrary(data.table)\nlibrary(kableExtra)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(magrittr)\nlibrary(devtools)\n\n\nLoad the package ‘deandevl/RcensusPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\n\n\n\nFrom the RcensusPkg:: package we will be utilizing the following functions to obtain Census Bureau data:\n\nRcensusPkg::get_vintage_data() Get Census Bureau data for a specific data set, variables, and region in the form of a data.table.\nRcensusPkg::get_variable_names() Get the variable names of the Census Bureau and their descriptions in the form of a data.table.\nRcensusPkg::get_multi_vintage_data() Get Census Bureau data for a specific data set, variables, and region in the form of a data.table for multiple vintages.\n\nThe data wrangling such as sorting, ordering, filtering, mutating, joining, grouping, renaming, variable selection will be accomplished using the many capabilities of the data.table package.\n\n\n\nRequest the median age from 2016-2020 5-year ACS Survey for all counties in the United States.\n\nCall RcensusPkg::get_vintage_data():\n\ncounty_med_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B01002_001E\", \"B01002_001M\"),\n  region = \"county\"\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)] %&gt;%\ndata.table::setnames(., old = c(\"B01002_001E\", \"B01002_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, variable := \"B01002_001\"] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]\n\n\n\n\n\nTable 3.1: Median age for US counties\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01001\nAutauga County, Alabama\nB01002_001\n38.6\n0.6\n\n\n01003\nBaldwin County, Alabama\nB01002_001\n43.2\n0.4\n\n\n01005\nBarbour County, Alabama\nB01002_001\n40.1\n0.6\n\n\n01007\nBibb County, Alabama\nB01002_001\n39.9\n1.2\n\n\n01009\nBlount County, Alabama\nB01002_001\n41.0\n0.5\n\n\n01011\nBullock County, Alabama\nB01002_001\n39.7\n1.9\n\n\n\n\n\n\n\n\n\nFind the youngest to oldest counties in the US.\n\nOrder the “estimate” column of county_med_age_dt via ascending direction (the default):\n\ncounty_med_age_young_to_old_dt &lt;- county_med_age_dt[order(estimate)]\n\n\n\n\n\nTable 3.2: The youngest counties in the US by median age\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n51678\nLexington city, Virginia\nB01002_001\n22.2\n0.8\n\n\n35011\nDe Baca County, New Mexico\nB01002_001\n22.2\n6.9\n\n\n16065\nMadison County, Idaho\nB01002_001\n23.5\n0.2\n\n\n46121\nTodd County, South Dakota\nB01002_001\n23.6\n0.6\n\n\n51750\nRadford city, Virginia\nB01002_001\n23.7\n0.6\n\n\n13053\nChattahoochee County, Georgia\nB01002_001\n24.0\n0.7\n\n\n\n\n\n\n\n\n\nFind the oldest to youngest counties in the US.\n\n\ncounty_med_age_old_to_young_dt &lt;- county_med_age_dt[order(-estimate)]\n\n\n\n\n\nTable 3.3: The oldest counties in the US by median age\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n12119\nSumter County, Florida\nB01002_001\n68.0\n0.3\n\n\n48301\nLoving County, Texas\nB01002_001\n62.2\n37.8\n\n\n48243\nJeff Davis County, Texas\nB01002_001\n61.3\n36.8\n\n\n08027\nCuster County, Colorado\nB01002_001\n60.1\n3.4\n\n\n12015\nCharlotte County, Florida\nB01002_001\n59.5\n0.2\n\n\n51091\nHighland County, Virginia\nB01002_001\n59.5\n4.8\n\n\n\n\n\n\n\n\n\nFilter the counties in the US with a median age &gt;= 50.\n\nUse a simple logical expression to filter the data frame county_med_age_dt:\n\ncounty_med_age_gte_50_dt &lt;- county_med_age_dt[estimate &gt;= 50] %&gt;%\n.[order(GEOID),]  \n\n\n\n\n\nTable 3.4: Counties with a median age of 50 or above\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n02105\nHoonah-Angoon Census Area, Alaska\nB01002_001\n52.1\n2.9\n\n\n04007\nGila County, Arizona\nB01002_001\n50.4\n0.2\n\n\n04012\nLa Paz County, Arizona\nB01002_001\n57.4\n0.6\n\n\n04015\nMohave County, Arizona\nB01002_001\n52.3\n0.2\n\n\n04025\nYavapai County, Arizona\nB01002_001\n54.1\n0.2\n\n\n05005\nBaxter County, Arkansas\nB01002_001\n52.3\n0.5\n\n\n\n\n\n\n\n\n\nSeparate the “NAME” column into columns of state and county names.\n\nUse data.table::tstrsplit() to split the “NAME” column and then remove the “NAME” column:\n\ncounty_med_age_dt &lt;- county_med_age_dt[, c(\"county\",\"state\") := tstrsplit(NAME,\",\")] %&gt;%\n  .[, NAME := NULL] %&gt;%\n.[, .(GEOID, county, state, variable, estimate, moe)]  \n\n\n\n\n\nTable 3.5: Separate columns for county and state\n\n\nGEOID\ncounty\nstate\nvariable\nestimate\nmoe\n\n\n\n\n01001\nAutauga County\nAlabama\nB01002_001\n38.6\n0.6\n\n\n01003\nBaldwin County\nAlabama\nB01002_001\n43.2\n0.4\n\n\n01005\nBarbour County\nAlabama\nB01002_001\n40.1\n0.6\n\n\n01007\nBibb County\nAlabama\nB01002_001\n39.9\n1.2\n\n\n01009\nBlount County\nAlabama\nB01002_001\n41.0\n0.5\n\n\n01011\nBullock County\nAlabama\nB01002_001\n39.7\n1.9\n\n\n\n\n\n\n\n\n\n\n\n\nCompare the populations of different races in each county in the state of Arizona by normalizing a set of variables.\n\nGet the total population by race in each county:\n\naz_fips &lt;- usmap::fips(\"AZ\")  # Get the fips number for Arizona\n\nar_pop_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B03002_001E\", \"B03002_001M\", \"B03002_003E\", \"B03002_004E\", \"B03002_005E\", \"B03002_006E\", \"B03002_007E\", \"B03002_012E\", \"B03002_003M\", \"B03002_004M\", \"B03002_005M\", \"B03002_006M\", \"B03002_007M\", \"B03002_012M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", az_fips)\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nReshape the estimates and summary to the long form:\n\nestimate_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = c(\"B03002_003E\",\"B03002_004E\",\"B03002_005E\",\"B03002_006E\",\"B03002_007E\",\"B03002_012E\")\n)\nmoe_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = c(\"B03002_003M\", \"B03002_004M\", \"B03002_005M\", \"B03002_006M\", \"B03002_007M\", \"B03002_012M\")\n)\nsummary_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = \"B03002_001E\"\n)\nsummary_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = \"B03002_001M\"\n)\n\nPerform some simple wrangling:\n\nestimate_long_dt &lt;- estimate_long_dt %&gt;% \n  .[, estimate := as.numeric(estimate)] %&gt;% \n  .[, variable := fcase(\n     variable == \"B03002_003E\",\"White\",\n     variable == \"B03002_004E\",\"Black\",\n     variable == \"B03002_005E\",\"Native\",\n     variable == \"B03002_006E\",\"Asian\",\n     variable == \"B03002_007E\",\"HIPI\",\n     variable == \"B03002_012E\",\"Hispanic\")\n  ] %&gt;% \n  .[, moe := as.numeric(moe_long_dt$estimate)] %&gt;% \n  .[, moe := ifelse(moe == -555555555,NA,moe)]\n\nMore wrangling on the summary variables:\n\nsummary_est_dt &lt;- summary_est_dt %&gt;% \n  .[, summary_est := as.numeric(estimate)] %&gt;% \n  .[, .(GEOID, summary_est)]\nsummary_moe_dt &lt;- summary_moe_dt %&gt;% \n  .[, summary_moe := as.numeric(estimate)] %&gt;% \n  .[, summary_moe := ifelse(estimate == -555555555,NA,estimate)] %&gt;% \n  .[, .(GEOID, summary_moe)]\n\nWrap it all up with some joins:\n\ndata.table::setkeyv(estimate_long_dt, cols = \"GEOID\")\ndata.table::setkeyv(summary_est_dt, cols = \"GEOID\")\ndata.table::setkeyv(summary_moe_dt, cols = \"GEOID\")\nestimate_long_dt &lt;- estimate_long_dt[summary_est_dt]\nestimate_long_dt &lt;- estimate_long_dt[summary_moe_dt]\n\n\n\n\n\nTable 3.6: Race and ethnicity in Arizonia\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\nsummary_est\nsummary_moe\n\n\n\n\nApache County, Arizona\n04001\nWhite\n12993\n56\n71714\nNA\n\n\nApache County, Arizona\n04001\nBlack\n544\n56\n71714\nNA\n\n\nApache County, Arizona\n04001\nNative\n51979\n327\n71714\nNA\n\n\nApache County, Arizona\n04001\nAsian\n262\n76\n71714\nNA\n\n\nApache County, Arizona\n04001\nHIPI\n49\n14\n71714\nNA\n\n\nApache County, Arizona\n04001\nHispanic\n4751\nNA\n71714\nNA\n\n\n\n\n\n\n\n\nFinish by adding a column representing the percentage of each Census tract’s population that cooresponds to each racial/ethnic group in 2016-2020.\n\nestimate_percent_long_dt &lt;- estimate_long_dt %&gt;% \n  .[, percent := 100 * (estimate/summary_est)] %&gt;% \n  .[, .(NAME, variable, percent)]\n\n\n\n\n\nTable 3.7: Race and ethnicity in Arizonia as percentages\n\n\nNAME\nvariable\npercent\n\n\n\n\nApache County, Arizona\nWhite\n18.1178013\n\n\nApache County, Arizona\nBlack\n0.7585688\n\n\nApache County, Arizona\nNative\n72.4809661\n\n\nApache County, Arizona\nAsian\n0.3653401\n\n\nApache County, Arizona\nHIPI\n0.0683270\n\n\nApache County, Arizona\nHispanic\n6.6249268\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroup estimate_percent_long_dt by the “NAME” column (county) and select the largest race percentage from each sub-group.\n\nDefine the grouping for estimate_percent_long_dt and filter the “percent” column as the maximum race/ethnic percent for each sub-group:\nThe “.SD” stands for Subset of Data. It by itself is a data.table that holds the data for the current sub-group defined using by.\n\nestimate_percent_grouped_dt &lt;- estimate_percent_long_dt[,\n  .SD[percent == max(percent)], \n  by = NAME\n]\n\n\n\n\n\nTable 3.8: Largest group by county in Arizona\n\n\nNAME\nvariable\npercent\n\n\n\n\nApache County, Arizona\nNative\n72.48097\n\n\nCochise County, Arizona\nWhite\n54.64561\n\n\nCoconino County, Arizona\nWhite\n53.80798\n\n\nGila County, Arizona\nWhite\n61.85232\n\n\nGraham County, Arizona\nWhite\n50.88764\n\n\nGreenlee County, Arizona\nHispanic\n47.26889\n\n\nLa Paz County, Arizona\nWhite\n57.18089\n\n\nMaricopa County, Arizona\nWhite\n54.55515\n\n\nMohave County, Arizona\nWhite\n76.69694\n\n\nNavajo County, Arizona\nNative\n42.71386\n\n\nPima County, Arizona\nWhite\n51.14649\n\n\nPinal County, Arizona\nWhite\n56.24018\n\n\nSanta Cruz County, Arizona\nHispanic\n83.25535\n\n\nYavapai County, Arizona\nWhite\n80.11369\n\n\nYuma County, Arizona\nHispanic\n64.06755\n\n\n\n\n\n\n\n\n\nGroup estimate_percent_long_dt by race from the “variable” column and compute summary statistics for each of the sub-groups.\n\nDefine the grouping on racial and ethnic designations (the “variable” column of estimate_percent_long_dt) and show the median percentage for each group ordered from highest to lowest:\n\nestimate_percent_median_dt &lt;- estimate_percent_long_dt[, \n  .(median_pct = stats::median(percent)), \n  by = variable] %&gt;% # compute the median percent for each group\n  .[order(-median_pct)] # order \"median_pct\" column descending\n\n\n\n\n\nTable 3.9: Median percentage by group in Arizona\n\n\nvariable\nmedian_pct\n\n\n\n\nWhite\n53.8079773\n\n\nHispanic\n30.4721836\n\n\nNative\n3.6344427\n\n\nBlack\n1.2857283\n\n\nAsian\n0.9918415\n\n\nHIPI\n0.1070384\n\n\n\n\n\n\n\n\n\n\n\n\nRe-combine the bands of household income to broader bands for Minnesota counties from the 2012-2016 “acs/acs5” dataset.\n\nGet the household income by county in Minnesota:\n\nmn_fips &lt;- usmap::fips(\"MN\")\nmn_hh_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2016,\n  group = \"B19001\",\n  region = \"county:*\",\n  regionin = paste0(\"state:\", mn_fips),\n  wide_to_long = T\n) %&gt;%\n  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n  .[, .(GEOID, NAME, variable, estimate, moe)] %&gt;%\n  .[order(GEOID, variable)]\n\n\n\n\n\nTable 3.10: Table/Group B19001 for counties in Minnesota\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n27001\nAitkin County, Minnesota\nB19001_001\n7640\n262\n\n\n27001\nAitkin County, Minnesota\nB19001_002\n562\n77\n\n\n27001\nAitkin County, Minnesota\nB19001_003\n544\n72\n\n\n27001\nAitkin County, Minnesota\nB19001_004\n472\n69\n\n\n27001\nAitkin County, Minnesota\nB19001_005\n508\n68\n\n\n27001\nAitkin County, Minnesota\nB19001_006\n522\n92\n\n\n\n\n\n\n\n\n\nConsolidate the 16 bands of income (“B19001_2” to “B19001_017”) into 3 bands.\n\nUse data.table’s fcase() function. Disregard the “B19001_001” which is the total number of households for each county.\n\nmm_hh_income_recode_dt &lt;- mn_hh_income_dt %&gt;%\n  .[variable != \"B19001_001\"] %&gt;%\n  .[, variable := as.character(variable)] %&gt;% # \"variable\" column is factor; change it to character\n  .[, incgroup := fcase(                      # re-band \"variable\" column\n    variable &lt; \"B19001_008\", \"below35k\",\n    variable &gt;= \"B19001_008\" &  variable &lt; \"B19001_013\", \"bw35kand75k\",\n    variable &gt;= \"B19001_013\", \"above75k\")] \n\n\n\n\n\nTable 3.11: Recoded household income categories\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\nincgroup\n\n\n\n\n27001\nAitkin County, Minnesota\nB19001_002\n562\n77\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_003\n544\n72\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_004\n472\n69\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_005\n508\n68\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_006\n522\n92\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_007\n447\n61\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_008\n390\n49\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_009\n426\n64\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_010\n415\n65\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_011\n706\n81\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_012\n942\n100\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_013\n810\n68\nabove75k\n\n\n\n\n\n\n\n\n\nGroup mm_hh_income_recode_dt by “incgroup” and compute the sum of “estimate” for each sub-group.\n\nUse data.table’s by directive:\n\nmm_hh_income_recode_grouped_dt &lt;- mm_hh_income_recode_dt[,\n  .(estimate = sum(estimate)), \n  by = c(\"GEOID\", \"incgroup\")\n] \n\n\n\n\n\nTable 3.12: Grouped sums by income bands\n\n\nGEOID\nincgroup\nestimate\n\n\n\n\n27001\nbelow35k\n3055\n\n\n27001\nbw35kand75k\n2879\n\n\n27001\nabove75k\n1706\n\n\n27003\nbelow35k\n24546\n\n\n27003\nbw35kand75k\n39311\n\n\n27003\nabove75k\n61403\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooking at geography changes over time.\n\nLook at age data (group = “B01001”) on Oglala Lakota County, South Dakota.\n\nCall RcensusPkg::get_vintage_data():\n\nsd_oglala_fips &lt;- usmap::fips(state = \"SD\", county = \"Oglala Lakota\")\noglala_lakota_age_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  region = paste0(\"county:\", substr(sd_oglala_fips,3,5)),\n  regionin = paste0(\"state:\", substr(sd_oglala_fips,1,2)),\n  wide_to_long = T\n) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n.[, moe := ifelse(moe == -555555555, NA, moe)] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]  \n\nTo look at how the age numbers have changed, we could compare the above table with the data from a previous survey such as the 2006-2010 ACS 5-year survey. But a request for the data would result in an error because Oglala Lakota County had a different name in 2010 (i.e. “Shannon County” which has a fips code of “46113”).\n\n\n\n\nTable 3.13: Age table/group for Oglala Lakota County\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_001\n14277\nNA\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_002\n6930\n132\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_003\n761\n66\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_004\n794\n128\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_005\n707\n123\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_006\n394\n20\n\n\n\n\n\n\n\n\n\nGet the 2010 age data for the South Dakota county named “Shannon County”.\n\nCall RcensusPkg::get_vintage_data() using the “46113” fips code):\n\nsd_oglala_2010_fips &lt;- \"46113\"\noglala_lakota_age_2010_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2010,\n  group = \"B01001\",\n  region = paste0(\"county:\", substr(sd_oglala_2010_fips,3,5)),\n  regionin = paste0(\"state:\", substr(sd_oglala_2010_fips,1,2)),\n  wide_to_long = T\n) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n.[, moe := ifelse(moe == -555555555, NA, moe)] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]  \n\n\n\n\n\nTable 3.14: Age table/group for Oglala Lakota County, SD (then named Shannon County)\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n46113\nShannon County, South Dakota\nB01001_001\n13437\nNA\n\n\n46113\nShannon County, South Dakota\nB01001_002\n6553\n47\n\n\n46113\nShannon County, South Dakota\nB01001_003\n770\n99\n\n\n46113\nShannon County, South Dakota\nB01001_004\n565\n151\n\n\n46113\nShannon County, South Dakota\nB01001_005\n833\n151\n\n\n46113\nShannon County, South Dakota\nB01001_006\n541\n47\n\n\n\n\n\n\n\n\nIn addition to changes in geographic identifiers, variable IDs can change over time as well.\n\nDemonstrate changes in the variable acronym name “DP02_0068” from the “acs/acs1/profile” dataset for the years 2018 and 2019.\n\nThe acronym “DP02_0068” is the percentage of residents age 25 and up with a 4-year college degree.\nUse RcensusPkg::get_variable_names() with its string filter for filtering the resultant data.table’s “name” column for 2019:\n\nDP02_0068_2019_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  filter_name_str = \"dp02_0068\"\n)\n\n\n\n\n\nTable 3.15: ACS Data Profile data in 2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068E\nEstimate!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\nDP02_0068PE\nPercent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nfloat\n\n\n\n\n\n\n\n\nUse RcensusPkg::get_variable_names() with its string filter for filtering the resultant data.table’s “name” column for 2018:\n\nDP02_0068_2018_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2018,\n  filter_name_str = \"dp02_0068\"\n)\n\nWe see from the table that the variable acronym “DP02_0068” has completely changed in its definition from vintage 2018 to vintage 2019.\n\n\n\n\nTable 3.16: ACS Data Profile data in 2018\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068E\nEstimate!!VETERAN STATUS!!Civilian population 18 years and over\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\nDP02_0068PE\nPercent Estimate!!VETERAN STATUS!!Civilian population 18 years and over\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\n\n\n\n\n\n\n\n\n\nThe variables in the Comparison Profile dataset is an alternative for time comparisons. Groups of variables are available in both 1-year (acs/acs1/cprofile) and 5-year (acs/acs5/cprofile) datasets.\n\nGet inflation-adjusted median household incomes of Alaska counties and county-equivalents for 2015/2020.\n\nFind the variable acronym names of interest from the acs/acs1/cprofile dataset:\n\nhh_income_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5/cprofile\",\n  vintage = 2020,\n  filter_label_str = \"median household income\"\n)\n\n\n\n\n\nTable 17a: Variables available that addresses median household income\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nCP03_2015_062E\n2011-2015 Estimates!!INCOME AND BENEFITS (IN 2020 INFLATION-ADJUSTED DOLLARS)!!Total households!!Median household income (dollars)\nCOMPARATIVE ECONOMIC CHARACTERISTICS\nNA\nint\n\n\nCP03_2020_062E\n2016-2020 Estimates!!INCOME AND BENEFITS (IN 2020 INFLATION-ADJUSTED DOLLARS)!!Total households!!Median household income (dollars)\nCOMPARATIVE ECONOMIC CHARACTERISTICS\nNA\nint\n\n\n\n\n\n\n\n\nGet the 5-year 2015/2020 median household incomes for Alaska counties:\n\nalaska_fips &lt;- usmap::fips(state = \"alaska\")\nalaska_hh_incomes_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/cprofile\",\n  vintage = 2020,\n  vars = c(\"CP03_2015_062E\", \"CP03_2020_062E\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", alaska_fips)\n) %&gt;%\ndata.table::setnames(., old = c(\"CP03_2015_062E\", \"CP03_2020_062E\"), new = c(\"income15\",\"income20\")) %&gt;% \n.[, .(GEOID, NAME, income15, income20)]\n\nReshape alaska_hh_incomes_dt from its default “wide” shape to “long”:\n\nalaska_hh_incomes_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = alaska_hh_incomes_dt\n)%&gt;%\n.[order(GEOID)]\n\n\n\n\n\nTable 3.17: Comparative income data from the ACS CP tables\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nAleutians West Census Area, Alaska\n02016\nincome15\n92500\n\n\nAleutians West Census Area, Alaska\n02016\nincome20\n87443\n\n\nAnchorage Municipality, Alaska\n02020\nincome15\n85534\n\n\nAnchorage Municipality, Alaska\n02020\nincome20\n84813\n\n\nBethel Census Area, Alaska\n02050\nincome15\n55692\n\n\nBethel Census Area, Alaska\n02050\nincome20\n54400\n\n\n\n\n\n\n\n\n\n\n\nUse purrr to iterate through the years 2010 to 2019 to request data on college degree holders (group/table “B15002”) for counties in Colorado from the “acs/acs1” dataset.\n\nReview the “B15002” variables of interest:\n\nvars &lt;- c(\n  \"B15002_001E\", \"B15002_001M\", # the summary variables\n  \"B15002_015E\", \"B15002_015M\",\n  \"B15002_016E\", \"B15002_016M\",\n  \"B15002_017E\", \"B15002_017M\",\n  \"B15002_018E\", \"B15002_018M\",\n  \"B15002_032E\", \"B15002_032M\",\n  \"B15002_033E\", \"B15002_033M\",\n  \"B15002_034E\", \"B15002_034M\",\n  \"B15002_035E\", \"B15002_035M\"\n)\nvars_B15002_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = vars\n)\n\n\n\n\n\nTable 18a: ‘B15002’ variables of interest\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB15002_001E\nEstimate!!Total:\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_015E\nEstimate!!Total:!!Male:!!Bachelor's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_016E\nEstimate!!Total:!!Male:!!Master's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_017E\nEstimate!!Total:!!Male:!!Professional school degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_018E\nEstimate!!Total:!!Male:!!Doctorate degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_032E\nEstimate!!Total:!!Female:!!Bachelor's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_033E\nEstimate!!Total:!!Female:!!Master's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_034E\nEstimate!!Total:!!Female:!!Professional school degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_035E\nEstimate!!Total:!!Female:!!Doctorate degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\n\n\n\n\n\n\nCall purrr::map_dfr() to retrieve the “B15002_*” data for the years of interest as a row combined data.table:\n\ncolorado_fips &lt;- usmap::fips(state = \"colorado\")\nvintages &lt;- 2010:2019\nnames(vintages) &lt;- vintages\n\ncollege_by_year_dt &lt;- purrr::map_dfr(vintages, ~{\n  RcensusPkg::get_vintage_data(\n    dataset = \"acs/acs1\",\n    vintage = .x,\n    vars = vars,\n    region = \"county:*\",\n    regionin = paste0(\"state:\",colorado_fips)\n  )\n}, .id = \"year\") %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nAs an alternative call RcensusPkg::get_multi_vintage_data() to retrieve across multiple years:\nNote that both college_by_year_dt and college_by_year_alt_dt are identical.\n\ncollege_by_year_alt_dt &lt;- RcensusPkg::get_multi_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage_v = vintages,\n  vars = vars,\n  region = \"county:*\",\n  regionin = paste0(\"state:\", colorado_fips)\n) %&gt;%\n  .[,`:=`(state = NULL, county = NULL)] %&gt;%\ndata.table::setnames(., old=\"vintage\", new = \"year\")\n\nReshape the default “wide” format of college_by_year_dt to a “long” format:\n\ncollege_by_year_estimate_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = c(\n    \"B15002_015E\",\"B15002_016E\",\n    \"B15002_017E\",\"B15002_018E\",\n    \"B15002_032E\",\"B15002_033E\",\n    \"B15002_034E\",\"B15002_035E\"\n  )\n) %&gt;% \n  .[, estimate := as.numeric(estimate)]\n\ncollege_by_year_moe_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = c(\n    \"B15002_015M\",\"B15002_016M\",\n    \"B15002_017M\",\"B15002_018M\",\n    \"B15002_032M\",\"B15002_033M\",\n    \"B15002_034M\",\"B15002_035M\"\n  ),\n  value_name = \"moe\"\n) %&gt;% \n  .[, moe := as.numeric(moe)] %&gt;% \n  .[, .(GEOID, moe)]\n \ncollege_by_summary_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = \"B15002_001E\",\n  value_name = \"summary_est\"\n) %&gt;% \n  .[, summary_est := as.numeric(summary_est)] %&gt;% \n  .[, .(GEOID, year, summary_est)]\n\ncollege_by_summary_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = \"B15002_001M\",\n  value_name = \"summary_moe\"\n) %&gt;% \n  .[, summary_moe := as.numeric(summary_moe)] %&gt;% \n  .[, .(GEOID, year, summary_moe)]\n\n \ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt %&gt;% \n  .[, moe := college_by_year_moe_long_dt$moe] \n\n \ndata.table::setkeyv(college_by_year_estimate_long_dt, cols = c(\"GEOID\",\"year\"))\ndata.table::setkeyv(college_by_summary_est_dt, cols = c(\"GEOID\",\"year\"))\ndata.table::setkeyv(college_by_summary_moe_dt, cols = c(\"GEOID\",\"year\"))\ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt[college_by_summary_est_dt]\ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt[college_by_summary_moe_dt] %&gt;% \n  data.table::setorderv(cols = c(\"NAME\", \"variable\"))\n\n\n\n\n\nTable 3.18: Educational attainment over time for Colorado counties\n\n\nyear\nGEOID\nNAME\nvariable\nestimate\nmoe\nsummary_est\nsummary_moe\n\n\n\n\n2010\n08001\nAdams County, Colorado\nB15002_015E\n20501\n1983\n275849\n790\n\n\n2011\n08001\nAdams County, Colorado\nB15002_015E\n21233\n2124\n281231\n865\n\n\n2012\n08001\nAdams County, Colorado\nB15002_015E\n19238\n2020\n287924\n693\n\n\n2013\n08001\nAdams County, Colorado\nB15002_015E\n23818\n2445\n295122\n673\n\n\n2014\n08001\nAdams County, Colorado\nB15002_015E\n20255\n1928\n304394\n541\n\n\n2015\n08001\nAdams County, Colorado\nB15002_015E\n22962\n2018\n312281\n705\n\n\n\n\n\n\n\n\n\nFrom college_by_year_estimate_long_gt group by “NAME” and “year” and compute the percentage of the population age 25 and up with a 4-year college degree.\n\n\npercent_college_by_year_dt &lt;- college_by_year_estimate_long_dt %&gt;% \n  .[, .(numerator=sum(.SD$estimate),denominator=.SD$summary_est[[1]]), by = .(NAME,year)] %&gt;% \n  .[, pct_college := 100 * (numerator / denominator)] %&gt;% \n  data.table::dcast(\n    formula = NAME ~ year,\n    value.var = \"pct_college\"\n  )\n\n\n\n\n\nTable 3.19: Percent college by year in Colorado counties\n\n\nNAME\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\n\n\nAdams County, Colorado\n20.57394\n20.51801\n20.64538\n23.09384\n22.16929\n22.79742\n22.95293\n22.87552\n25.74152\n25.39956\n\n\nArapahoe County, Colorado\n37.03001\n38.24506\n39.28435\n39.42478\n40.94194\n41.03578\n41.48359\n43.69387\n42.71285\n43.78332\n\n\nBoulder County, Colorado\n57.50285\n59.05601\n57.88284\n58.53214\n58.04066\n60.57147\n60.63005\n63.18150\n62.51394\n64.80486\n\n\nBroomfield County, Colorado\nNA\nNA\nNA\nNA\nNA\n56.07776\n51.94338\n55.13359\n56.27740\n56.87181\n\n\nDenver County, Colorado\n40.87971\n42.97122\n44.65358\n44.35340\n44.25600\n47.10820\n47.39683\n49.32692\n51.34580\n53.10088\n\n\nDouglas County, Colorado\n54.96800\n53.27936\n55.09223\n57.66999\n56.48866\n56.06928\n59.42687\n58.53342\n58.37539\n58.13747\n\n\nEl Paso County, Colorado\n34.11467\n35.69184\n34.91315\n35.47612\n36.49302\n36.43089\n38.67864\n39.19931\n38.83872\n39.04942\n\n\nJefferson County, Colorado\n40.83113\n39.54961\n41.43825\n41.04234\n41.99768\n43.20923\n43.51953\n45.57140\n45.83786\n47.61074\n\n\nLarimer County, Colorado\n45.80197\n42.83543\n44.71423\n43.33800\n42.67180\n46.16705\n46.78871\n47.90465\n47.62330\n49.01654\n\n\nMesa County, Colorado\n24.99285\n25.82724\n23.01511\n27.63325\n25.14875\n30.27630\n25.02980\n25.82455\n29.95739\n29.78537\n\n\nPueblo County, Colorado\n19.54336\n23.50261\n19.85871\n21.34296\n23.56390\n21.60260\n21.17520\n22.15222\n21.75405\n23.41852\n\n\nWeld County, Colorado\n25.07193\n24.65436\n26.29706\n27.40582\n25.71741\n25.93728\n27.21992\n27.51222\n27.36542\n29.88273\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis section skipped.",
    "crumbs": [
      "3 Wrangling Census Data with tidyverse tools"
    ]
  },
  {
    "objectID": "3_wrangling_census_data_with_tidyverse_tools.html#exploring-census-data-with-tidyverse-tools",
    "href": "3_wrangling_census_data_with_tidyverse_tools.html#exploring-census-data-with-tidyverse-tools",
    "title": "3 Wrangling Census Data with tidyverse tools",
    "section": "",
    "text": "From the RcensusPkg:: package we will be utilizing the following functions to obtain Census Bureau data:\n\nRcensusPkg::get_vintage_data() Get Census Bureau data for a specific data set, variables, and region in the form of a data.table.\nRcensusPkg::get_variable_names() Get the variable names of the Census Bureau and their descriptions in the form of a data.table.\nRcensusPkg::get_multi_vintage_data() Get Census Bureau data for a specific data set, variables, and region in the form of a data.table for multiple vintages.\n\nThe data wrangling such as sorting, ordering, filtering, mutating, joining, grouping, renaming, variable selection will be accomplished using the many capabilities of the data.table package.\n\n\n\nRequest the median age from 2016-2020 5-year ACS Survey for all counties in the United States.\n\nCall RcensusPkg::get_vintage_data():\n\ncounty_med_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B01002_001E\", \"B01002_001M\"),\n  region = \"county\"\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)] %&gt;%\ndata.table::setnames(., old = c(\"B01002_001E\", \"B01002_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, variable := \"B01002_001\"] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]\n\n\n\n\n\nTable 3.1: Median age for US counties\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n01001\nAutauga County, Alabama\nB01002_001\n38.6\n0.6\n\n\n01003\nBaldwin County, Alabama\nB01002_001\n43.2\n0.4\n\n\n01005\nBarbour County, Alabama\nB01002_001\n40.1\n0.6\n\n\n01007\nBibb County, Alabama\nB01002_001\n39.9\n1.2\n\n\n01009\nBlount County, Alabama\nB01002_001\n41.0\n0.5\n\n\n01011\nBullock County, Alabama\nB01002_001\n39.7\n1.9\n\n\n\n\n\n\n\n\n\nFind the youngest to oldest counties in the US.\n\nOrder the “estimate” column of county_med_age_dt via ascending direction (the default):\n\ncounty_med_age_young_to_old_dt &lt;- county_med_age_dt[order(estimate)]\n\n\n\n\n\nTable 3.2: The youngest counties in the US by median age\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n51678\nLexington city, Virginia\nB01002_001\n22.2\n0.8\n\n\n35011\nDe Baca County, New Mexico\nB01002_001\n22.2\n6.9\n\n\n16065\nMadison County, Idaho\nB01002_001\n23.5\n0.2\n\n\n46121\nTodd County, South Dakota\nB01002_001\n23.6\n0.6\n\n\n51750\nRadford city, Virginia\nB01002_001\n23.7\n0.6\n\n\n13053\nChattahoochee County, Georgia\nB01002_001\n24.0\n0.7\n\n\n\n\n\n\n\n\n\nFind the oldest to youngest counties in the US.\n\n\ncounty_med_age_old_to_young_dt &lt;- county_med_age_dt[order(-estimate)]\n\n\n\n\n\nTable 3.3: The oldest counties in the US by median age\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n12119\nSumter County, Florida\nB01002_001\n68.0\n0.3\n\n\n48301\nLoving County, Texas\nB01002_001\n62.2\n37.8\n\n\n48243\nJeff Davis County, Texas\nB01002_001\n61.3\n36.8\n\n\n08027\nCuster County, Colorado\nB01002_001\n60.1\n3.4\n\n\n12015\nCharlotte County, Florida\nB01002_001\n59.5\n0.2\n\n\n51091\nHighland County, Virginia\nB01002_001\n59.5\n4.8\n\n\n\n\n\n\n\n\n\nFilter the counties in the US with a median age &gt;= 50.\n\nUse a simple logical expression to filter the data frame county_med_age_dt:\n\ncounty_med_age_gte_50_dt &lt;- county_med_age_dt[estimate &gt;= 50] %&gt;%\n.[order(GEOID),]  \n\n\n\n\n\nTable 3.4: Counties with a median age of 50 or above\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n02105\nHoonah-Angoon Census Area, Alaska\nB01002_001\n52.1\n2.9\n\n\n04007\nGila County, Arizona\nB01002_001\n50.4\n0.2\n\n\n04012\nLa Paz County, Arizona\nB01002_001\n57.4\n0.6\n\n\n04015\nMohave County, Arizona\nB01002_001\n52.3\n0.2\n\n\n04025\nYavapai County, Arizona\nB01002_001\n54.1\n0.2\n\n\n05005\nBaxter County, Arkansas\nB01002_001\n52.3\n0.5\n\n\n\n\n\n\n\n\n\nSeparate the “NAME” column into columns of state and county names.\n\nUse data.table::tstrsplit() to split the “NAME” column and then remove the “NAME” column:\n\ncounty_med_age_dt &lt;- county_med_age_dt[, c(\"county\",\"state\") := tstrsplit(NAME,\",\")] %&gt;%\n  .[, NAME := NULL] %&gt;%\n.[, .(GEOID, county, state, variable, estimate, moe)]  \n\n\n\n\n\nTable 3.5: Separate columns for county and state\n\n\nGEOID\ncounty\nstate\nvariable\nestimate\nmoe\n\n\n\n\n01001\nAutauga County\nAlabama\nB01002_001\n38.6\n0.6\n\n\n01003\nBaldwin County\nAlabama\nB01002_001\n43.2\n0.4\n\n\n01005\nBarbour County\nAlabama\nB01002_001\n40.1\n0.6\n\n\n01007\nBibb County\nAlabama\nB01002_001\n39.9\n1.2\n\n\n01009\nBlount County\nAlabama\nB01002_001\n41.0\n0.5\n\n\n01011\nBullock County\nAlabama\nB01002_001\n39.7\n1.9\n\n\n\n\n\n\n\n\n\n\n\n\nCompare the populations of different races in each county in the state of Arizona by normalizing a set of variables.\n\nGet the total population by race in each county:\n\naz_fips &lt;- usmap::fips(\"AZ\")  # Get the fips number for Arizona\n\nar_pop_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B03002_001E\", \"B03002_001M\", \"B03002_003E\", \"B03002_004E\", \"B03002_005E\", \"B03002_006E\", \"B03002_007E\", \"B03002_012E\", \"B03002_003M\", \"B03002_004M\", \"B03002_005M\", \"B03002_006M\", \"B03002_007M\", \"B03002_012M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", az_fips)\n) %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nReshape the estimates and summary to the long form:\n\nestimate_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = c(\"B03002_003E\",\"B03002_004E\",\"B03002_005E\",\"B03002_006E\",\"B03002_007E\",\"B03002_012E\")\n)\nmoe_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = c(\"B03002_003M\", \"B03002_004M\", \"B03002_005M\", \"B03002_006M\", \"B03002_007M\", \"B03002_012M\")\n)\nsummary_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = \"B03002_001E\"\n)\nsummary_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = ar_pop_race_dt,\n  measure_v = \"B03002_001M\"\n)\n\nPerform some simple wrangling:\n\nestimate_long_dt &lt;- estimate_long_dt %&gt;% \n  .[, estimate := as.numeric(estimate)] %&gt;% \n  .[, variable := fcase(\n     variable == \"B03002_003E\",\"White\",\n     variable == \"B03002_004E\",\"Black\",\n     variable == \"B03002_005E\",\"Native\",\n     variable == \"B03002_006E\",\"Asian\",\n     variable == \"B03002_007E\",\"HIPI\",\n     variable == \"B03002_012E\",\"Hispanic\")\n  ] %&gt;% \n  .[, moe := as.numeric(moe_long_dt$estimate)] %&gt;% \n  .[, moe := ifelse(moe == -555555555,NA,moe)]\n\nMore wrangling on the summary variables:\n\nsummary_est_dt &lt;- summary_est_dt %&gt;% \n  .[, summary_est := as.numeric(estimate)] %&gt;% \n  .[, .(GEOID, summary_est)]\nsummary_moe_dt &lt;- summary_moe_dt %&gt;% \n  .[, summary_moe := as.numeric(estimate)] %&gt;% \n  .[, summary_moe := ifelse(estimate == -555555555,NA,estimate)] %&gt;% \n  .[, .(GEOID, summary_moe)]\n\nWrap it all up with some joins:\n\ndata.table::setkeyv(estimate_long_dt, cols = \"GEOID\")\ndata.table::setkeyv(summary_est_dt, cols = \"GEOID\")\ndata.table::setkeyv(summary_moe_dt, cols = \"GEOID\")\nestimate_long_dt &lt;- estimate_long_dt[summary_est_dt]\nestimate_long_dt &lt;- estimate_long_dt[summary_moe_dt]\n\n\n\n\n\nTable 3.6: Race and ethnicity in Arizonia\n\n\nNAME\nGEOID\nvariable\nestimate\nmoe\nsummary_est\nsummary_moe\n\n\n\n\nApache County, Arizona\n04001\nWhite\n12993\n56\n71714\nNA\n\n\nApache County, Arizona\n04001\nBlack\n544\n56\n71714\nNA\n\n\nApache County, Arizona\n04001\nNative\n51979\n327\n71714\nNA\n\n\nApache County, Arizona\n04001\nAsian\n262\n76\n71714\nNA\n\n\nApache County, Arizona\n04001\nHIPI\n49\n14\n71714\nNA\n\n\nApache County, Arizona\n04001\nHispanic\n4751\nNA\n71714\nNA\n\n\n\n\n\n\n\n\nFinish by adding a column representing the percentage of each Census tract’s population that cooresponds to each racial/ethnic group in 2016-2020.\n\nestimate_percent_long_dt &lt;- estimate_long_dt %&gt;% \n  .[, percent := 100 * (estimate/summary_est)] %&gt;% \n  .[, .(NAME, variable, percent)]\n\n\n\n\n\nTable 3.7: Race and ethnicity in Arizonia as percentages\n\n\nNAME\nvariable\npercent\n\n\n\n\nApache County, Arizona\nWhite\n18.1178013\n\n\nApache County, Arizona\nBlack\n0.7585688\n\n\nApache County, Arizona\nNative\n72.4809661\n\n\nApache County, Arizona\nAsian\n0.3653401\n\n\nApache County, Arizona\nHIPI\n0.0683270\n\n\nApache County, Arizona\nHispanic\n6.6249268",
    "crumbs": [
      "3 Wrangling Census Data with tidyverse tools"
    ]
  },
  {
    "objectID": "3_wrangling_census_data_with_tidyverse_tools.html#group-wise-census-data-analysis",
    "href": "3_wrangling_census_data_with_tidyverse_tools.html#group-wise-census-data-analysis",
    "title": "3 Wrangling Census Data with tidyverse tools",
    "section": "",
    "text": "Group estimate_percent_long_dt by the “NAME” column (county) and select the largest race percentage from each sub-group.\n\nDefine the grouping for estimate_percent_long_dt and filter the “percent” column as the maximum race/ethnic percent for each sub-group:\nThe “.SD” stands for Subset of Data. It by itself is a data.table that holds the data for the current sub-group defined using by.\n\nestimate_percent_grouped_dt &lt;- estimate_percent_long_dt[,\n  .SD[percent == max(percent)], \n  by = NAME\n]\n\n\n\n\n\nTable 3.8: Largest group by county in Arizona\n\n\nNAME\nvariable\npercent\n\n\n\n\nApache County, Arizona\nNative\n72.48097\n\n\nCochise County, Arizona\nWhite\n54.64561\n\n\nCoconino County, Arizona\nWhite\n53.80798\n\n\nGila County, Arizona\nWhite\n61.85232\n\n\nGraham County, Arizona\nWhite\n50.88764\n\n\nGreenlee County, Arizona\nHispanic\n47.26889\n\n\nLa Paz County, Arizona\nWhite\n57.18089\n\n\nMaricopa County, Arizona\nWhite\n54.55515\n\n\nMohave County, Arizona\nWhite\n76.69694\n\n\nNavajo County, Arizona\nNative\n42.71386\n\n\nPima County, Arizona\nWhite\n51.14649\n\n\nPinal County, Arizona\nWhite\n56.24018\n\n\nSanta Cruz County, Arizona\nHispanic\n83.25535\n\n\nYavapai County, Arizona\nWhite\n80.11369\n\n\nYuma County, Arizona\nHispanic\n64.06755\n\n\n\n\n\n\n\n\n\nGroup estimate_percent_long_dt by race from the “variable” column and compute summary statistics for each of the sub-groups.\n\nDefine the grouping on racial and ethnic designations (the “variable” column of estimate_percent_long_dt) and show the median percentage for each group ordered from highest to lowest:\n\nestimate_percent_median_dt &lt;- estimate_percent_long_dt[, \n  .(median_pct = stats::median(percent)), \n  by = variable] %&gt;% # compute the median percent for each group\n  .[order(-median_pct)] # order \"median_pct\" column descending\n\n\n\n\n\nTable 3.9: Median percentage by group in Arizona\n\n\nvariable\nmedian_pct\n\n\n\n\nWhite\n53.8079773\n\n\nHispanic\n30.4721836\n\n\nNative\n3.6344427\n\n\nBlack\n1.2857283\n\n\nAsian\n0.9918415\n\n\nHIPI\n0.1070384\n\n\n\n\n\n\n\n\n\n\n\n\nRe-combine the bands of household income to broader bands for Minnesota counties from the 2012-2016 “acs/acs5” dataset.\n\nGet the household income by county in Minnesota:\n\nmn_fips &lt;- usmap::fips(\"MN\")\nmn_hh_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2016,\n  group = \"B19001\",\n  region = \"county:*\",\n  regionin = paste0(\"state:\", mn_fips),\n  wide_to_long = T\n) %&gt;%\n  .[, `:=` (estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n  .[, .(GEOID, NAME, variable, estimate, moe)] %&gt;%\n  .[order(GEOID, variable)]\n\n\n\n\n\nTable 3.10: Table/Group B19001 for counties in Minnesota\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n27001\nAitkin County, Minnesota\nB19001_001\n7640\n262\n\n\n27001\nAitkin County, Minnesota\nB19001_002\n562\n77\n\n\n27001\nAitkin County, Minnesota\nB19001_003\n544\n72\n\n\n27001\nAitkin County, Minnesota\nB19001_004\n472\n69\n\n\n27001\nAitkin County, Minnesota\nB19001_005\n508\n68\n\n\n27001\nAitkin County, Minnesota\nB19001_006\n522\n92\n\n\n\n\n\n\n\n\n\nConsolidate the 16 bands of income (“B19001_2” to “B19001_017”) into 3 bands.\n\nUse data.table’s fcase() function. Disregard the “B19001_001” which is the total number of households for each county.\n\nmm_hh_income_recode_dt &lt;- mn_hh_income_dt %&gt;%\n  .[variable != \"B19001_001\"] %&gt;%\n  .[, variable := as.character(variable)] %&gt;% # \"variable\" column is factor; change it to character\n  .[, incgroup := fcase(                      # re-band \"variable\" column\n    variable &lt; \"B19001_008\", \"below35k\",\n    variable &gt;= \"B19001_008\" &  variable &lt; \"B19001_013\", \"bw35kand75k\",\n    variable &gt;= \"B19001_013\", \"above75k\")] \n\n\n\n\n\nTable 3.11: Recoded household income categories\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\nincgroup\n\n\n\n\n27001\nAitkin County, Minnesota\nB19001_002\n562\n77\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_003\n544\n72\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_004\n472\n69\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_005\n508\n68\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_006\n522\n92\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_007\n447\n61\nbelow35k\n\n\n27001\nAitkin County, Minnesota\nB19001_008\n390\n49\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_009\n426\n64\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_010\n415\n65\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_011\n706\n81\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_012\n942\n100\nbw35kand75k\n\n\n27001\nAitkin County, Minnesota\nB19001_013\n810\n68\nabove75k\n\n\n\n\n\n\n\n\n\nGroup mm_hh_income_recode_dt by “incgroup” and compute the sum of “estimate” for each sub-group.\n\nUse data.table’s by directive:\n\nmm_hh_income_recode_grouped_dt &lt;- mm_hh_income_recode_dt[,\n  .(estimate = sum(estimate)), \n  by = c(\"GEOID\", \"incgroup\")\n] \n\n\n\n\n\nTable 3.12: Grouped sums by income bands\n\n\nGEOID\nincgroup\nestimate\n\n\n\n\n27001\nbelow35k\n3055\n\n\n27001\nbw35kand75k\n2879\n\n\n27001\nabove75k\n1706\n\n\n27003\nbelow35k\n24546\n\n\n27003\nbw35kand75k\n39311\n\n\n27003\nabove75k\n61403",
    "crumbs": [
      "3 Wrangling Census Data with tidyverse tools"
    ]
  },
  {
    "objectID": "3_wrangling_census_data_with_tidyverse_tools.html#comparing-acs-estimates-over-time",
    "href": "3_wrangling_census_data_with_tidyverse_tools.html#comparing-acs-estimates-over-time",
    "title": "3 Wrangling Census Data with tidyverse tools",
    "section": "",
    "text": "Looking at geography changes over time.\n\nLook at age data (group = “B01001”) on Oglala Lakota County, South Dakota.\n\nCall RcensusPkg::get_vintage_data():\n\nsd_oglala_fips &lt;- usmap::fips(state = \"SD\", county = \"Oglala Lakota\")\noglala_lakota_age_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  group = \"B01001\",\n  region = paste0(\"county:\", substr(sd_oglala_fips,3,5)),\n  regionin = paste0(\"state:\", substr(sd_oglala_fips,1,2)),\n  wide_to_long = T\n) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n.[, moe := ifelse(moe == -555555555, NA, moe)] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]  \n\nTo look at how the age numbers have changed, we could compare the above table with the data from a previous survey such as the 2006-2010 ACS 5-year survey. But a request for the data would result in an error because Oglala Lakota County had a different name in 2010 (i.e. “Shannon County” which has a fips code of “46113”).\n\n\n\n\nTable 3.13: Age table/group for Oglala Lakota County\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_001\n14277\nNA\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_002\n6930\n132\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_003\n761\n66\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_004\n794\n128\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_005\n707\n123\n\n\n46102\nOglala Lakota County, South Dakota\nB01001_006\n394\n20\n\n\n\n\n\n\n\n\n\nGet the 2010 age data for the South Dakota county named “Shannon County”.\n\nCall RcensusPkg::get_vintage_data() using the “46113” fips code):\n\nsd_oglala_2010_fips &lt;- \"46113\"\noglala_lakota_age_2010_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2010,\n  group = \"B01001\",\n  region = paste0(\"county:\", substr(sd_oglala_2010_fips,3,5)),\n  regionin = paste0(\"state:\", substr(sd_oglala_2010_fips,1,2)),\n  wide_to_long = T\n) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;%\n.[, moe := ifelse(moe == -555555555, NA, moe)] %&gt;%\n.[, .(GEOID, NAME, variable, estimate, moe)]  \n\n\n\n\n\nTable 3.14: Age table/group for Oglala Lakota County, SD (then named Shannon County)\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n46113\nShannon County, South Dakota\nB01001_001\n13437\nNA\n\n\n46113\nShannon County, South Dakota\nB01001_002\n6553\n47\n\n\n46113\nShannon County, South Dakota\nB01001_003\n770\n99\n\n\n46113\nShannon County, South Dakota\nB01001_004\n565\n151\n\n\n46113\nShannon County, South Dakota\nB01001_005\n833\n151\n\n\n46113\nShannon County, South Dakota\nB01001_006\n541\n47\n\n\n\n\n\n\n\n\nIn addition to changes in geographic identifiers, variable IDs can change over time as well.\n\nDemonstrate changes in the variable acronym name “DP02_0068” from the “acs/acs1/profile” dataset for the years 2018 and 2019.\n\nThe acronym “DP02_0068” is the percentage of residents age 25 and up with a 4-year college degree.\nUse RcensusPkg::get_variable_names() with its string filter for filtering the resultant data.table’s “name” column for 2019:\n\nDP02_0068_2019_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  filter_name_str = \"dp02_0068\"\n)\n\n\n\n\n\nTable 3.15: ACS Data Profile data in 2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068E\nEstimate!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\nDP02_0068PE\nPercent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nfloat\n\n\n\n\n\n\n\n\nUse RcensusPkg::get_variable_names() with its string filter for filtering the resultant data.table’s “name” column for 2018:\n\nDP02_0068_2018_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2018,\n  filter_name_str = \"dp02_0068\"\n)\n\nWe see from the table that the variable acronym “DP02_0068” has completely changed in its definition from vintage 2018 to vintage 2019.\n\n\n\n\nTable 3.16: ACS Data Profile data in 2018\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068E\nEstimate!!VETERAN STATUS!!Civilian population 18 years and over\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\nDP02_0068PE\nPercent Estimate!!VETERAN STATUS!!Civilian population 18 years and over\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nint\n\n\n\n\n\n\n\n\n\n\n\nThe variables in the Comparison Profile dataset is an alternative for time comparisons. Groups of variables are available in both 1-year (acs/acs1/cprofile) and 5-year (acs/acs5/cprofile) datasets.\n\nGet inflation-adjusted median household incomes of Alaska counties and county-equivalents for 2015/2020.\n\nFind the variable acronym names of interest from the acs/acs1/cprofile dataset:\n\nhh_income_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5/cprofile\",\n  vintage = 2020,\n  filter_label_str = \"median household income\"\n)\n\n\n\n\n\nTable 17a: Variables available that addresses median household income\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nCP03_2015_062E\n2011-2015 Estimates!!INCOME AND BENEFITS (IN 2020 INFLATION-ADJUSTED DOLLARS)!!Total households!!Median household income (dollars)\nCOMPARATIVE ECONOMIC CHARACTERISTICS\nNA\nint\n\n\nCP03_2020_062E\n2016-2020 Estimates!!INCOME AND BENEFITS (IN 2020 INFLATION-ADJUSTED DOLLARS)!!Total households!!Median household income (dollars)\nCOMPARATIVE ECONOMIC CHARACTERISTICS\nNA\nint\n\n\n\n\n\n\n\n\nGet the 5-year 2015/2020 median household incomes for Alaska counties:\n\nalaska_fips &lt;- usmap::fips(state = \"alaska\")\nalaska_hh_incomes_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/cprofile\",\n  vintage = 2020,\n  vars = c(\"CP03_2015_062E\", \"CP03_2020_062E\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", alaska_fips)\n) %&gt;%\ndata.table::setnames(., old = c(\"CP03_2015_062E\", \"CP03_2020_062E\"), new = c(\"income15\",\"income20\")) %&gt;% \n.[, .(GEOID, NAME, income15, income20)]\n\nReshape alaska_hh_incomes_dt from its default “wide” shape to “long”:\n\nalaska_hh_incomes_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = alaska_hh_incomes_dt\n)%&gt;%\n.[order(GEOID)]\n\n\n\n\n\nTable 3.17: Comparative income data from the ACS CP tables\n\n\nNAME\nGEOID\nvariable\nestimate\n\n\n\n\nAleutians West Census Area, Alaska\n02016\nincome15\n92500\n\n\nAleutians West Census Area, Alaska\n02016\nincome20\n87443\n\n\nAnchorage Municipality, Alaska\n02020\nincome15\n85534\n\n\nAnchorage Municipality, Alaska\n02020\nincome20\n84813\n\n\nBethel Census Area, Alaska\n02050\nincome15\n55692\n\n\nBethel Census Area, Alaska\n02050\nincome20\n54400\n\n\n\n\n\n\n\n\n\n\n\nUse purrr to iterate through the years 2010 to 2019 to request data on college degree holders (group/table “B15002”) for counties in Colorado from the “acs/acs1” dataset.\n\nReview the “B15002” variables of interest:\n\nvars &lt;- c(\n  \"B15002_001E\", \"B15002_001M\", # the summary variables\n  \"B15002_015E\", \"B15002_015M\",\n  \"B15002_016E\", \"B15002_016M\",\n  \"B15002_017E\", \"B15002_017M\",\n  \"B15002_018E\", \"B15002_018M\",\n  \"B15002_032E\", \"B15002_032M\",\n  \"B15002_033E\", \"B15002_033M\",\n  \"B15002_034E\", \"B15002_034M\",\n  \"B15002_035E\", \"B15002_035M\"\n)\nvars_B15002_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = vars\n)\n\n\n\n\n\nTable 18a: ‘B15002’ variables of interest\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nB15002_001E\nEstimate!!Total:\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_015E\nEstimate!!Total:!!Male:!!Bachelor's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_016E\nEstimate!!Total:!!Male:!!Master's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_017E\nEstimate!!Total:!!Male:!!Professional school degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_018E\nEstimate!!Total:!!Male:!!Doctorate degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_032E\nEstimate!!Total:!!Female:!!Bachelor's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_033E\nEstimate!!Total:!!Female:!!Master's degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_034E\nEstimate!!Total:!!Female:!!Professional school degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\nB15002_035E\nEstimate!!Total:!!Female:!!Doctorate degree\nSEX BY EDUCATIONAL ATTAINMENT FOR THE POPULATION 25 YEARS AND OVER\nNA\nint\n\n\n\n\n\n\n\n\nCall purrr::map_dfr() to retrieve the “B15002_*” data for the years of interest as a row combined data.table:\n\ncolorado_fips &lt;- usmap::fips(state = \"colorado\")\nvintages &lt;- 2010:2019\nnames(vintages) &lt;- vintages\n\ncollege_by_year_dt &lt;- purrr::map_dfr(vintages, ~{\n  RcensusPkg::get_vintage_data(\n    dataset = \"acs/acs1\",\n    vintage = .x,\n    vars = vars,\n    region = \"county:*\",\n    regionin = paste0(\"state:\",colorado_fips)\n  )\n}, .id = \"year\") %&gt;%\n.[, `:=`(state = NULL, county = NULL)]\n\nAs an alternative call RcensusPkg::get_multi_vintage_data() to retrieve across multiple years:\nNote that both college_by_year_dt and college_by_year_alt_dt are identical.\n\ncollege_by_year_alt_dt &lt;- RcensusPkg::get_multi_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage_v = vintages,\n  vars = vars,\n  region = \"county:*\",\n  regionin = paste0(\"state:\", colorado_fips)\n) %&gt;%\n  .[,`:=`(state = NULL, county = NULL)] %&gt;%\ndata.table::setnames(., old=\"vintage\", new = \"year\")\n\nReshape the default “wide” format of college_by_year_dt to a “long” format:\n\ncollege_by_year_estimate_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = c(\n    \"B15002_015E\",\"B15002_016E\",\n    \"B15002_017E\",\"B15002_018E\",\n    \"B15002_032E\",\"B15002_033E\",\n    \"B15002_034E\",\"B15002_035E\"\n  )\n) %&gt;% \n  .[, estimate := as.numeric(estimate)]\n\ncollege_by_year_moe_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = c(\n    \"B15002_015M\",\"B15002_016M\",\n    \"B15002_017M\",\"B15002_018M\",\n    \"B15002_032M\",\"B15002_033M\",\n    \"B15002_034M\",\"B15002_035M\"\n  ),\n  value_name = \"moe\"\n) %&gt;% \n  .[, moe := as.numeric(moe)] %&gt;% \n  .[, .(GEOID, moe)]\n \ncollege_by_summary_est_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = \"B15002_001E\",\n  value_name = \"summary_est\"\n) %&gt;% \n  .[, summary_est := as.numeric(summary_est)] %&gt;% \n  .[, .(GEOID, year, summary_est)]\n\ncollege_by_summary_moe_dt &lt;- RcensusPkg::wide_to_long(\n  dt = college_by_year_dt,\n  id_v = c(\"year\",\"GEOID\",\"NAME\"),\n  measure_v = \"B15002_001M\",\n  value_name = \"summary_moe\"\n) %&gt;% \n  .[, summary_moe := as.numeric(summary_moe)] %&gt;% \n  .[, .(GEOID, year, summary_moe)]\n\n \ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt %&gt;% \n  .[, moe := college_by_year_moe_long_dt$moe] \n\n \ndata.table::setkeyv(college_by_year_estimate_long_dt, cols = c(\"GEOID\",\"year\"))\ndata.table::setkeyv(college_by_summary_est_dt, cols = c(\"GEOID\",\"year\"))\ndata.table::setkeyv(college_by_summary_moe_dt, cols = c(\"GEOID\",\"year\"))\ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt[college_by_summary_est_dt]\ncollege_by_year_estimate_long_dt &lt;- college_by_year_estimate_long_dt[college_by_summary_moe_dt] %&gt;% \n  data.table::setorderv(cols = c(\"NAME\", \"variable\"))\n\n\n\n\n\nTable 3.18: Educational attainment over time for Colorado counties\n\n\nyear\nGEOID\nNAME\nvariable\nestimate\nmoe\nsummary_est\nsummary_moe\n\n\n\n\n2010\n08001\nAdams County, Colorado\nB15002_015E\n20501\n1983\n275849\n790\n\n\n2011\n08001\nAdams County, Colorado\nB15002_015E\n21233\n2124\n281231\n865\n\n\n2012\n08001\nAdams County, Colorado\nB15002_015E\n19238\n2020\n287924\n693\n\n\n2013\n08001\nAdams County, Colorado\nB15002_015E\n23818\n2445\n295122\n673\n\n\n2014\n08001\nAdams County, Colorado\nB15002_015E\n20255\n1928\n304394\n541\n\n\n2015\n08001\nAdams County, Colorado\nB15002_015E\n22962\n2018\n312281\n705\n\n\n\n\n\n\n\n\n\nFrom college_by_year_estimate_long_gt group by “NAME” and “year” and compute the percentage of the population age 25 and up with a 4-year college degree.\n\n\npercent_college_by_year_dt &lt;- college_by_year_estimate_long_dt %&gt;% \n  .[, .(numerator=sum(.SD$estimate),denominator=.SD$summary_est[[1]]), by = .(NAME,year)] %&gt;% \n  .[, pct_college := 100 * (numerator / denominator)] %&gt;% \n  data.table::dcast(\n    formula = NAME ~ year,\n    value.var = \"pct_college\"\n  )\n\n\n\n\n\nTable 3.19: Percent college by year in Colorado counties\n\n\nNAME\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\n\n\nAdams County, Colorado\n20.57394\n20.51801\n20.64538\n23.09384\n22.16929\n22.79742\n22.95293\n22.87552\n25.74152\n25.39956\n\n\nArapahoe County, Colorado\n37.03001\n38.24506\n39.28435\n39.42478\n40.94194\n41.03578\n41.48359\n43.69387\n42.71285\n43.78332\n\n\nBoulder County, Colorado\n57.50285\n59.05601\n57.88284\n58.53214\n58.04066\n60.57147\n60.63005\n63.18150\n62.51394\n64.80486\n\n\nBroomfield County, Colorado\nNA\nNA\nNA\nNA\nNA\n56.07776\n51.94338\n55.13359\n56.27740\n56.87181\n\n\nDenver County, Colorado\n40.87971\n42.97122\n44.65358\n44.35340\n44.25600\n47.10820\n47.39683\n49.32692\n51.34580\n53.10088\n\n\nDouglas County, Colorado\n54.96800\n53.27936\n55.09223\n57.66999\n56.48866\n56.06928\n59.42687\n58.53342\n58.37539\n58.13747\n\n\nEl Paso County, Colorado\n34.11467\n35.69184\n34.91315\n35.47612\n36.49302\n36.43089\n38.67864\n39.19931\n38.83872\n39.04942\n\n\nJefferson County, Colorado\n40.83113\n39.54961\n41.43825\n41.04234\n41.99768\n43.20923\n43.51953\n45.57140\n45.83786\n47.61074\n\n\nLarimer County, Colorado\n45.80197\n42.83543\n44.71423\n43.33800\n42.67180\n46.16705\n46.78871\n47.90465\n47.62330\n49.01654\n\n\nMesa County, Colorado\n24.99285\n25.82724\n23.01511\n27.63325\n25.14875\n30.27630\n25.02980\n25.82455\n29.95739\n29.78537\n\n\nPueblo County, Colorado\n19.54336\n23.50261\n19.85871\n21.34296\n23.56390\n21.60260\n21.17520\n22.15222\n21.75405\n23.41852\n\n\nWeld County, Colorado\n25.07193\n24.65436\n26.29706\n27.40582\n25.71741\n25.93728\n27.21992\n27.51222\n27.36542\n29.88273",
    "crumbs": [
      "3 Wrangling Census Data with tidyverse tools"
    ]
  },
  {
    "objectID": "3_wrangling_census_data_with_tidyverse_tools.html#handling-margins-of-error-in-the-american-community-survey",
    "href": "3_wrangling_census_data_with_tidyverse_tools.html#handling-margins-of-error-in-the-american-community-survey",
    "title": "3 Wrangling Census Data with tidyverse tools",
    "section": "",
    "text": "This section skipped.",
    "crumbs": [
      "3 Wrangling Census Data with tidyverse tools"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html",
    "href": "4_exploring_census_visualization.html",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(ggplot2)\nlibrary(usmap)\nlibrary(data.table)\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(stringr)\nlibrary(purrr)\nlibrary(here)\nlibrary(magrittr)\nlibrary(devtools)\n\n\nLoad the packages ‘deandevl/RcensusPkg’ and ‘deandevl/RplotterPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\ndevtools::install_github('deandevl/RplotterPkg')\n\n\n\nGather the data for our first ggplot2 plot.\n\nFrom the 2016-2020 “acs/acs5” data set obtain the median household income and age data by county in the state of Georgia.\n\nCall RcensusPkg::get_vintage_data():\n\nga_fips &lt;- usmap::fips(\"GA\")\nvars &lt;- c(\"B19013_001E\", \"B19013_001M\", \"B01002_001E\", \"B01002_001M\")\n\nga_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = vars,\n  region = \"county:*\",\n  regionin = paste0(\"state:\", ga_fips),\n) %&gt;%\ndata.table::setnames(., old = vars, new = c(\"medincE\",\"medincM\",\"medageE\",\"medageM\")) %&gt;%\n.[, `:=`(medincE = as.numeric(medincE), medageE = as.numeric(medageE))] %&gt;%\n.[, .(GEOID,NAME,medincE,medageE)]  \n\n\n\n\n\nTable 4.1a: Household median income and age across Georgia counties\n\n\nGEOID\nNAME\nmedincE\nmedageE\n\n\n\n\n13001\nAppling County, Georgia\n37924\n39.9\n\n\n13003\nAtkinson County, Georgia\n35703\n35.9\n\n\n13005\nBacon County, Georgia\n36692\n36.5\n\n\n13007\nBaker County, Georgia\n34034\n52.2\n\n\n13011\nBanks County, Georgia\n50912\n41.5\n\n\n13013\nBarrow County, Georgia\n62990\n36.0\n\n\n\n\n\n\n\n\n\n\n\nGraph the histogram of the variable “medincE” from ga_dt across 30 bins.\n\n\nRplotterPkg::create_histogram_plot(\n  df = ga_dt,\n  aes_x = \"medincE\",\n  x_title = \"Median Income\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_color = \"white\",\n  bar_lwd = 0.8,\n  bins = 30,\n  x_major_breaks = seq(20000, 120000, 20000),\n  x_labels = function(x) paste0(\"$\", x/1000,\"k\")\n)\n\n\n\n\n\nFigure 4.1: Histogram of median household income, Georgia counties\n\n\n\n\nGraph the histogram of the variable “medincE” across 15 bins.\n\n\nRplotterPkg::create_histogram_plot(\n  df = ga_dt,\n  aes_x = \"medincE\",\n  x_title = \"Median Income\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_color = \"white\",\n  bar_lwd = 0.8,\n  bins = 15,\n  x_major_breaks = seq(20000, 120000, 20000),\n  x_labels = function(x) paste0(\"$\", x/1000,\"k\")\n)\n\n\n\n\n\nFigure 4.2: Histogram with the number of bins reduced to 15\n\n\n\n\nGraph the box-plot (box-and-whisker) of “medincE”.\n\n\nRplotterPkg::create_box_plot(\n  df = ga_dt,\n  aes_y = \"medincE\",\n  x_title = \" \",\n  y_title = \"Median Income\",\n  box_color = \"black\",\n  box_line_width = 1.0,\n  box_fill = \"navy\",\n  box_alpha = 0.7,\n  rot_y_tic_label = TRUE,\n  y_scientific = FALSE\n)\n\n\n\n\n\nFigure 4.3: Box plot of median household income, Georgia counties\n\n\n\n\n\n\n\nFrom the above Georgia household data frame ga_dt produce a scatter plot of “medageE” vs “medincE”.\n\n\nRplotterPkg::create_scatter_plot(\n  df = ga_dt,\n  aes_x = \"medageE\",\n  aes_y = \"medincE\",\n  x_title = \"Median Age\",\n  y_title = \"Median Income\",\n  rot_y_tic_label = TRUE,\n  pts_fill = \"navy\",\n  pts_size = 2.0,\n  x_y_scientific = c(FALSE, FALSE)\n)\n\n\n\n\n\nFigure 4.4: Scatter plot of median age and median household income, counties in Georgia\n\n\n\nIn measuring the relationship between age and income, the R language offers two simple functions. First, the stats::lm() function can be used to fit a linear model. Second, we can submit the resulting stats::lm() object to stats:predict() and return fitted values along with per point standard errors for computing upper/lower confidence bands for the fit.\n\nDefine a simple linear regression between variables “medageE” and “medinc E” from the ga_dt data frame using stats::lm().\n\nUse stats::lm() to define the linear model:\n\nage_income_model &lt;- stats::lm(medincE ~ medageE, data = ga_dt)\n\nSubmit the model to stats::predict() and return the fitted values along with computing the upper/lower confidence values:\n\na_predict &lt;- stats::predict(object = age_income_model, se.fit = TRUE)\nci_lower &lt;- a_predict$fit - (2 * a_predict$se.fit)\nci_upper &lt;- a_predict$fit + (2 * a_predict$se.fit)\n\nAppend the fitted and confidence level values to ga_dt:\n\nga_dt[, `:=`(fit = a_predict$fit, ci_lower = ci_lower, ci_upper = ci_upper)]\n\nPlot the data using RplotterPkg::create_scatter_plot():\n\nRplotterPkg::create_scatter_plot(\n  df = ga_dt,\n  aes_x = \"medageE\",\n  aes_y = \"medincE\",\n  aes_CI_lwr = \"ci_lower\",\n  aes_CI_upr = \"ci_upper\",\n  x_title = \"Median Age\",\n  y_title = \"Median Income\",\n  rot_y_tic_label = TRUE,\n  pts_fill = \"navy\",\n  pts_size = 2.0,\n  x_y_scientific = c(FALSE, FALSE),\n  CI_show_ribbon = TRUE\n) + ggplot2::geom_line(aes(y = ga_dt$fit), color=\"blue\", linewidth=1.5)\n\n\n\n\n\nFigure 4.5: Scatter plot with linear relationship superimposed on the graphic\n\n\n\n\n\n\n\nAs demonstrated in the above plots the RplotterPkg:: provides easy functional based customization of many of ggplot2’s parameters.\nTo continue with the customization…\n\nShow the percent of commuters that take public transportation to work for the largest metropolitan areas in the United States for vintage 2019.\n\nGet the description of variables ID “DP03_0021PE” and “B01003_001E” in the “acs/acs1/profile” and “acs/acs1” data sets respectively for vintage 2019:\n\nDP03_0021PE_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  vars = \"DP03_0021PE\"\n)\nB01003_001E_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01003_001E\"\n)\nDP03_0021PE_B01003_001E_dt &lt;- rbind(DP03_0021PE_dt,B01003_001E_dt)\n\n\n\n\n\nTable 4.1b: Description of ‘DP03_0021PE’ and B01003_001E, acs/acs1/profile\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP03_0021PE\nPercent!!COMMUTING TO WORK!!Workers 16 years and over!!Public transportation (excluding taxicab)\nSELECTED ECONOMIC CHARACTERISTICS\nNA\nfloat\n\n\nB01003_001E\nEstimate!!Total\nTOTAL POPULATION\nNA\nint\n\n\n\n\n\n\n\n\n\nWe have both percent estimate with acronym of “DP03_0021PE” and “B01003_001E” available. Get the percentage of workers commuting on public transportation.\n\nUse RcensusPkg::get_vintage_data():\n\ncommute_percent_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  vars = c(\"DP03_0021PE\", \"DP03_0021PM\"),\n  region = \"metropolitan statistical area/micropolitan statistical area\"\n) %&gt;%\ndata.table::setnames(., old = c(\"DP03_0021PE\", \"DP03_0021PM\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, `:=`(variable = \"DP03_0021P\", estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, .(GEOID, NAME, variable, estimate, moe)] %&gt;%\n.[order(-estimate)] %&gt;% \n.[1:20,]\n\n\n\n\n\nTable 4.1: Large metro areas by public transit commuting share\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n35620\nNew York-Newark-Jersey City, NY-NJ-PA Metro Area\nDP03_0021P\n31.6\n0.2\n\n\n41860\nSan Francisco-Oakland-Berkeley, CA Metro Area\nDP03_0021P\n18.9\n0.4\n\n\n14460\nBoston-Cambridge-Newton, MA-NH Metro Area\nDP03_0021P\n13.4\n0.4\n\n\n47900\nWashington-Arlington-Alexandria, DC-VA-MD-WV Metro Area\nDP03_0021P\n13.1\n0.4\n\n\n16980\nChicago-Naperville-Elgin, IL-IN-WI Metro Area\nDP03_0021P\n12.4\n0.3\n\n\n42660\nSeattle-Tacoma-Bellevue, WA Metro Area\nDP03_0021P\n10.7\n0.4\n\n\n\n\n\n\n\n\n\nShow an unimproved bar chart of the first sorted 20 metro areas from commute_percent_dt – the percentage of commuters from metro areas.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\"\n)\n\n\n\n\n\nFigure 4.6: A first bar chart with ggplot2\n\n\n\nThe chart could use improvements in sorting, the x-axis tic labels, axis titles,\n\n\n\nClean up the metropolitan area names using the stringr package.\n\n\ncommute_percent_dt %&gt;%\n.[, NAME := stringr::str_remove(NAME, \"-.*$\")] %&gt;%\n.[, NAME := stringr::str_remove(NAME, \",.*$\")] %&gt;%\n.[, NAME := as.factor(NAME)]\n\n\nRe-display the bar chart with the “estimate” parameter on the x axis and the “NAME” parameter on the y axis; the bars sorted in descending order; re-title the axis’; rotate the y axis tic labels to horizontal.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  x_title = \"Metro Area\",\n  y_title = \"estimate\",\n  rot_y_tic_label = TRUE,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE\n)\n\n\n\n\n\nFigure 4.7: An improved bar chart with ggplot2\n\n\n\n\nImprove the bar chart further with titles and captions.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE\n)\n\n\n\n\nFigure 4.8: A cleaned-up bar chart with ggplot2\n\n\n\n\n\n\n\n\nImprove further by customizing the scaling, bar widths/outline, labeling, and color styling.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_alpha = 0.5,\n  bar_color = \"black\",\n  bar_width = 0.8,\n  bar_lwd = 1,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE,\n  y_labels = scales::label_percent(scale = 1)\n) \n\n\n\n\nFigure 4.9: A ggplot2 bar chart with custom styling\n\n\n\n\n\n\n\n\nExport the above bar chart as a png image using RplotterPkg::create_bar_plot.\n\nLook for the png image file ‘commute_percent_barchart.png’ in the images folder under the current directory.\n\nimage_file_path &lt;- file.path(here::here(), \"images\", \"commute_percent_barchart.png\")\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_alpha = 0.5,\n  bar_color = \"black\",\n  bar_width = 0.8,\n  bar_lwd = 1,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE,\n  y_labels = scales::label_percent(scale = 1),\n  png_file_path = image_file_path,\n  png_width_height = c(850, 550)\n) \n\n\n\n\n\n\n\n\n\n\n\n\n\n…it is also often useful to visualize those margins of error to illustrate the degree of uncertainty around estimates, especially when making comparisons between those estimates.\n\n\n\nWe will be looking at the median household income across counties in Maine from the “acs/acs5” with vintage 2020.\n\nStart by getting the Maine county total population data (variable “P1_001N”) from the 2020 Decennial Census.\n\n\nme_fips &lt;- usmap::fips(\"ME\")\n\nme_pop_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"P1_001N\",\n  region = \"county:*\",\n  regionin = paste0(\"state:\", me_fips)) %&gt;%\ndata.table::setnames(., old = \"P1_001N\", new = \"value\") %&gt;%\n.[, `:=`(variable = \"totalpop\", value = as.numeric(value))] %&gt;%\n.[, .(GEOID,NAME,variable,value)] %&gt;%\n.[order(-value),]  \n\n\n\n\n\nTable 4.2: Population sizes of counties in Maine\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n23005\nCumberland County, Maine\ntotalpop\n303069\n\n\n23031\nYork County, Maine\ntotalpop\n211972\n\n\n23019\nPenobscot County, Maine\ntotalpop\n152199\n\n\n23011\nKennebec County, Maine\ntotalpop\n123642\n\n\n23001\nAndroscoggin County, Maine\ntotalpop\n111139\n\n\n23003\nAroostook County, Maine\ntotalpop\n67105\n\n\n23017\nOxford County, Maine\ntotalpop\n57777\n\n\n23009\nHancock County, Maine\ntotalpop\n55478\n\n\n23025\nSomerset County, Maine\ntotalpop\n50477\n\n\n23013\nKnox County, Maine\ntotalpop\n40607\n\n\n23027\nWaldo County, Maine\ntotalpop\n39607\n\n\n23023\nSagadahoc County, Maine\ntotalpop\n36699\n\n\n23015\nLincoln County, Maine\ntotalpop\n35237\n\n\n23029\nWashington County, Maine\ntotalpop\n31095\n\n\n23007\nFranklin County, Maine\ntotalpop\n29456\n\n\n23021\nPiscataquis County, Maine\ntotalpop\n16800\n\n\n\n\n\n\n\n\n\nThere are seventeen counties in Main, ranging in population from a maximum of 303,069 to a minimum of 16,800. In turn, estimates for the counties with small population sizes are likely to be subject to a larger margin of error than those with a larger baseline populations.\n\n\nGet the Maine total household income along with their margin of errors across the counties for 2020.\n\nWe want data for variable acronym “B19013_001” from the 2016-2020 ACS:\n\nme_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", me_fips)) %&gt;%\n  data.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n  .[, NAME := stringr::str_remove(NAME, \" County, Maine\")] %&gt;%  \n  .[order(estimate)] %&gt;%                                                 \n  .[, NAME := factor(NAME, levels = NAME)] %&gt;%\n  .[, .(GEOID,NAME,estimate,moe)] %&gt;% \n  .[order(-moe),] \n\n\n\n\n\nTable 4.2a: Household income of counties in Maine\n\n\nGEOID\nNAME\nestimate\nmoe\n\n\n\n\n23023\nSagadahoc\n68039\n4616\n\n\n23015\nLincoln\n58125\n3974\n\n\n23027\nWaldo\n58034\n3482\n\n\n23007\nFranklin\n51630\n2948\n\n\n23021\nPiscataquis\n42083\n2883\n\n\n23025\nSomerset\n45382\n2694\n\n\n23009\nHancock\n58345\n2593\n\n\n23013\nKnox\n57794\n2528\n\n\n23017\nOxford\n49761\n2380\n\n\n23003\nAroostook\n43791\n2306\n\n\n23029\nWashington\n44847\n2292\n\n\n23031\nYork\n68932\n2239\n\n\n23011\nKennebec\n55368\n2112\n\n\n23001\nAndroscoggin\n55002\n2003\n\n\n23019\nPenobscot\n52128\n1836\n\n\n23005\nCumberland\n76014\n1563\n\n\n\n\n\n\n\n\n\nCreate a dot plot of Maine’s county household incomes.\n\n\nRplotterPkg::create_scatter_plot(\n  df = me_income_dt,\n  aes_x = \"estimate\",\n  aes_y = \"NAME\",\n  title = \"Median Household Income Estimates\",\n  subtitle = \"Counties in Maine from ACS 2016-2020 Survey\",\n  pts_fill = \"#12891b\",\n  pts_size = 5.0,\n  x_title = \"ACS estimate\",\n  x_labels = function(x) paste0(\"$\", prettyNum(x, big.mark = \",\", scientific = F)),\n  rot_y_tic_label = TRUE\n)\n\n\n\n\n\nFigure 4.10: A dot plot of median household income by county in Maine\n\n\n\n\n\n\n\nRank the margin of error values for the household incomes in me_income_dt.\n\nReorder me_income_dt by descending “moe” values:\n\nmoe_ranked_dt &lt;- me_income_dt[order(-moe)] %&gt;%\n.[, variable := \"hhincome\"] %&gt;%\n.[, .(GEOID,NAME,variable,estimate,moe)]  \n\n\n\n\n\nTable 4.3: Margins of error in Maine\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n23023\nSagadahoc\nhhincome\n68039\n4616\n\n\n23015\nLincoln\nhhincome\n58125\n3974\n\n\n23027\nWaldo\nhhincome\n58034\n3482\n\n\n23007\nFranklin\nhhincome\n51630\n2948\n\n\n23021\nPiscataquis\nhhincome\n42083\n2883\n\n\n23025\nSomerset\nhhincome\n45382\n2694\n\n\n23009\nHancock\nhhincome\n58345\n2593\n\n\n23013\nKnox\nhhincome\n57794\n2528\n\n\n23017\nOxford\nhhincome\n49761\n2380\n\n\n23003\nAroostook\nhhincome\n43791\n2306\n\n\n23029\nWashington\nhhincome\n44847\n2292\n\n\n23031\nYork\nhhincome\n68932\n2239\n\n\n23011\nKennebec\nhhincome\n55368\n2112\n\n\n23001\nAndroscoggin\nhhincome\n55002\n2003\n\n\n23019\nPenobscot\nhhincome\n52128\n1836\n\n\n23005\nCumberland\nhhincome\n76014\n1563\n\n\n\n\n\n\n\n\n\n…margins of error around the estimated median household incomes vary from a low of $1563 (Cumberland County with population of 303069) to a high of $4616 (Sagadahoc County with a population of 36699)\n\n\nRepeat the above dot plot of household income with error bars around each point showing the degree of uncertainty based on the “moe” values.\n\n\nRplotterPkg::create_scatter_plot(\n  df = me_income_dt,\n  aes_x = \"estimate\",\n  aes_y = \"NAME\",\n  title = \"Median Household Income Estimates\",\n  subtitle = \"Counties in Maine from ACS 2016-2020 Survey\",\n  pts_fill = \"#12891b\",\n  pts_size = 5.0,\n  x_title = \"ACS estimate\",\n  x_labels = function(x) paste0(\"$\", prettyNum(x, big.mark = \",\", scientific = F)),\n  rot_y_tic_label = TRUE\n) + geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe))\n\n\n\n\n\nFigure 4.11: Median household income by county in Maine with error bars shown\n\n\n\n\n\n\n\n\nAs a time-series visualization example, obtain the median home value (“B25077_001E”) for Deschutes County, Oregon back to 2005 through 2019.\n\nGet the data using RcensusPkg::get_multi_vintage_data():\n\ndeschutes_fips &lt;- usmap::fips(\"OR\",\"Deschutes\")\n\ndeschutes_val_dt &lt;- RcensusPkg::get_multi_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage_v = 2005:2019,\n  vars = c(\"B25077_001E\", \"B25077_001M\"),\n  region = paste0(\"county:\", substr(deschutes_fips,3,5)),\n  regionin = paste0(\"state:\", substr(deschutes_fips,1,2))) %&gt;%\ndata.table::setnames(., old = c(\"B25077_001E\", \"B25077_001M\", \"vintage\"), new = c(\"estimate\", \"moe\", \"year\")) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, variable := \"B25077_001\"] %&gt;%\n.[, `:=`(ci_lwr = estimate - moe, ci_upr = estimate + moe)] %&gt;% \n.[, .(year,GEOID,NAME,variable,estimate,moe,ci_lwr,ci_upr)]   \n\n\n\n\n\nTable 4.4: Time series of median home values in Deschutes County, OR\n\n\nyear\nGEOID\nNAME\nvariable\nestimate\nmoe\nci_lwr\nci_upr\n\n\n\n\n2005\n41017\nDeschutes County, Oregon\nB25077_001\n236100\n13444\n222656\n249544\n\n\n2006\n41017\nDeschutes County, Oregon\nB25077_001\n336600\n11101\n325499\n347701\n\n\n2007\n41017\nDeschutes County, Oregon\nB25077_001\n356700\n16765\n339935\n373465\n\n\n2008\n41017\nDeschutes County, Oregon\nB25077_001\n331600\n17104\n314496\n348704\n\n\n2009\n41017\nDeschutes County, Oregon\nB25077_001\n284300\n12652\n271648\n296952\n\n\n2010\n41017\nDeschutes County, Oregon\nB25077_001\n260700\n18197\n242503\n278897\n\n\n\n\n\n\n\n\n\nDraw the Deschutes County home value line chart.\n\n\nRplotterPkg::create_scatter_plot(\n  df = deschutes_val_dt,\n  aes_x = \"year\",\n  aes_y = \"estimate\",\n  aes_CI_lwr = \"ci_lwr\",\n  aes_CI_upr = \"ci_upr\",\n  x_title = \"Year\",\n  y_title = \"ACS estimate\",\n  rot_y_tic_label = TRUE,\n  y_labels = scales::dollar,\n  connect = TRUE,\n  pts_size = 3.0,\n  pts_fill = \"#b136b9\",\n  x_major_breaks = 2005:2019,\n  x_minor_breaks = NULL,\n)\n\n\n\n\n\nFigure 4.12: A time series chart of median home values in Deschutes County, OR\n\n\n\n\nDraw the Deschutes County home value line chart with error ranges.\n\n\nRplotterPkg::create_scatter_plot(\n  df = deschutes_val_dt,\n  aes_x = \"year\",\n  aes_y = \"estimate\",\n  aes_CI_lwr = \"ci_lwr\",\n  aes_CI_upr = \"ci_upr\",\n  subtitle = \"Median Home Values in Deschutes County, Oregon\",\n  x_title = \"Year\",\n  y_title = \"ACS estimate\",\n  rot_y_tic_label = TRUE,\n  y_labels = scales::dollar,\n  connect = TRUE,\n  pts_size = 3.0,\n  pts_fill = \"#b136b9\",\n  x_major_breaks = 2005:2019,\n  x_minor_breaks = NULL,\n  CI_show_ribbon = TRUE,\n  CI_ribbon_color = \"navy\",\n  CI_show_line = FALSE\n)\n\n\n\n\n\nFigure 4.13: The Deschutes County home value line chart with error ranges shown\n\n\n\n\n\n\n\n\nThe Population Estimates Program(PEP) offers a dataset named “pep/charagegroups” that has characteristic breakdowns for a number of variables.\n\nReview the variables offered in “pep/charagegroups” for the vintage 2019.\n\nCall RcensusPkg::get_variable_names() for dataset “pep/charagegroups”:\n\npep_char_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019\n)\n\n\n\n\n\nTable 4.5a Variables offered in ‘pep/charagegroups’, pep/charagegroups, 2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nAGEGROUP\nAge Group\nNA\ndefault displayed\nint\n\n\nHISP\nHispanic Origin\nNA\ndefault displayed\nint\n\n\nNATION\nGeography\nNA\nNA\nNA\n\n\nPOP\nPopulation\nNA\nNA\nNA\n\n\nRACE\nRace\nNA\ndefault displayed\nint\n\n\nSEX\nSex\nNA\ndefault displayed\nint\n\n\nSTATE\nGeography\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nBoth the “SEX” and “AGEGROUP” are categorical variables with integer values corresponding to string labels.\n\nRetrieve the integer value/label pairs of “SEX” and “AGEGROUP”.\n\n\nsex_cat_dt &lt;- RcensusPkg::get_category_strings(name = \"sex\")\nagegroup_cat_dt &lt;- RcensusPkg::get_category_strings(name = \"agegroup\", start_idx = 1, end_idx = 19)\n\n\nShow the “AGEGROUP” values and labels”.\n\nNote that there are a total of 19 value/label pairs for ‘AGEGROUP’.\n\n\n\n\nTable 4.5b: Integer value/label pairs for catagory variable ‘AGEGROUP’\n\n\nval\nagegroup_label\n\n\n\n\n0\nAll ages\n\n\n1\nAge 0 to 4 years\n\n\n2\nAge 5 to 9 years\n\n\n3\nAge 10 to 14 years\n\n\n4\nAge 15 to 19 years\n\n\n5\nAge 20 to 24 years\n\n\n6\nAge 25 to 29 years\n\n\n7\nAge 30 to 34 years\n\n\n\n\n\n\n\n\n\nShow the 3 “SEX” category value/label pairs.\n\n\n\n\n\nTable 4.5c: Integer value/label pairs for catagory variable ‘SEX’\n\n\nval\nsex_label\n\n\n\n\n0\nBoth Sexes\n\n\n1\nMale\n\n\n2\nFemale\n\n\n\n\n\n\n\n\nThe Census Bureau provides a key to the meaning of these and other PEP related categorical variables here.\n\nGet the “SEX” and “AGEGROUP” variables from the “pep/charagegroups” dataset for the state of Utah, 2019.\n\nCall RcensusPkg::get_vintage_data(): We will use data.tables sex_cat_dt and agegroup_cat_dt from above to re-value the resultant “SEX” and “AGEGROUP” columns.\n\nut_fips &lt;- usmap::fips(\"UT\")\n\nut_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019,\n  vars = c(\"SEX\", \"AGEGROUP\", \"POP\"),\n  region = paste0(\"state:\",ut_fips)) %&gt;%\n.[, `:=`(SEX = as.numeric(SEX), AGEGROUP = as.numeric(AGEGROUP))] %&gt;% \n.[, SEX := sex_cat_dt$sex_label[SEX+1]] %&gt;%  \n.[, AGEGROUP := agegroup_cat_dt$agegroup_label[AGEGROUP+1]] %&gt;%\ndata.table::setnames(., old = \"POP\", new = \"value\") %&gt;%\n.[, .(GEOID,NAME,value,SEX,AGEGROUP)] %&gt;%\nna.omit(., cols = \"AGEGROUP\") %&gt;%\ndata.table::setorderv(., cols = \"SEX\")\n\n\n\n\n\nTable 4.5: Age and sex data for Utah from the PEP API\n\n\nGEOID\nNAME\nvalue\nSEX\nAGEGROUP\n\n\n\n\n49\nUtah\n3205958\nBoth Sexes\nAll ages\n\n\n49\nUtah\n247803\nBoth Sexes\nAge 0 to 4 years\n\n\n49\nUtah\n258976\nBoth Sexes\nAge 5 to 9 years\n\n\n49\nUtah\n267985\nBoth Sexes\nAge 10 to 14 years\n\n\n49\nUtah\n253847\nBoth Sexes\nAge 15 to 19 years\n\n\n49\nUtah\n264652\nBoth Sexes\nAge 20 to 24 years\n\n\n\n\n\n\n\n\n\nPrepare data frame ut_dt for plotting the population pyramid by removing rows with “SEX” equal to “Both Sexes” and “AGEGROUP” equal to “All ages”. Also set the “value” values to negative for rows with “AGEGROUP” equal to “Male”.\n\n\nut_pyramid_plot_dt &lt;- ut_dt %&gt;%\n  .[SEX != \"Both Sexes\"] %&gt;% # remove rows with SEX == \"Both sexes\"\n  .[AGEGROUP != \"All ages\"] %&gt;% # remove rows with AGEGROUP == \"All ages\"\n  .[, value := as.numeric(value)] %&gt;% # set value as numeric\n  .[, value := ifelse(SEX == \"Male\", -value, value)] %&gt;% # re-value 'value' based on SEX value\n  .[, AGEGROUP := ifelse(AGEGROUP == \"Age 5 to 9 years\", \"Age 05 to 9 years\", AGEGROUP)] %&gt;% # for ordering\n  .[, AGEGROUP := stringr::str_remove_all(AGEGROUP, \"Age\\\\s|\\\\syears\")] %&gt;% # shorten the AGEGROUP labels\n  .[, AGEGROUP := as.factor(AGEGROUP)] # make AGEGROUP a factor\n\n\n\n\n\nTable 4.6: Filtered and transformed Utah population data\n\n\nGEOID\nNAME\nvalue\nSEX\nAGEGROUP\n\n\n\n\n49\nUtah\n126108\nFemale\n05 to 9\n\n\n49\nUtah\n23039\nFemale\n80 to 84\n\n\n49\nUtah\n130045\nFemale\n10 to 14\n\n\n49\nUtah\n124535\nFemale\n15 to 19\n\n\n49\nUtah\n128846\nFemale\n20 to 24\n\n\n49\nUtah\n108654\nFemale\n30 to 34\n\n\n\n\n\n\n\n\n\n\n\n\nUse RplotterPkg::create_bar_plot() to create the population pyramid from ut_pyramid_plot_dt data.table.\n\n\npyramid_bar_plot &lt;- RplotterPkg::create_bar_plot(\n  df = ut_pyramid_plot_dt,\n  aes_x = \"AGEGROUP\",\n  aes_y = \"value\",\n  aes_fill = \"SEX\",\n  title = \"Population structure in Utah\",\n  x_title = \"2019 Census Bureau population estimate\",\n  y_title = \"Population Estimate\",\n  caption = \"Data source: US Census Bureau population estimates & RcensusPkg\",\n  y_labels = function(y) paste0(abs(y / 1000), \"k\"),\n  bar_color = \"white\",\n  bar_lwd = 0.5,\n  bar_width = 0.95,\n  do_coord_flip = TRUE,\n  rot_y_tic_label = TRUE,\n  legend_key_width = 0.75\n) + ggplot2::scale_fill_manual(values =  c(\"Female\"= \"darkred\", \"Male\"=\"navy\"))\npyramid_bar_plot\n\n\n\n\nFigure 4.15: A formatted population pyramid of Utah\n\n\n\n\n\n\n\n\n\nUse multiple plots to compare groups of geographies. An example involves a comparison of median home values by Census tract for six counties in the Portland, Oregon area: Multnomah, which contains the city of Portland, and the suburban counties of Clackamas and Washington. Use the ACS 5-year survey 2020 data set (“acs/acs5”).\n\nGet the fips numbers for six counties:\n\nor_fips &lt;- usmap::fips(state = \"OR\")\nmultnomah_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Multnomah\"),3,5)\nclackamas_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Clackamas\"),3,5)\nwashington_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Washington\"),3,5)\nyamhill_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Yamhill\"),3,5)\nmarion_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Marion\"),3,5)\ncolumbia_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Columbia\"),3,5)\n\ntract_fips &lt;- c(multnomah_fips, clackamas_fips, washington_fips, yamhill_fips, marion_fips, columbia_fips)\n\nGet all the tract data into one data.table:\n\nhome_vals_dt &lt;- NULL\nfor(a_fips in tract_fips){\n  tracts_vals_dt &lt;- RcensusPkg::get_vintage_data(\n    dataset = \"acs/acs5\",\n    vintage = 2020,\n    vars = c(\"B25077_001E\", \"B25077_001M\"),\n    region = \"tract:*\",\n    regionin = paste0(\"state:\",or_fips,\"+county:\",a_fips)\n  )\n  home_vals_dt &lt;- rbind(home_vals_dt, tracts_vals_dt)\n}\nhome_vals_dt &lt;- home_vals_dt %&gt;%\ndata.table::setnames(., old = c(\"B25077_001E\", \"B25077_001M\"), new = c(\"estimate\",\"moe\")) %&gt;%\n.[, variable := \"B25077_001\"] %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, .(GEOID,NAME,variable,estimate,moe)] %&gt;%\ndata.table::setorderv(.,cols = \"GEOID\")\n\n\n\n\n\nTable 4.7: Median home values by Census tract in the Portland\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n41005020101\nCensus Tract 201.01, Clackamas County, Oregon\nB25077_001\n666700\n131453\n\n\n41005020102\nCensus Tract 201.02, Clackamas County, Oregon\nB25077_001\n909000\n130787\n\n\n41005020201\nCensus Tract 202.01, Clackamas County, Oregon\nB25077_001\n897400\n97893\n\n\n41005020202\nCensus Tract 202.02, Clackamas County, Oregon\nB25077_001\n821200\n93103\n\n\n41005020302\nCensus Tract 203.02, Clackamas County, Oregon\nB25077_001\n565600\n32555\n\n\n41005020303\nCensus Tract 203.03, Clackamas County, Oregon\nB25077_001\n560000\n34669\n\n\n\n\n\n\n\n\nSplit the “NAME” column into separate columns of “tract”, “county”, “state” based on the embedded comma:\n\nhome_vals_dt &lt;- home_vals_dt %&gt;%\n  .[, c(\"tract\", \"county\", \"state\") := tstrsplit(NAME, \",\", fixed = TRUE)] %&gt;%   # split NAME string into tract,county,state\n  .[, county := stringr::str_remove(county, \" County\")] %&gt;%\n  .[estimate &gt; 0 & moe &gt; 0,] %&gt;%  # filter rows for only positive values\n  .[, county := factor(county)]  %&gt;% # county as a factor\n  .[, .(GEOID,tract,county,state,variable,estimate,moe)]\n\n\n\n\n\nTable 4.8: Data with NAME column split by comma\n\n\nGEOID\ntract\ncounty\nstate\nvariable\nestimate\nmoe\n\n\n\n\n41005020101\nCensus Tract 201.01\nClackamas\nOregon\nB25077_001\n666700\n131453\n\n\n41005020102\nCensus Tract 201.02\nClackamas\nOregon\nB25077_001\n909000\n130787\n\n\n41005020201\nCensus Tract 202.01\nClackamas\nOregon\nB25077_001\n897400\n97893\n\n\n41005020202\nCensus Tract 202.02\nClackamas\nOregon\nB25077_001\n821200\n93103\n\n\n41005020302\nCensus Tract 203.02\nClackamas\nOregon\nB25077_001\n565600\n32555\n\n\n41005020303\nCensus Tract 203.03\nClackamas\nOregon\nB25077_001\n560000\n34669\n\n\n\n\n\n\n\n\n\nAggregate the home_vals_dt data.table with grouping by county and show summary statistics on the “estimate” variable.\n\nCompute min, max, mean, and median by county:\n\ncounty_summary_dt &lt;- home_vals_dt[, .(min = min(estimate), max = max(estimate), mean = round(mean(estimate),1), median = stats::median(estimate)), by = county]\n\n\n\n\n\nTable 4.9: Summary statistics for Census tracts in Portland-area counties\n\n\ncounty\nmin\nmax\nmean\nmedian\n\n\n\n\nClackamas\n62800\n909000\n449940.7\n426700\n\n\nColumbia\n218100\n362200\n277590.9\n275900\n\n\nMarion\n48700\n483500\n270969.2\n261200\n\n\nMultnomah\n192900\n1033500\n455706.2\n425950\n\n\nWashington\n221900\n769700\n419618.3\n406100\n\n\nYamhill\n230000\n545500\n333815.8\n291100\n\n\n\n\n\n\n\n\n\nShow the overall kernel density of the “estimate” variable of home_vals_dt.\n\nCall RplotterPkg::create_density_plot():\n\nRplotterPkg::create_density_plot(\n  df = home_vals_dt,\n  aes_x = \"estimate\",\n  x_title = \"Home Value(x 1000)\",\n  y_title = \"Density\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  rot_y_tic_label = TRUE,\n  density_fill = \"navyblue\",\n  density_alpha = 0.5\n)\n\n\n\n\n\nFigure 4.16: A density plot using all values in the dataset\n\n\n\n\nShow the home value density by county.\n\n\nRplotterPkg::create_density_plot(\n  df = home_vals_dt[, .(estimate), by = county],\n  aes_x = \"estimate\",\n  aes_fill = \"county\",\n  x_title = \"Home Value(x 1000)\",\n  y_title = \"Density\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  rot_y_tic_label = TRUE,\n  legend_key_width = 0.8\n)\n\n\n\n\n\nFigure 4.17: A density plot with separate curves for each county\n\n\n\n\nShow the home value density by county in multiple charts using RplotterPkg::multi_panel_grid() function.\n\n\ncounties &lt;- levels(home_vals_dt$county)\nbuild_plot &lt;- function(id, df, counties){\n  county &lt;- counties[id]\n  plot_df &lt;- df[county == counties[[id]], ]\n  aplot &lt;- RplotterPkg::create_density_plot(\n    df = plot_df,\n    aes_x = \"estimate\",\n    subtitle = county,\n    x_title = NULL,\n    x_labels = function(x) paste0(\"$\", x / 1000, \"k\"),\n    x_limits = c(0, 1000000),\n    x_major_breaks = c(250000, 500000, 750000),\n    y_limits = c(0, 0.000008),\n    y_major_breaks = seq(0, 0.000008, 0.000001),\n    y_title = \"Density\",\n    show_minor_grids = FALSE,\n    rot_y_tic_label = TRUE,\n    density_fill = \"navyblue\",\n    density_alpha = 0.5\n  )\n  return(aplot)\n}\nplot_lst &lt;- purrr::map(1:6,\n  build_plot,\n  df = home_vals_dt,\n  counties = counties\n)\nnames(plot_lst) &lt;- counties\nlayout &lt;- list(\n  plots = plot_lst,\n  rows = c(1, 1, 1, 2, 2, 2),\n  cols = c(1, 2, 3, 1, 2, 3)\n)\nRplotterPkg::multi_panel_grid(\n layout = layout,\n title = \"Median home values by Census tract, 2015-2019 ACS\",\n y_tick_width = 1,\n plot_titles = counties\n)\n\n\n\n\nFigure 4.18: An example faceted density plot\n\n\n\n\n\n\n\n\n\n\nRepeat the above home value density by county data (home_vals_dt) in a “ridge” type of display.\n\nReshape home_vals_dt to a “wide” form using the “county” variable:\n\nhome_vals_wide_dt &lt;- RcensusPkg::long_to_wide(\n  dt = home_vals_dt,\n  id_v = \"tract\",\n  parameter_col = \"county\",\n  value_col = \"estimate\"\n)\n\nCall RplotterPkg::create_density_ridge_plot():\n\nRplotterPkg::create_density_ridge_plot(\n  df = home_vals_wide_dt,\n  title = \"Median home value: 2016-2020 ACS estimate\",\n  variables = c(\" Clackamas\",\" Columbia\", \" Marion\", \" Multnomah\",  \" Washington\",\" Yamhill\"),\n  x_title = \"Home Value\",\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  density_fill = \"blue\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  density_alpha = 0.5\n)\n\n\n\n\nFigure 4.19: Median home values in Portlan-area counties visualized with RplotterPkg::create_density_ridge_plot\n\n\n\n\n\n\n\nSection skipped.\n\n\n\nSection skipped.\n\n\n\n\nTake the ggplot2 object pyramid_bar_plot created above and make it interactive using the plotly package.\n\nUsing plotly::ggplotly() is great for interactivity but comes with a price. This html article increased substantially with its addition. It works, but we’ve commented it out as you’ll note in the code below. Using Shiny might be a better option for interactive plots\n\n#plotly::ggplotly(pyramid_bar_plot)",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#basic-census-visualization-with-ggplot2",
    "href": "4_exploring_census_visualization.html#basic-census-visualization-with-ggplot2",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "Gather the data for our first ggplot2 plot.\n\nFrom the 2016-2020 “acs/acs5” data set obtain the median household income and age data by county in the state of Georgia.\n\nCall RcensusPkg::get_vintage_data():\n\nga_fips &lt;- usmap::fips(\"GA\")\nvars &lt;- c(\"B19013_001E\", \"B19013_001M\", \"B01002_001E\", \"B01002_001M\")\n\nga_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = vars,\n  region = \"county:*\",\n  regionin = paste0(\"state:\", ga_fips),\n) %&gt;%\ndata.table::setnames(., old = vars, new = c(\"medincE\",\"medincM\",\"medageE\",\"medageM\")) %&gt;%\n.[, `:=`(medincE = as.numeric(medincE), medageE = as.numeric(medageE))] %&gt;%\n.[, .(GEOID,NAME,medincE,medageE)]  \n\n\n\n\n\nTable 4.1a: Household median income and age across Georgia counties\n\n\nGEOID\nNAME\nmedincE\nmedageE\n\n\n\n\n13001\nAppling County, Georgia\n37924\n39.9\n\n\n13003\nAtkinson County, Georgia\n35703\n35.9\n\n\n13005\nBacon County, Georgia\n36692\n36.5\n\n\n13007\nBaker County, Georgia\n34034\n52.2\n\n\n13011\nBanks County, Georgia\n50912\n41.5\n\n\n13013\nBarrow County, Georgia\n62990\n36.0\n\n\n\n\n\n\n\n\n\n\n\nGraph the histogram of the variable “medincE” from ga_dt across 30 bins.\n\n\nRplotterPkg::create_histogram_plot(\n  df = ga_dt,\n  aes_x = \"medincE\",\n  x_title = \"Median Income\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_color = \"white\",\n  bar_lwd = 0.8,\n  bins = 30,\n  x_major_breaks = seq(20000, 120000, 20000),\n  x_labels = function(x) paste0(\"$\", x/1000,\"k\")\n)\n\n\n\n\n\nFigure 4.1: Histogram of median household income, Georgia counties\n\n\n\n\nGraph the histogram of the variable “medincE” across 15 bins.\n\n\nRplotterPkg::create_histogram_plot(\n  df = ga_dt,\n  aes_x = \"medincE\",\n  x_title = \"Median Income\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_color = \"white\",\n  bar_lwd = 0.8,\n  bins = 15,\n  x_major_breaks = seq(20000, 120000, 20000),\n  x_labels = function(x) paste0(\"$\", x/1000,\"k\")\n)\n\n\n\n\n\nFigure 4.2: Histogram with the number of bins reduced to 15\n\n\n\n\nGraph the box-plot (box-and-whisker) of “medincE”.\n\n\nRplotterPkg::create_box_plot(\n  df = ga_dt,\n  aes_y = \"medincE\",\n  x_title = \" \",\n  y_title = \"Median Income\",\n  box_color = \"black\",\n  box_line_width = 1.0,\n  box_fill = \"navy\",\n  box_alpha = 0.7,\n  rot_y_tic_label = TRUE,\n  y_scientific = FALSE\n)\n\n\n\n\n\nFigure 4.3: Box plot of median household income, Georgia counties\n\n\n\n\n\n\n\nFrom the above Georgia household data frame ga_dt produce a scatter plot of “medageE” vs “medincE”.\n\n\nRplotterPkg::create_scatter_plot(\n  df = ga_dt,\n  aes_x = \"medageE\",\n  aes_y = \"medincE\",\n  x_title = \"Median Age\",\n  y_title = \"Median Income\",\n  rot_y_tic_label = TRUE,\n  pts_fill = \"navy\",\n  pts_size = 2.0,\n  x_y_scientific = c(FALSE, FALSE)\n)\n\n\n\n\n\nFigure 4.4: Scatter plot of median age and median household income, counties in Georgia\n\n\n\nIn measuring the relationship between age and income, the R language offers two simple functions. First, the stats::lm() function can be used to fit a linear model. Second, we can submit the resulting stats::lm() object to stats:predict() and return fitted values along with per point standard errors for computing upper/lower confidence bands for the fit.\n\nDefine a simple linear regression between variables “medageE” and “medinc E” from the ga_dt data frame using stats::lm().\n\nUse stats::lm() to define the linear model:\n\nage_income_model &lt;- stats::lm(medincE ~ medageE, data = ga_dt)\n\nSubmit the model to stats::predict() and return the fitted values along with computing the upper/lower confidence values:\n\na_predict &lt;- stats::predict(object = age_income_model, se.fit = TRUE)\nci_lower &lt;- a_predict$fit - (2 * a_predict$se.fit)\nci_upper &lt;- a_predict$fit + (2 * a_predict$se.fit)\n\nAppend the fitted and confidence level values to ga_dt:\n\nga_dt[, `:=`(fit = a_predict$fit, ci_lower = ci_lower, ci_upper = ci_upper)]\n\nPlot the data using RplotterPkg::create_scatter_plot():\n\nRplotterPkg::create_scatter_plot(\n  df = ga_dt,\n  aes_x = \"medageE\",\n  aes_y = \"medincE\",\n  aes_CI_lwr = \"ci_lower\",\n  aes_CI_upr = \"ci_upper\",\n  x_title = \"Median Age\",\n  y_title = \"Median Income\",\n  rot_y_tic_label = TRUE,\n  pts_fill = \"navy\",\n  pts_size = 2.0,\n  x_y_scientific = c(FALSE, FALSE),\n  CI_show_ribbon = TRUE\n) + ggplot2::geom_line(aes(y = ga_dt$fit), color=\"blue\", linewidth=1.5)\n\n\n\n\n\nFigure 4.5: Scatter plot with linear relationship superimposed on the graphic",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#customizing-ggplot2-visualizations",
    "href": "4_exploring_census_visualization.html#customizing-ggplot2-visualizations",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "As demonstrated in the above plots the RplotterPkg:: provides easy functional based customization of many of ggplot2’s parameters.\nTo continue with the customization…\n\nShow the percent of commuters that take public transportation to work for the largest metropolitan areas in the United States for vintage 2019.\n\nGet the description of variables ID “DP03_0021PE” and “B01003_001E” in the “acs/acs1/profile” and “acs/acs1” data sets respectively for vintage 2019:\n\nDP03_0021PE_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  vars = \"DP03_0021PE\"\n)\nB01003_001E_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01003_001E\"\n)\nDP03_0021PE_B01003_001E_dt &lt;- rbind(DP03_0021PE_dt,B01003_001E_dt)\n\n\n\n\n\nTable 4.1b: Description of ‘DP03_0021PE’ and B01003_001E, acs/acs1/profile\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP03_0021PE\nPercent!!COMMUTING TO WORK!!Workers 16 years and over!!Public transportation (excluding taxicab)\nSELECTED ECONOMIC CHARACTERISTICS\nNA\nfloat\n\n\nB01003_001E\nEstimate!!Total\nTOTAL POPULATION\nNA\nint\n\n\n\n\n\n\n\n\n\nWe have both percent estimate with acronym of “DP03_0021PE” and “B01003_001E” available. Get the percentage of workers commuting on public transportation.\n\nUse RcensusPkg::get_vintage_data():\n\ncommute_percent_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1/profile\",\n  vintage = 2019,\n  vars = c(\"DP03_0021PE\", \"DP03_0021PM\"),\n  region = \"metropolitan statistical area/micropolitan statistical area\"\n) %&gt;%\ndata.table::setnames(., old = c(\"DP03_0021PE\", \"DP03_0021PM\"), new = c(\"estimate\", \"moe\")) %&gt;%\n.[, `:=`(variable = \"DP03_0021P\", estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, .(GEOID, NAME, variable, estimate, moe)] %&gt;%\n.[order(-estimate)] %&gt;% \n.[1:20,]\n\n\n\n\n\nTable 4.1: Large metro areas by public transit commuting share\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n35620\nNew York-Newark-Jersey City, NY-NJ-PA Metro Area\nDP03_0021P\n31.6\n0.2\n\n\n41860\nSan Francisco-Oakland-Berkeley, CA Metro Area\nDP03_0021P\n18.9\n0.4\n\n\n14460\nBoston-Cambridge-Newton, MA-NH Metro Area\nDP03_0021P\n13.4\n0.4\n\n\n47900\nWashington-Arlington-Alexandria, DC-VA-MD-WV Metro Area\nDP03_0021P\n13.1\n0.4\n\n\n16980\nChicago-Naperville-Elgin, IL-IN-WI Metro Area\nDP03_0021P\n12.4\n0.3\n\n\n42660\nSeattle-Tacoma-Bellevue, WA Metro Area\nDP03_0021P\n10.7\n0.4\n\n\n\n\n\n\n\n\n\nShow an unimproved bar chart of the first sorted 20 metro areas from commute_percent_dt – the percentage of commuters from metro areas.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\"\n)\n\n\n\n\n\nFigure 4.6: A first bar chart with ggplot2\n\n\n\nThe chart could use improvements in sorting, the x-axis tic labels, axis titles,\n\n\n\nClean up the metropolitan area names using the stringr package.\n\n\ncommute_percent_dt %&gt;%\n.[, NAME := stringr::str_remove(NAME, \"-.*$\")] %&gt;%\n.[, NAME := stringr::str_remove(NAME, \",.*$\")] %&gt;%\n.[, NAME := as.factor(NAME)]\n\n\nRe-display the bar chart with the “estimate” parameter on the x axis and the “NAME” parameter on the y axis; the bars sorted in descending order; re-title the axis’; rotate the y axis tic labels to horizontal.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  x_title = \"Metro Area\",\n  y_title = \"estimate\",\n  rot_y_tic_label = TRUE,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE\n)\n\n\n\n\n\nFigure 4.7: An improved bar chart with ggplot2\n\n\n\n\nImprove the bar chart further with titles and captions.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE\n)\n\n\n\n\nFigure 4.8: A cleaned-up bar chart with ggplot2\n\n\n\n\n\n\n\n\nImprove further by customizing the scaling, bar widths/outline, labeling, and color styling.\n\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_alpha = 0.5,\n  bar_color = \"black\",\n  bar_width = 0.8,\n  bar_lwd = 1,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE,\n  y_labels = scales::label_percent(scale = 1)\n) \n\n\n\n\nFigure 4.9: A ggplot2 bar chart with custom styling\n\n\n\n\n\n\n\n\nExport the above bar chart as a png image using RplotterPkg::create_bar_plot.\n\nLook for the png image file ‘commute_percent_barchart.png’ in the images folder under the current directory.\n\nimage_file_path &lt;- file.path(here::here(), \"images\", \"commute_percent_barchart.png\")\n\nRplotterPkg::create_bar_plot(\n  df = commute_percent_dt,\n  aes_x = \"NAME\",\n  aes_y = \"estimate\",\n  title = \"Public transit commute share\",\n  subtitle = \"2019 1-year ACS estimates\",\n  y_title = \"ACS estimate\",\n  caption = \"Source: ACS Data Profile variable DP03_0021P via the RcensusPkg R package\",\n  rot_y_tic_label = TRUE,\n  bar_fill = \"navy\",\n  bar_alpha = 0.5,\n  bar_color = \"black\",\n  bar_width = 0.8,\n  bar_lwd = 1,\n  order_bars = \"asc\",\n  do_coord_flip = TRUE,\n  y_labels = scales::label_percent(scale = 1),\n  png_file_path = image_file_path,\n  png_width_height = c(850, 550)\n)",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#visualizing-margins-of-error",
    "href": "4_exploring_census_visualization.html#visualizing-margins-of-error",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "…it is also often useful to visualize those margins of error to illustrate the degree of uncertainty around estimates, especially when making comparisons between those estimates.\n\n\n\nWe will be looking at the median household income across counties in Maine from the “acs/acs5” with vintage 2020.\n\nStart by getting the Maine county total population data (variable “P1_001N”) from the 2020 Decennial Census.\n\n\nme_fips &lt;- usmap::fips(\"ME\")\n\nme_pop_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = \"P1_001N\",\n  region = \"county:*\",\n  regionin = paste0(\"state:\", me_fips)) %&gt;%\ndata.table::setnames(., old = \"P1_001N\", new = \"value\") %&gt;%\n.[, `:=`(variable = \"totalpop\", value = as.numeric(value))] %&gt;%\n.[, .(GEOID,NAME,variable,value)] %&gt;%\n.[order(-value),]  \n\n\n\n\n\nTable 4.2: Population sizes of counties in Maine\n\n\nGEOID\nNAME\nvariable\nvalue\n\n\n\n\n23005\nCumberland County, Maine\ntotalpop\n303069\n\n\n23031\nYork County, Maine\ntotalpop\n211972\n\n\n23019\nPenobscot County, Maine\ntotalpop\n152199\n\n\n23011\nKennebec County, Maine\ntotalpop\n123642\n\n\n23001\nAndroscoggin County, Maine\ntotalpop\n111139\n\n\n23003\nAroostook County, Maine\ntotalpop\n67105\n\n\n23017\nOxford County, Maine\ntotalpop\n57777\n\n\n23009\nHancock County, Maine\ntotalpop\n55478\n\n\n23025\nSomerset County, Maine\ntotalpop\n50477\n\n\n23013\nKnox County, Maine\ntotalpop\n40607\n\n\n23027\nWaldo County, Maine\ntotalpop\n39607\n\n\n23023\nSagadahoc County, Maine\ntotalpop\n36699\n\n\n23015\nLincoln County, Maine\ntotalpop\n35237\n\n\n23029\nWashington County, Maine\ntotalpop\n31095\n\n\n23007\nFranklin County, Maine\ntotalpop\n29456\n\n\n23021\nPiscataquis County, Maine\ntotalpop\n16800\n\n\n\n\n\n\n\n\n\nThere are seventeen counties in Main, ranging in population from a maximum of 303,069 to a minimum of 16,800. In turn, estimates for the counties with small population sizes are likely to be subject to a larger margin of error than those with a larger baseline populations.\n\n\nGet the Maine total household income along with their margin of errors across the counties for 2020.\n\nWe want data for variable acronym “B19013_001” from the 2016-2020 ACS:\n\nme_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\", \"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\", me_fips)) %&gt;%\n  data.table::setnames(., old = c(\"B19013_001E\", \"B19013_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n  .[, NAME := stringr::str_remove(NAME, \" County, Maine\")] %&gt;%  \n  .[order(estimate)] %&gt;%                                                 \n  .[, NAME := factor(NAME, levels = NAME)] %&gt;%\n  .[, .(GEOID,NAME,estimate,moe)] %&gt;% \n  .[order(-moe),] \n\n\n\n\n\nTable 4.2a: Household income of counties in Maine\n\n\nGEOID\nNAME\nestimate\nmoe\n\n\n\n\n23023\nSagadahoc\n68039\n4616\n\n\n23015\nLincoln\n58125\n3974\n\n\n23027\nWaldo\n58034\n3482\n\n\n23007\nFranklin\n51630\n2948\n\n\n23021\nPiscataquis\n42083\n2883\n\n\n23025\nSomerset\n45382\n2694\n\n\n23009\nHancock\n58345\n2593\n\n\n23013\nKnox\n57794\n2528\n\n\n23017\nOxford\n49761\n2380\n\n\n23003\nAroostook\n43791\n2306\n\n\n23029\nWashington\n44847\n2292\n\n\n23031\nYork\n68932\n2239\n\n\n23011\nKennebec\n55368\n2112\n\n\n23001\nAndroscoggin\n55002\n2003\n\n\n23019\nPenobscot\n52128\n1836\n\n\n23005\nCumberland\n76014\n1563\n\n\n\n\n\n\n\n\n\nCreate a dot plot of Maine’s county household incomes.\n\n\nRplotterPkg::create_scatter_plot(\n  df = me_income_dt,\n  aes_x = \"estimate\",\n  aes_y = \"NAME\",\n  title = \"Median Household Income Estimates\",\n  subtitle = \"Counties in Maine from ACS 2016-2020 Survey\",\n  pts_fill = \"#12891b\",\n  pts_size = 5.0,\n  x_title = \"ACS estimate\",\n  x_labels = function(x) paste0(\"$\", prettyNum(x, big.mark = \",\", scientific = F)),\n  rot_y_tic_label = TRUE\n)\n\n\n\n\n\nFigure 4.10: A dot plot of median household income by county in Maine\n\n\n\n\n\n\n\nRank the margin of error values for the household incomes in me_income_dt.\n\nReorder me_income_dt by descending “moe” values:\n\nmoe_ranked_dt &lt;- me_income_dt[order(-moe)] %&gt;%\n.[, variable := \"hhincome\"] %&gt;%\n.[, .(GEOID,NAME,variable,estimate,moe)]  \n\n\n\n\n\nTable 4.3: Margins of error in Maine\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n23023\nSagadahoc\nhhincome\n68039\n4616\n\n\n23015\nLincoln\nhhincome\n58125\n3974\n\n\n23027\nWaldo\nhhincome\n58034\n3482\n\n\n23007\nFranklin\nhhincome\n51630\n2948\n\n\n23021\nPiscataquis\nhhincome\n42083\n2883\n\n\n23025\nSomerset\nhhincome\n45382\n2694\n\n\n23009\nHancock\nhhincome\n58345\n2593\n\n\n23013\nKnox\nhhincome\n57794\n2528\n\n\n23017\nOxford\nhhincome\n49761\n2380\n\n\n23003\nAroostook\nhhincome\n43791\n2306\n\n\n23029\nWashington\nhhincome\n44847\n2292\n\n\n23031\nYork\nhhincome\n68932\n2239\n\n\n23011\nKennebec\nhhincome\n55368\n2112\n\n\n23001\nAndroscoggin\nhhincome\n55002\n2003\n\n\n23019\nPenobscot\nhhincome\n52128\n1836\n\n\n23005\nCumberland\nhhincome\n76014\n1563\n\n\n\n\n\n\n\n\n\n…margins of error around the estimated median household incomes vary from a low of $1563 (Cumberland County with population of 303069) to a high of $4616 (Sagadahoc County with a population of 36699)\n\n\nRepeat the above dot plot of household income with error bars around each point showing the degree of uncertainty based on the “moe” values.\n\n\nRplotterPkg::create_scatter_plot(\n  df = me_income_dt,\n  aes_x = \"estimate\",\n  aes_y = \"NAME\",\n  title = \"Median Household Income Estimates\",\n  subtitle = \"Counties in Maine from ACS 2016-2020 Survey\",\n  pts_fill = \"#12891b\",\n  pts_size = 5.0,\n  x_title = \"ACS estimate\",\n  x_labels = function(x) paste0(\"$\", prettyNum(x, big.mark = \",\", scientific = F)),\n  rot_y_tic_label = TRUE\n) + geom_errorbarh(aes(xmin = estimate - moe, xmax = estimate + moe))\n\n\n\n\n\nFigure 4.11: Median household income by county in Maine with error bars shown",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#visualizing-acs-estimates-over-time",
    "href": "4_exploring_census_visualization.html#visualizing-acs-estimates-over-time",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "As a time-series visualization example, obtain the median home value (“B25077_001E”) for Deschutes County, Oregon back to 2005 through 2019.\n\nGet the data using RcensusPkg::get_multi_vintage_data():\n\ndeschutes_fips &lt;- usmap::fips(\"OR\",\"Deschutes\")\n\ndeschutes_val_dt &lt;- RcensusPkg::get_multi_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage_v = 2005:2019,\n  vars = c(\"B25077_001E\", \"B25077_001M\"),\n  region = paste0(\"county:\", substr(deschutes_fips,3,5)),\n  regionin = paste0(\"state:\", substr(deschutes_fips,1,2))) %&gt;%\ndata.table::setnames(., old = c(\"B25077_001E\", \"B25077_001M\", \"vintage\"), new = c(\"estimate\", \"moe\", \"year\")) %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, variable := \"B25077_001\"] %&gt;%\n.[, `:=`(ci_lwr = estimate - moe, ci_upr = estimate + moe)] %&gt;% \n.[, .(year,GEOID,NAME,variable,estimate,moe,ci_lwr,ci_upr)]   \n\n\n\n\n\nTable 4.4: Time series of median home values in Deschutes County, OR\n\n\nyear\nGEOID\nNAME\nvariable\nestimate\nmoe\nci_lwr\nci_upr\n\n\n\n\n2005\n41017\nDeschutes County, Oregon\nB25077_001\n236100\n13444\n222656\n249544\n\n\n2006\n41017\nDeschutes County, Oregon\nB25077_001\n336600\n11101\n325499\n347701\n\n\n2007\n41017\nDeschutes County, Oregon\nB25077_001\n356700\n16765\n339935\n373465\n\n\n2008\n41017\nDeschutes County, Oregon\nB25077_001\n331600\n17104\n314496\n348704\n\n\n2009\n41017\nDeschutes County, Oregon\nB25077_001\n284300\n12652\n271648\n296952\n\n\n2010\n41017\nDeschutes County, Oregon\nB25077_001\n260700\n18197\n242503\n278897\n\n\n\n\n\n\n\n\n\nDraw the Deschutes County home value line chart.\n\n\nRplotterPkg::create_scatter_plot(\n  df = deschutes_val_dt,\n  aes_x = \"year\",\n  aes_y = \"estimate\",\n  aes_CI_lwr = \"ci_lwr\",\n  aes_CI_upr = \"ci_upr\",\n  x_title = \"Year\",\n  y_title = \"ACS estimate\",\n  rot_y_tic_label = TRUE,\n  y_labels = scales::dollar,\n  connect = TRUE,\n  pts_size = 3.0,\n  pts_fill = \"#b136b9\",\n  x_major_breaks = 2005:2019,\n  x_minor_breaks = NULL,\n)\n\n\n\n\n\nFigure 4.12: A time series chart of median home values in Deschutes County, OR\n\n\n\n\nDraw the Deschutes County home value line chart with error ranges.\n\n\nRplotterPkg::create_scatter_plot(\n  df = deschutes_val_dt,\n  aes_x = \"year\",\n  aes_y = \"estimate\",\n  aes_CI_lwr = \"ci_lwr\",\n  aes_CI_upr = \"ci_upr\",\n  subtitle = \"Median Home Values in Deschutes County, Oregon\",\n  x_title = \"Year\",\n  y_title = \"ACS estimate\",\n  rot_y_tic_label = TRUE,\n  y_labels = scales::dollar,\n  connect = TRUE,\n  pts_size = 3.0,\n  pts_fill = \"#b136b9\",\n  x_major_breaks = 2005:2019,\n  x_minor_breaks = NULL,\n  CI_show_ribbon = TRUE,\n  CI_ribbon_color = \"navy\",\n  CI_show_line = FALSE\n)\n\n\n\n\n\nFigure 4.13: The Deschutes County home value line chart with error ranges shown",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#exploring-age-and-sex-structure-with-population-pyramids",
    "href": "4_exploring_census_visualization.html#exploring-age-and-sex-structure-with-population-pyramids",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "The Population Estimates Program(PEP) offers a dataset named “pep/charagegroups” that has characteristic breakdowns for a number of variables.\n\nReview the variables offered in “pep/charagegroups” for the vintage 2019.\n\nCall RcensusPkg::get_variable_names() for dataset “pep/charagegroups”:\n\npep_char_vars_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019\n)\n\n\n\n\n\nTable 4.5a Variables offered in ‘pep/charagegroups’, pep/charagegroups, 2019\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nAGEGROUP\nAge Group\nNA\ndefault displayed\nint\n\n\nHISP\nHispanic Origin\nNA\ndefault displayed\nint\n\n\nNATION\nGeography\nNA\nNA\nNA\n\n\nPOP\nPopulation\nNA\nNA\nNA\n\n\nRACE\nRace\nNA\ndefault displayed\nint\n\n\nSEX\nSex\nNA\ndefault displayed\nint\n\n\nSTATE\nGeography\nNA\nNA\nNA\n\n\n\n\n\n\n\n\nBoth the “SEX” and “AGEGROUP” are categorical variables with integer values corresponding to string labels.\n\nRetrieve the integer value/label pairs of “SEX” and “AGEGROUP”.\n\n\nsex_cat_dt &lt;- RcensusPkg::get_category_strings(name = \"sex\")\nagegroup_cat_dt &lt;- RcensusPkg::get_category_strings(name = \"agegroup\", start_idx = 1, end_idx = 19)\n\n\nShow the “AGEGROUP” values and labels”.\n\nNote that there are a total of 19 value/label pairs for ‘AGEGROUP’.\n\n\n\n\nTable 4.5b: Integer value/label pairs for catagory variable ‘AGEGROUP’\n\n\nval\nagegroup_label\n\n\n\n\n0\nAll ages\n\n\n1\nAge 0 to 4 years\n\n\n2\nAge 5 to 9 years\n\n\n3\nAge 10 to 14 years\n\n\n4\nAge 15 to 19 years\n\n\n5\nAge 20 to 24 years\n\n\n6\nAge 25 to 29 years\n\n\n7\nAge 30 to 34 years\n\n\n\n\n\n\n\n\n\nShow the 3 “SEX” category value/label pairs.\n\n\n\n\n\nTable 4.5c: Integer value/label pairs for catagory variable ‘SEX’\n\n\nval\nsex_label\n\n\n\n\n0\nBoth Sexes\n\n\n1\nMale\n\n\n2\nFemale\n\n\n\n\n\n\n\n\nThe Census Bureau provides a key to the meaning of these and other PEP related categorical variables here.\n\nGet the “SEX” and “AGEGROUP” variables from the “pep/charagegroups” dataset for the state of Utah, 2019.\n\nCall RcensusPkg::get_vintage_data(): We will use data.tables sex_cat_dt and agegroup_cat_dt from above to re-value the resultant “SEX” and “AGEGROUP” columns.\n\nut_fips &lt;- usmap::fips(\"UT\")\n\nut_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"pep/charagegroups\",\n  vintage = 2019,\n  vars = c(\"SEX\", \"AGEGROUP\", \"POP\"),\n  region = paste0(\"state:\",ut_fips)) %&gt;%\n.[, `:=`(SEX = as.numeric(SEX), AGEGROUP = as.numeric(AGEGROUP))] %&gt;% \n.[, SEX := sex_cat_dt$sex_label[SEX+1]] %&gt;%  \n.[, AGEGROUP := agegroup_cat_dt$agegroup_label[AGEGROUP+1]] %&gt;%\ndata.table::setnames(., old = \"POP\", new = \"value\") %&gt;%\n.[, .(GEOID,NAME,value,SEX,AGEGROUP)] %&gt;%\nna.omit(., cols = \"AGEGROUP\") %&gt;%\ndata.table::setorderv(., cols = \"SEX\")\n\n\n\n\n\nTable 4.5: Age and sex data for Utah from the PEP API\n\n\nGEOID\nNAME\nvalue\nSEX\nAGEGROUP\n\n\n\n\n49\nUtah\n3205958\nBoth Sexes\nAll ages\n\n\n49\nUtah\n247803\nBoth Sexes\nAge 0 to 4 years\n\n\n49\nUtah\n258976\nBoth Sexes\nAge 5 to 9 years\n\n\n49\nUtah\n267985\nBoth Sexes\nAge 10 to 14 years\n\n\n49\nUtah\n253847\nBoth Sexes\nAge 15 to 19 years\n\n\n49\nUtah\n264652\nBoth Sexes\nAge 20 to 24 years\n\n\n\n\n\n\n\n\n\nPrepare data frame ut_dt for plotting the population pyramid by removing rows with “SEX” equal to “Both Sexes” and “AGEGROUP” equal to “All ages”. Also set the “value” values to negative for rows with “AGEGROUP” equal to “Male”.\n\n\nut_pyramid_plot_dt &lt;- ut_dt %&gt;%\n  .[SEX != \"Both Sexes\"] %&gt;% # remove rows with SEX == \"Both sexes\"\n  .[AGEGROUP != \"All ages\"] %&gt;% # remove rows with AGEGROUP == \"All ages\"\n  .[, value := as.numeric(value)] %&gt;% # set value as numeric\n  .[, value := ifelse(SEX == \"Male\", -value, value)] %&gt;% # re-value 'value' based on SEX value\n  .[, AGEGROUP := ifelse(AGEGROUP == \"Age 5 to 9 years\", \"Age 05 to 9 years\", AGEGROUP)] %&gt;% # for ordering\n  .[, AGEGROUP := stringr::str_remove_all(AGEGROUP, \"Age\\\\s|\\\\syears\")] %&gt;% # shorten the AGEGROUP labels\n  .[, AGEGROUP := as.factor(AGEGROUP)] # make AGEGROUP a factor\n\n\n\n\n\nTable 4.6: Filtered and transformed Utah population data\n\n\nGEOID\nNAME\nvalue\nSEX\nAGEGROUP\n\n\n\n\n49\nUtah\n126108\nFemale\n05 to 9\n\n\n49\nUtah\n23039\nFemale\n80 to 84\n\n\n49\nUtah\n130045\nFemale\n10 to 14\n\n\n49\nUtah\n124535\nFemale\n15 to 19\n\n\n49\nUtah\n128846\nFemale\n20 to 24\n\n\n49\nUtah\n108654\nFemale\n30 to 34\n\n\n\n\n\n\n\n\n\n\n\n\nUse RplotterPkg::create_bar_plot() to create the population pyramid from ut_pyramid_plot_dt data.table.\n\n\npyramid_bar_plot &lt;- RplotterPkg::create_bar_plot(\n  df = ut_pyramid_plot_dt,\n  aes_x = \"AGEGROUP\",\n  aes_y = \"value\",\n  aes_fill = \"SEX\",\n  title = \"Population structure in Utah\",\n  x_title = \"2019 Census Bureau population estimate\",\n  y_title = \"Population Estimate\",\n  caption = \"Data source: US Census Bureau population estimates & RcensusPkg\",\n  y_labels = function(y) paste0(abs(y / 1000), \"k\"),\n  bar_color = \"white\",\n  bar_lwd = 0.5,\n  bar_width = 0.95,\n  do_coord_flip = TRUE,\n  rot_y_tic_label = TRUE,\n  legend_key_width = 0.75\n) + ggplot2::scale_fill_manual(values =  c(\"Female\"= \"darkred\", \"Male\"=\"navy\"))\npyramid_bar_plot\n\n\n\n\nFigure 4.15: A formatted population pyramid of Utah",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#visualizing-group-wise-comparisons",
    "href": "4_exploring_census_visualization.html#visualizing-group-wise-comparisons",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "Use multiple plots to compare groups of geographies. An example involves a comparison of median home values by Census tract for six counties in the Portland, Oregon area: Multnomah, which contains the city of Portland, and the suburban counties of Clackamas and Washington. Use the ACS 5-year survey 2020 data set (“acs/acs5”).\n\nGet the fips numbers for six counties:\n\nor_fips &lt;- usmap::fips(state = \"OR\")\nmultnomah_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Multnomah\"),3,5)\nclackamas_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Clackamas\"),3,5)\nwashington_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Washington\"),3,5)\nyamhill_fips &lt;- substr(usmap::fips(state = \"OR\", county = \"Yamhill\"),3,5)\nmarion_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Marion\"),3,5)\ncolumbia_fips &lt;-substr(usmap::fips(state = \"OR\", county = \"Columbia\"),3,5)\n\ntract_fips &lt;- c(multnomah_fips, clackamas_fips, washington_fips, yamhill_fips, marion_fips, columbia_fips)\n\nGet all the tract data into one data.table:\n\nhome_vals_dt &lt;- NULL\nfor(a_fips in tract_fips){\n  tracts_vals_dt &lt;- RcensusPkg::get_vintage_data(\n    dataset = \"acs/acs5\",\n    vintage = 2020,\n    vars = c(\"B25077_001E\", \"B25077_001M\"),\n    region = \"tract:*\",\n    regionin = paste0(\"state:\",or_fips,\"+county:\",a_fips)\n  )\n  home_vals_dt &lt;- rbind(home_vals_dt, tracts_vals_dt)\n}\nhome_vals_dt &lt;- home_vals_dt %&gt;%\ndata.table::setnames(., old = c(\"B25077_001E\", \"B25077_001M\"), new = c(\"estimate\",\"moe\")) %&gt;%\n.[, variable := \"B25077_001\"] %&gt;%\n.[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n.[, .(GEOID,NAME,variable,estimate,moe)] %&gt;%\ndata.table::setorderv(.,cols = \"GEOID\")\n\n\n\n\n\nTable 4.7: Median home values by Census tract in the Portland\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\n\n\n\n\n41005020101\nCensus Tract 201.01, Clackamas County, Oregon\nB25077_001\n666700\n131453\n\n\n41005020102\nCensus Tract 201.02, Clackamas County, Oregon\nB25077_001\n909000\n130787\n\n\n41005020201\nCensus Tract 202.01, Clackamas County, Oregon\nB25077_001\n897400\n97893\n\n\n41005020202\nCensus Tract 202.02, Clackamas County, Oregon\nB25077_001\n821200\n93103\n\n\n41005020302\nCensus Tract 203.02, Clackamas County, Oregon\nB25077_001\n565600\n32555\n\n\n41005020303\nCensus Tract 203.03, Clackamas County, Oregon\nB25077_001\n560000\n34669\n\n\n\n\n\n\n\n\nSplit the “NAME” column into separate columns of “tract”, “county”, “state” based on the embedded comma:\n\nhome_vals_dt &lt;- home_vals_dt %&gt;%\n  .[, c(\"tract\", \"county\", \"state\") := tstrsplit(NAME, \",\", fixed = TRUE)] %&gt;%   # split NAME string into tract,county,state\n  .[, county := stringr::str_remove(county, \" County\")] %&gt;%\n  .[estimate &gt; 0 & moe &gt; 0,] %&gt;%  # filter rows for only positive values\n  .[, county := factor(county)]  %&gt;% # county as a factor\n  .[, .(GEOID,tract,county,state,variable,estimate,moe)]\n\n\n\n\n\nTable 4.8: Data with NAME column split by comma\n\n\nGEOID\ntract\ncounty\nstate\nvariable\nestimate\nmoe\n\n\n\n\n41005020101\nCensus Tract 201.01\nClackamas\nOregon\nB25077_001\n666700\n131453\n\n\n41005020102\nCensus Tract 201.02\nClackamas\nOregon\nB25077_001\n909000\n130787\n\n\n41005020201\nCensus Tract 202.01\nClackamas\nOregon\nB25077_001\n897400\n97893\n\n\n41005020202\nCensus Tract 202.02\nClackamas\nOregon\nB25077_001\n821200\n93103\n\n\n41005020302\nCensus Tract 203.02\nClackamas\nOregon\nB25077_001\n565600\n32555\n\n\n41005020303\nCensus Tract 203.03\nClackamas\nOregon\nB25077_001\n560000\n34669\n\n\n\n\n\n\n\n\n\nAggregate the home_vals_dt data.table with grouping by county and show summary statistics on the “estimate” variable.\n\nCompute min, max, mean, and median by county:\n\ncounty_summary_dt &lt;- home_vals_dt[, .(min = min(estimate), max = max(estimate), mean = round(mean(estimate),1), median = stats::median(estimate)), by = county]\n\n\n\n\n\nTable 4.9: Summary statistics for Census tracts in Portland-area counties\n\n\ncounty\nmin\nmax\nmean\nmedian\n\n\n\n\nClackamas\n62800\n909000\n449940.7\n426700\n\n\nColumbia\n218100\n362200\n277590.9\n275900\n\n\nMarion\n48700\n483500\n270969.2\n261200\n\n\nMultnomah\n192900\n1033500\n455706.2\n425950\n\n\nWashington\n221900\n769700\n419618.3\n406100\n\n\nYamhill\n230000\n545500\n333815.8\n291100\n\n\n\n\n\n\n\n\n\nShow the overall kernel density of the “estimate” variable of home_vals_dt.\n\nCall RplotterPkg::create_density_plot():\n\nRplotterPkg::create_density_plot(\n  df = home_vals_dt,\n  aes_x = \"estimate\",\n  x_title = \"Home Value(x 1000)\",\n  y_title = \"Density\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  rot_y_tic_label = TRUE,\n  density_fill = \"navyblue\",\n  density_alpha = 0.5\n)\n\n\n\n\n\nFigure 4.16: A density plot using all values in the dataset\n\n\n\n\nShow the home value density by county.\n\n\nRplotterPkg::create_density_plot(\n  df = home_vals_dt[, .(estimate), by = county],\n  aes_x = \"estimate\",\n  aes_fill = \"county\",\n  x_title = \"Home Value(x 1000)\",\n  y_title = \"Density\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  rot_y_tic_label = TRUE,\n  legend_key_width = 0.8\n)\n\n\n\n\n\nFigure 4.17: A density plot with separate curves for each county\n\n\n\n\nShow the home value density by county in multiple charts using RplotterPkg::multi_panel_grid() function.\n\n\ncounties &lt;- levels(home_vals_dt$county)\nbuild_plot &lt;- function(id, df, counties){\n  county &lt;- counties[id]\n  plot_df &lt;- df[county == counties[[id]], ]\n  aplot &lt;- RplotterPkg::create_density_plot(\n    df = plot_df,\n    aes_x = \"estimate\",\n    subtitle = county,\n    x_title = NULL,\n    x_labels = function(x) paste0(\"$\", x / 1000, \"k\"),\n    x_limits = c(0, 1000000),\n    x_major_breaks = c(250000, 500000, 750000),\n    y_limits = c(0, 0.000008),\n    y_major_breaks = seq(0, 0.000008, 0.000001),\n    y_title = \"Density\",\n    show_minor_grids = FALSE,\n    rot_y_tic_label = TRUE,\n    density_fill = \"navyblue\",\n    density_alpha = 0.5\n  )\n  return(aplot)\n}\nplot_lst &lt;- purrr::map(1:6,\n  build_plot,\n  df = home_vals_dt,\n  counties = counties\n)\nnames(plot_lst) &lt;- counties\nlayout &lt;- list(\n  plots = plot_lst,\n  rows = c(1, 1, 1, 2, 2, 2),\n  cols = c(1, 2, 3, 1, 2, 3)\n)\nRplotterPkg::multi_panel_grid(\n layout = layout,\n title = \"Median home values by Census tract, 2015-2019 ACS\",\n y_tick_width = 1,\n plot_titles = counties\n)\n\n\n\n\nFigure 4.18: An example faceted density plot",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "4_exploring_census_visualization.html#advanced-visualization-with-ggplot2-extensions",
    "href": "4_exploring_census_visualization.html#advanced-visualization-with-ggplot2-extensions",
    "title": "4 Exploring US Census data with visualization",
    "section": "",
    "text": "Repeat the above home value density by county data (home_vals_dt) in a “ridge” type of display.\n\nReshape home_vals_dt to a “wide” form using the “county” variable:\n\nhome_vals_wide_dt &lt;- RcensusPkg::long_to_wide(\n  dt = home_vals_dt,\n  id_v = \"tract\",\n  parameter_col = \"county\",\n  value_col = \"estimate\"\n)\n\nCall RplotterPkg::create_density_ridge_plot():\n\nRplotterPkg::create_density_ridge_plot(\n  df = home_vals_wide_dt,\n  title = \"Median home value: 2016-2020 ACS estimate\",\n  variables = c(\" Clackamas\",\" Columbia\", \" Marion\", \" Multnomah\",  \" Washington\",\" Yamhill\"),\n  x_title = \"Home Value\",\n  x_limits = c(0, 1000000),\n  x_major_breaks = c(250000, 500000, 750000),\n  density_fill = \"blue\",\n  x_labels = function(x)paste0(\"$\", prettyNum(x/1000,big.mark = \",\",scientific=F)),\n  density_alpha = 0.5\n)\n\n\n\n\nFigure 4.19: Median home values in Portlan-area counties visualized with RplotterPkg::create_density_ridge_plot\n\n\n\n\n\n\n\nSection skipped.\n\n\n\nSection skipped.\n\n\n\n\nTake the ggplot2 object pyramid_bar_plot created above and make it interactive using the plotly package.\n\nUsing plotly::ggplotly() is great for interactivity but comes with a price. This html article increased substantially with its addition. It works, but we’ve commented it out as you’ll note in the code below. Using Shiny might be a better option for interactive plots\n\n#plotly::ggplotly(pyramid_bar_plot)",
    "crumbs": [
      "4 Exploring US Census data with visualization"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html",
    "href": "5_census_geographic_data.html",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(usmap)\nlibrary(data.table)\nlibrary(devtools)\nlibrary(kableExtra)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(magrittr)\nlibrary(httr)\nlibrary(here)\nlibrary(sf)\nlibrary(crsuggest)\nlibrary(mapview)\nlibrary(leaflet)\nlibrary(RColorBrewer)\n\n\nLoad the packages ‘deandevl/RcensusPkg’, ‘deandevl/RplotterPkg’ and ‘deandevl/RspatialPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\ndevtools::install_github('deandevl/RplotterPkg')\ndevtools::install_github('deandevl/RspatialPkg')\n\n\n\n\nCreate and assign an empty output directory path for acquiring downloaded shapefiles from the Census Bureau.\n\n\noutput_dir &lt;- file.path(here(), \"shapefiles\")\n\nThe function RcensusPkg::tiger_states_sf() (and the other similar RcensusPkg::tiger_ functions) perform three tasks:\n\nDownload a shapefile from the US Census Bureau.\nRead the shapefile where it is converted to a simple feature object(sf) using the sf::st_read() function.\nReturn the sf object to the caller and optionally display on the console information about the sf.\n\n\nGet the simple feature object that contains the boundary geometries for US states.\n\nDownload from the US Census Bureau the shapefile of US states and return and plot the resulting simple feature object(sf):\n\nstates_sf &lt;- RcensusPkg::tiger_states_sf(resol = \"20m\", output_dir = output_dir)\n\nReading layer `tl_2020_us_state' from data source \n  `D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\shapefiles' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2311 ymin: -14.60181 xmax: 179.8597 ymax: 71.43979\nGeodetic CRS:  NAD83\n\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = states_sf,\n  title = \"US State Boundaries\",\n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n) \n\n\n\n\nFigure 5.1: Default US states data obtained with tigris\n\n\n\n\n\nOther Census datasets may be available by state or by county within the state. In some cases, this subsetting is optional; in other cases, state and/or county arguments will be required.\n\n\nShow the counties of New Mexico.\n\nDownload the shapefile for all US counties from the Census Bureau and return simple feature(sf) object for New Mexico:\n\nnm_fips &lt;- usmap::fips(state = \"new mexico\")\nnm_express &lt;- expression(STATEFP == nm_fips)\nnm_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  resol = \"20m\",\n  express = nm_express,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = nm_counties_sf, \n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.2: County boundaries in New Mexico\n\n\n\n\nStatistical entities and geographic features are similarly accessible if they exist in the TIGER/Line database.\n\n\nShow the Census tract boundaries of Los Alamos, New Mexico.\n\nDownload the county’s shapefile and return its simple feature object(sf):\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nla_tracts_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = nm_fips,\n  express = la_tracts_express,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_sf, \n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n  )\n\n\n\n\n\nFigure 5.3: Census tract boundaries in Los Alamos County, NM\n\n\n\nSeveral geographic features are available as well, including roads and water features.\n\nShow water features of Los Alamos, New Mexico.\n\nDownload the shapefile for area water in Los Alamos, New Mexico and return its simple feature object(sf):\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nlos_alamos_area_water_sf &lt;- RcensusPkg::tiger_water_sf(\n  state = nm_fips,\n  county = los_alamos_fips,\n  entity = \"area\",\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = los_alamos_area_water_sf,\n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.4: Water area in Los Alamos County, NM\n\n\n\n\n\n\nAs mentioned earlier, sf represents vector spatial data much like a regular R data frame, but with a special column, geometry, that represents the shape of each feature. When a simple features object is printed, the information above the data frame gives some additional geographic context to the coordinates in the geometry column. This includes a geometry type, a bounding box, and a coordinate reference system (CRS) definition.\n\n\n\n\nAcquire landmark point data for the District of Columbia.\n\nDownload the shapefile for DC landmarks and return the simple feature landmark geometries:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_landmarks_sf &lt;- RcensusPkg::tiger_landmarks_sf(\n  state = dc_fips, \n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\ndc_landmarks_sf &lt;- data.table::as.data.table(dc_landmarks_sf) %&gt;%\n  na.omit(., cols = \"FULLNAME\") %&gt;%\n  sf::st_as_sf(.)\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_landmarks_sf,\n  sf_shape = 1,\n  sf_size = 4,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.5: Census landmarks in Washington, DC\n\n\n\n\n\n\n\nAcquire road line data for the District of Columbia.\n\nDownload the roads shapefile and return the roads simple feature object(sf) for DC:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_roads_sf &lt;- RcensusPkg::tiger_roads_sf(\n  state = dc_fips,\n  entity = \"state_roads\",\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_roads_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.6: Primary and secondary roads in Washington, DC\n\n\n\n\n\n\n\nAcquire the Census Bureau’s block group geometries for the District of Columbia.\n\nGet the block groups simple feature for DC:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_block_groups_sf &lt;- RcensusPkg::tiger_block_groups_sf(\n  state = dc_fips, \n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_block_groups_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\",\n  sf_fill = \"white\"\n)\n\n\n\n\n\nFigure 5.7: Block groups in Washington, DC\n\n\n\n\n\n\n\n\n\n\n\nMap both the tracts and block groups of Los Alamos, NM side by side.\n\nGet the simple feature tracts for Los Alamos:\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nla_tracts_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = nm_fips,\n  express = la_tracts_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_sf\n)\n\n\n\n\n\nFigure 5.8: Census tracts in Los Alamos County plotted with ggplot2\n\n\n\n\nRemove the background panels, grid lines, and tic marks.\n\n\nla_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = la_tracts_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\nla_tracts_plot\n\n\n\n\n\nFigure 5.9: A ggplot2 map with a blank background\n\n\n\nGet the simple feature block groups for Los Alamos:\n\nla_blockgroups_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_blockgroups_sf &lt;- RcensusPkg::tiger_block_groups_sf(\n  state = nm_fips,\n  express = la_blockgroups_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nla_blockgroups_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = la_blockgroups_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\nla_blockgroups_plot\n\n\n\n\n\nFigure 5.10a: Block groups for Los Alamos, NM\n\n\n\n\nMap both the tracts and block groups of Los Alamos, NM side by side for comparison.\n\n\nlayout &lt;- list(\n  plots = list(tracts = la_tracts_plot, block_groups = la_blockgroups_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\nenumerations_plot &lt;-  RplotterPkg::multi_panel_grid(\n  layout = layout,\n  title = \"Enumerations for Los Alamos, NM\",\n  plot_titles = c(\"Census tracts\",\"Block groups\"),\n  cell_height = 9\n)\nenumerations_plot\n\n\n\n\n\nFigure 5.10: Comparing Census tracts and block groups\n\n\n\n\n\n\n\nVisualize the geometries of la_tracts_sf using mapview::mapview().\n\n\nmapview::mapview(la_tracts_sf)\n\n\n\nFigure 5.11: Interactive view of Los Alamos, NM\n\n\n\n\n\n\n\n\nAdditional options to RcensusPkg include downloading generalized cartographic boundary shapefiles.\n\nMap both the TIGER/Line and cartographic boundary(general) version of Michigan’s counties.\n\nGet the TIGER/Line shapefile counties for Michigan and return a simple feature(sf):\n\nmich_fips &lt;- usmap::fips(state = \"michigan\")\nmich_express &lt;- expression(STATEFP == mich_fips)\nmich_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = mich_express,\n  general = F,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nmich_counties_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = mich_counties_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\nGet the generalized version of Michigan counties shapefile and return a simple feature(sf):\n\nmich_fips &lt;- usmap::fips(state = \"michigan\")\nmich_express &lt;- expression(STATEFP == mich_fips)\nmich_counties_general_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = mich_express,\n  general = TRUE,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nmich_counties_general_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = mich_counties_general_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\nMap both the TIGER/Line and cartographic boundary files side-by-side for comparison.\n\nlayout &lt;- list(\n  plots = list(tiger = mich_counties_plot, general = mich_counties_general_plot),\n  rows = c(1,1),\n  cols = c(1,2)\n)\nmich_cty_tiger_general_plot &lt;- RplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"TIGER/Line\",\"Cartographic boundary\")\n)\nmich_cty_tiger_general_plot\n\n\n\n\n\nFigure 5.12: Comparison of TIGER/Line and cartographic boundary files for Michigan counties\n\n\n\n\nAs the cartographic boundary file shows islands and a distinct coastline, it will be a better option for most thematic mapping projects.\n\nWhen general = TRUE in RcensusPkg’s tiger related functions you can also set the resol = parameter to three different levels of resolution, “500k” (the default), “5m”, and “20m”.\n\n\n\nNo scripts for this section\n\n\n\n\nMap the tracts of Tarrant County, Texas across years 1990, 2000, 2010, 2020.\n\n\nyears &lt;- c(1990, 2000, 2010, 2020)\nset_crs &lt;- c(4326, 4326, 4326, 4326)\nvars &lt;- c(\"CO\", \"COUNTY\", \"COUNTY\", \"COUNTYFP\")\ntx_tarrant_fips &lt;- usmap::fips(state = \"texas\", county = \"tarrant\")\ntx_fips &lt;- substr(tx_tarrant_fips, 1, 2)\ntarrant_fips &lt;- substr(tx_tarrant_fips, 3, 5)\n\nbuild_plot &lt;- function(id, years, set_crs, vars, state_fips, county_fips, output_dir){\n  tx_tracts_sf &lt;-  RcensusPkg::tiger_tracts_sf(\n    state = state_fips,\n    vintage = years[[id]],\n    general = T,\n    set_crs = set_crs[[id]],\n    output_dir = output_dir,\n    sf_info = F\n  )\n\n  col_name &lt;- vars[[id]]\n  tarrant_tracts_sf &lt;- data.table::as.data.table(tx_tracts_sf) %&gt;%\n    .[.[[col_name]] == county_fips, ] %&gt;%\n    sf::st_as_sf(.)\n\n  tarrant_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n    sf = tarrant_tracts_sf,\n    hide_x_tics = T,\n    hide_y_tics = T\n  )\n  \n  title &lt;- paste0(years[[id]], \": \", nrow(tarrant_tracts_sf), \" tracts\")\n  \n  return(list(title = title, plot = tarrant_tracts_plot))\n}\n\nplot_lst &lt;-  1:4 |&gt;\n  purrr::map(\\(x) build_plot(\n    x,\n    years = years,\n    set_crs = set_crs,\n    vars = vars,\n    state_fips = tx_fips,\n    county_fips = tarrant_fips,\n    output_dir = output_dir\n  ))\nplot_flat_lst &lt;- purrr::flatten(plot_lst)\ntitles_lst &lt;- purrr::keep(plot_flat_lst, names(plot_flat_lst) == \"title\")\nplots_lst &lt;- purrr::keep(plot_flat_lst, names(plot_flat_lst) == \"plot\")\n\nlayout &lt;- list(\n  plots = plots_lst,\n  rows = c(1, 1, 2, 2),\n  cols = c(1, 2, 1, 2)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = as.vector(titles_lst)\n)\n\n\n\n\nFigure 5.13: Tarrant County, TX Census tracts, 1990-2020\n\n\n\n\n\n\n\nNo scripts for this section\n\n\n\n\n\nFor geographic data to appropriately represent locations in mapping and spatial analysis, they must be referenced to some model of the Earth’s surface correctly. In simpler terms - a data model of the state of Florida should represent where Florida is actually located relative to other locations.\n\n\nRetrieve the default coordinate reference system (i.e. crs NAD83) of Florida counties simple feature using sf::st_crs().\n\n\nflorida_fips &lt;- usmap::fips(state=\"florida\")\nflorida_express &lt;- expression(STATEFP == florida_fips)\nflorida_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = florida_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nprint(sf::st_crs(florida_counties_sf))\n\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n\n\n\nAll Census Bureau datasets are stored in the “NAD83” geographic coordinate system, which refers to the North American Datum of 1983.\n\n\n\n\nThousands of projected CRS’s exist - each that are appropriate for minimizing data distortion in a specific part of the world. … the crsuggest package (K. Walker 2021a) can help narrow down the choices.\n\n\nShow the suggestions for florida_counties_sf.\n\n\nflorida_counties_suggest_df &lt;- crsuggest::suggest_crs(florida_counties_sf)\n\n\n\n\n\nTable 5.1: Suggested coordinate reference systems for Florida\n\n\ncrs_code\ncrs_name\ncrs_type\ncrs_gcs\ncrs_units\n\n\n\n\n6439\nNAD83(2011) / Florida GDL Albers\nprojected\n6318\nm\n\n\n3513\nNAD83(NSRS2007) / Florida GDL Albers\nprojected\n4759\nm\n\n\n3087\nNAD83(HARN) / Florida GDL Albers\nprojected\n4152\nm\n\n\n3086\nNAD83 / Florida GDL Albers\nprojected\n4269\nm\n\n\n6443\nNAD83(2011) / Florida West (ftUS)\nprojected\n6318\nus-ft\n\n\n6442\nNAD83(2011) / Florida West\nprojected\n6318\nm\n\n\n3517\nNAD83(NSRS2007) / Florida West (ftUS)\nprojected\n4759\nus-ft\n\n\n3516\nNAD83(NSRS2007) / Florida West\nprojected\n4759\nm\n\n\n2882\nNAD83(HARN) / Florida West (ftUS)\nprojected\n4152\nus-ft\n\n\n2778\nNAD83(HARN) / Florida West\nprojected\n4152\nm\n\n\n\n\n\n\n\n\n\nThe “best choice” is the CRS “Florida GDL Albers” coordinate reference system, which is available with four different variations on the NAD1983 datum.\n\nIt appears that “NAD83(HARN) / Florida GDL Albers” with crs code 3087 is the best choice.\n\nTransform the crs geometries of florida_counties_sf to 3087 (i.e. NAD83(HARN)) using sf::st_transform().\n\n\nflorida_counties_3087_sf &lt;- sf::st_transform(florida_counties_sf, crs = 3087)\nhead(florida_counties_3087_sf)\n\nSimple feature collection with 6 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 83061.87 ymin: 262722.3 xmax: 793982.6 ymax: 780618.1\nProjected CRS: NAD83(HARN) / Florida GDL Albers\n  STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID       NAME          NAMELSAD\n1      12      119 00295740 0500000US12119 12119     Sumter     Sumter County\n2      12      069 00308551 0500000US12069 12069       Lake       Lake County\n3      12      079 00295731 0500000US12079 12079    Madison    Madison County\n4      12      127 00306921 0500000US12127 12127    Volusia    Volusia County\n5      12      099 00295761 0500000US12099 12099 Palm Beach Palm Beach County\n6      12      113 00306914 0500000US12113 12113 Santa Rosa Santa Rosa County\n  STUSPS STATE_NAME LSAD      ALAND     AWATER                       geometry\n1     FL    Florida   06 1442967719   58773420 MULTIPOLYGON (((564246.8 55...\n2     FL    Florida   06 2464507354  531492923 MULTIPOLYGON (((599838.7 49...\n3     FL    Florida   06 1804001483   49634046 MULTIPOLYGON (((417249.1 70...\n4     FL    Florida   06 2852384800  857611281 MULTIPOLYGON (((624847.1 59...\n5     FL    Florida   06 5087510105 1084950939 MULTIPOLYGON (((709391.4 29...\n6     FL    Florida   06 2622106399  543294939 MULTIPOLYGON (((83268.36 76...\n\n\n\nNote that the coordinates for the bounding box and the feature geometry have changed to much larger numbers; they are expressed in meters rather than the decimal degrees used by the NAD83 geographic coordinate system.\n\n\n\n\n\nUse ggplot2::coord_sf() to modify florida_counties_sf with crs 3087 without having to transform it and map with datum = 3087.\n\n\nRspatialPkg::get_geom_sf(florida_counties_sf) +\n    ggplot2::coord_sf(crs = 3087)\n\n\n\n\n\nFigure 5.14: ggplot2 map with CRS specified\n\n\n\n\nWhile the data are displayed on the plot in the requested coordinate system, the underlying .graticule (the grid lines and axis tick labels) default to longitude/latitude. To show the coordinates of the projected coordinate reference system, the argument datum can be used which controls the gridlines.\n\n\nRspatialPkg::get_geom_sf(florida_counties_sf) +\n    ggplot2::coord_sf(crs = 3087, datum = 3087)\n\n\n\n\n\nFigure 5.15: ggplot2 map with modified graticule\n\n\n\n\n\n\n\n\n\n\nShow the default geometries for the US states from the Census Bureau.\n\n\nus_states_sf &lt;- RcensusPkg::tiger_states_sf(\n  general = T, \n  resol = \"20m\", \n  sf_info = F,\n  output_dir = output_dir)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nRspatialPkg::get_geom_sf(\n  sf = us_states_sf,\n  panel_border_color = NA,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.16: Default CRS for US states\n\n\n\n\nThe plot does not work well, in part because the Aleutian Islands in far west Alaska cross the 180 degree line of longitude and are plotted on the opposite side of the map.\n\n\nUse a coordinate reference appropriate for the United States such as the continental US Albers Equal Area projection (“ESRI:102003”).\n\n\nRspatialPkg::get_geom_sf(\n  sf = us_states_sf,\n  panel_border_color = NA,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\"\n) +\nggplot2::coord_sf(crs = \"ESRI:102003\")\n\n\n\n\n\nFigure 5.17: Equal-area CRS for US states\n\n\n\n\nWhile this representation puts all territories in their appropriate locations, it is clearly not appropriate for Alaska, Hawaii, and Puerto Rico which appear distorted. This coordinate reference system is also not ideal for comparative mapping of states given the large amount of blank space between the states on the map.\n\n\nShow the states representation using RcensusPkg::plot_us_data().\n\n\nRcensusPkg::plot_us_data(\n  output_dir = output_dir,\n  title = \"A Default Mapping of US States\"\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\n\n\nFigure 5.19: US states using RcensusPkg::plot_us_data()\n\n\n\n\n\n\n\n\nConvert and map the polygon geometries of major Texas places to points.\n\nGet the Texas state boundary lines:\n\ntexas_fips &lt;- usmap::fips(state = \"texas\")\ntexas_express &lt;- expression(STATEFP == texas_fips)\ntexas_sf &lt;- RcensusPkg::tiger_states_sf(\n  express = texas_express,\n  general = T,\n  transform_crs = 6580,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\nGet the Texas major places:\n\ntexas_fips &lt;- usmap::fips(state = \"texas\")\nmajor_places &lt;- c(\"Dallas\",\"Fort Worth\",\"Houston\",\"Austin\",\"San Antonio\",\"El Paso\")\ntexas_places_express &lt;- expression(NAME %in% major_places)\ntexas_places_sf &lt;- RcensusPkg::tiger_places_sf(\n  state = texas_fips, \n  general = T,\n  express = texas_places_express,\n  transform_crs = 6580, \n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, NAME := ifelse(NAME == \"Fort Worth\", \"Dallas-Fort Worth\", NAME)] %&gt;% \n  sf::st_as_sf(.)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = texas_sf,\n  sf_fill = \"yellow\",\n  sf_stroke = 2.0,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_sf,\n  sf_fill = \"red\",\n  sf_color = \"yellow\",\n  adding = T\n)  \n\n\n\n\nFigure 5.20: Large cities in Texas\n\n\n\n\nConvert the city polygon geometries to centroid points using sf::st_centroid():\n\ntexas_places_centroids_sf &lt;- sf::st_centroid(texas_places_sf)\n\nPlot the centroid points over the outline of Texas and label the cities.\n\nRspatialPkg::get_geom_sf(\n  sf = texas_sf,\n  sf_fill = \"yellow\",\n  sf_stroke = 2.0,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_centroids_sf,\n  sf_fill = \"red\",\n  sf_color = \"red\",\n  sf_size = 3,\n  adding = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_centroids_sf,\n  aes_text = \"NAME\",\n  text_fontface = \"bold.italic\",\n  text_check_overlap = T,\n  # text_nudge_y = -120.3,\n  # text_nudge_x = 20,\n  adding = T\n)\n\n\n\n\nFigure 5.21: Large cities in Texas represented as points\n\n\n\n\n\n\n\n\nSeparate the MULTIPOLYGON geometry of Lee County, Florida into 4 separate POLYGON parts.\n\nGet the MULTIPOLYGON geometry of Lee County, Florida and map it:\n\nflorida_lee_fips &lt;- usmap::fips(state = \"florida\", county = \"lee\")\nflorida_fips &lt;- substr(florida_lee_fips, 1,2)\nlee_fips &lt;- substr(florida_lee_fips, 3, 5)\nlee_county_express &lt;- expression(STATEFP == florida_fips & COUNTYFP == lee_fips)\nlee_county_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = lee_county_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = lee_county_sf,\n  sf_fill = \"#FF8C19\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n)\n\n\n\n\n\nFigure 5.22: Lee County, Florida\n\n\n\nThe Lee County polygon has four distinct parts or non-contiguous areas as shown in the above plot.\n\nUsing sf::st_cast() “cast” Lee County as a POLYGON object which will create a separate row for each non-contiguous area.\n\n\nlee_singlepart_sf &lt;- sf::st_cast(lee_county_sf, \"POLYGON\")\nlee_singlepart_sf\n\nSimple feature collection with 4 features and 12 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -179.1467 ymin: -14.5487 xmax: 179.7785 ymax: 71.38782\nGeodetic CRS:  NAD83\n    STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID NAME   NAMELSAD STUSPS\n1        12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.1      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.2      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.3      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n    STATE_NAME LSAD      ALAND     AWATER                       geometry\n1      Florida   06 2022803068 1900583561 POLYGON ((-82.18358 26.6950...\n1.1    Florida   06 2022803068 1900583561 POLYGON ((-82.22407 26.6029...\n1.2    Florida   06 2022803068 1900583561 POLYGON ((-82.26248 26.6839...\n1.3    Florida   06 2022803068 1900583561 POLYGON ((-82.27005 26.7895...\n\n\nPlot the Sanibel Island, Florida piece:\n\nRspatialPkg::get_geom_sf(\n sf = sf::st_as_sf(lee_singlepart_sf[2, ]),\n sf_fill = \"#FF8C19\",\n hide_x_tics = T,\n hide_y_tics = T,\n panel_color = \"white\",\n panel_border_color = \"white\"\n) + \n coord_sf(crs = 3087, datum = 3087)\n\n\n\n\n\nFigure 5.23: Sanibel Island, Florida",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html#basic-usage-of-tigris-rcensuspkg",
    "href": "5_census_geographic_data.html#basic-usage-of-tigris-rcensuspkg",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "Create and assign an empty output directory path for acquiring downloaded shapefiles from the Census Bureau.\n\n\noutput_dir &lt;- file.path(here(), \"shapefiles\")\n\nThe function RcensusPkg::tiger_states_sf() (and the other similar RcensusPkg::tiger_ functions) perform three tasks:\n\nDownload a shapefile from the US Census Bureau.\nRead the shapefile where it is converted to a simple feature object(sf) using the sf::st_read() function.\nReturn the sf object to the caller and optionally display on the console information about the sf.\n\n\nGet the simple feature object that contains the boundary geometries for US states.\n\nDownload from the US Census Bureau the shapefile of US states and return and plot the resulting simple feature object(sf):\n\nstates_sf &lt;- RcensusPkg::tiger_states_sf(resol = \"20m\", output_dir = output_dir)\n\nReading layer `tl_2020_us_state' from data source \n  `D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\shapefiles' \n  using driver `ESRI Shapefile'\nSimple feature collection with 56 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2311 ymin: -14.60181 xmax: 179.8597 ymax: 71.43979\nGeodetic CRS:  NAD83\n\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = states_sf,\n  title = \"US State Boundaries\",\n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n) \n\n\n\n\nFigure 5.1: Default US states data obtained with tigris\n\n\n\n\n\nOther Census datasets may be available by state or by county within the state. In some cases, this subsetting is optional; in other cases, state and/or county arguments will be required.\n\n\nShow the counties of New Mexico.\n\nDownload the shapefile for all US counties from the Census Bureau and return simple feature(sf) object for New Mexico:\n\nnm_fips &lt;- usmap::fips(state = \"new mexico\")\nnm_express &lt;- expression(STATEFP == nm_fips)\nnm_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  resol = \"20m\",\n  express = nm_express,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = nm_counties_sf, \n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.2: County boundaries in New Mexico\n\n\n\n\nStatistical entities and geographic features are similarly accessible if they exist in the TIGER/Line database.\n\n\nShow the Census tract boundaries of Los Alamos, New Mexico.\n\nDownload the county’s shapefile and return its simple feature object(sf):\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nla_tracts_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = nm_fips,\n  express = la_tracts_express,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_sf, \n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n  )\n\n\n\n\n\nFigure 5.3: Census tract boundaries in Los Alamos County, NM\n\n\n\nSeveral geographic features are available as well, including roads and water features.\n\nShow water features of Los Alamos, New Mexico.\n\nDownload the shapefile for area water in Los Alamos, New Mexico and return its simple feature object(sf):\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nlos_alamos_area_water_sf &lt;- RcensusPkg::tiger_water_sf(\n  state = nm_fips,\n  county = los_alamos_fips,\n  entity = \"area\",\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = los_alamos_area_water_sf,\n  sf_fill = \"white\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.4: Water area in Los Alamos County, NM\n\n\n\n\n\n\nAs mentioned earlier, sf represents vector spatial data much like a regular R data frame, but with a special column, geometry, that represents the shape of each feature. When a simple features object is printed, the information above the data frame gives some additional geographic context to the coordinates in the geometry column. This includes a geometry type, a bounding box, and a coordinate reference system (CRS) definition.\n\n\n\n\nAcquire landmark point data for the District of Columbia.\n\nDownload the shapefile for DC landmarks and return the simple feature landmark geometries:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_landmarks_sf &lt;- RcensusPkg::tiger_landmarks_sf(\n  state = dc_fips, \n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\ndc_landmarks_sf &lt;- data.table::as.data.table(dc_landmarks_sf) %&gt;%\n  na.omit(., cols = \"FULLNAME\") %&gt;%\n  sf::st_as_sf(.)\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_landmarks_sf,\n  sf_shape = 1,\n  sf_size = 4,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.5: Census landmarks in Washington, DC\n\n\n\n\n\n\n\nAcquire road line data for the District of Columbia.\n\nDownload the roads shapefile and return the roads simple feature object(sf) for DC:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_roads_sf &lt;- RcensusPkg::tiger_roads_sf(\n  state = dc_fips,\n  entity = \"state_roads\",\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_roads_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.6: Primary and secondary roads in Washington, DC\n\n\n\n\n\n\n\nAcquire the Census Bureau’s block group geometries for the District of Columbia.\n\nGet the block groups simple feature for DC:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_block_groups_sf &lt;- RcensusPkg::tiger_block_groups_sf(\n  state = dc_fips, \n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = dc_block_groups_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\",\n  sf_fill = \"white\"\n)\n\n\n\n\n\nFigure 5.7: Block groups in Washington, DC",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html#plotting-geographic-data",
    "href": "5_census_geographic_data.html#plotting-geographic-data",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "Map both the tracts and block groups of Los Alamos, NM side by side.\n\nGet the simple feature tracts for Los Alamos:\n\nnm_los_alamos_fips &lt;- usmap::fips(state = \"new mexico\", county = \"los alamos\")\nnm_fips &lt;- substr(nm_los_alamos_fips, 1, 2)\nlos_alamos_fips &lt;- substr(nm_los_alamos_fips, 3, 5)\n\nla_tracts_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = nm_fips,\n  express = la_tracts_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_sf\n)\n\n\n\n\n\nFigure 5.8: Census tracts in Los Alamos County plotted with ggplot2\n\n\n\n\nRemove the background panels, grid lines, and tic marks.\n\n\nla_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = la_tracts_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\nla_tracts_plot\n\n\n\n\n\nFigure 5.9: A ggplot2 map with a blank background\n\n\n\nGet the simple feature block groups for Los Alamos:\n\nla_blockgroups_express &lt;- expression(COUNTYFP == los_alamos_fips)\nla_blockgroups_sf &lt;- RcensusPkg::tiger_block_groups_sf(\n  state = nm_fips,\n  express = la_blockgroups_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nla_blockgroups_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = la_blockgroups_sf,\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\nla_blockgroups_plot\n\n\n\n\n\nFigure 5.10a: Block groups for Los Alamos, NM\n\n\n\n\nMap both the tracts and block groups of Los Alamos, NM side by side for comparison.\n\n\nlayout &lt;- list(\n  plots = list(tracts = la_tracts_plot, block_groups = la_blockgroups_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\nenumerations_plot &lt;-  RplotterPkg::multi_panel_grid(\n  layout = layout,\n  title = \"Enumerations for Los Alamos, NM\",\n  plot_titles = c(\"Census tracts\",\"Block groups\"),\n  cell_height = 9\n)\nenumerations_plot\n\n\n\n\n\nFigure 5.10: Comparing Census tracts and block groups\n\n\n\n\n\n\n\nVisualize the geometries of la_tracts_sf using mapview::mapview().\n\n\nmapview::mapview(la_tracts_sf)\n\n\n\nFigure 5.11: Interactive view of Los Alamos, NM",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html#tigris-rcensuspkg-workflows",
    "href": "5_census_geographic_data.html#tigris-rcensuspkg-workflows",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "Additional options to RcensusPkg include downloading generalized cartographic boundary shapefiles.\n\nMap both the TIGER/Line and cartographic boundary(general) version of Michigan’s counties.\n\nGet the TIGER/Line shapefile counties for Michigan and return a simple feature(sf):\n\nmich_fips &lt;- usmap::fips(state = \"michigan\")\nmich_express &lt;- expression(STATEFP == mich_fips)\nmich_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = mich_express,\n  general = F,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nmich_counties_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = mich_counties_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\nGet the generalized version of Michigan counties shapefile and return a simple feature(sf):\n\nmich_fips &lt;- usmap::fips(state = \"michigan\")\nmich_express &lt;- expression(STATEFP == mich_fips)\nmich_counties_general_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = mich_express,\n  general = TRUE,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nmich_counties_general_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = mich_counties_general_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_border_color = \"white\",\n  panel_color = \"white\"\n)\n\nMap both the TIGER/Line and cartographic boundary files side-by-side for comparison.\n\nlayout &lt;- list(\n  plots = list(tiger = mich_counties_plot, general = mich_counties_general_plot),\n  rows = c(1,1),\n  cols = c(1,2)\n)\nmich_cty_tiger_general_plot &lt;- RplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"TIGER/Line\",\"Cartographic boundary\")\n)\nmich_cty_tiger_general_plot\n\n\n\n\n\nFigure 5.12: Comparison of TIGER/Line and cartographic boundary files for Michigan counties\n\n\n\n\nAs the cartographic boundary file shows islands and a distinct coastline, it will be a better option for most thematic mapping projects.\n\nWhen general = TRUE in RcensusPkg’s tiger related functions you can also set the resol = parameter to three different levels of resolution, “500k” (the default), “5m”, and “20m”.\n\n\n\nNo scripts for this section\n\n\n\n\nMap the tracts of Tarrant County, Texas across years 1990, 2000, 2010, 2020.\n\n\nyears &lt;- c(1990, 2000, 2010, 2020)\nset_crs &lt;- c(4326, 4326, 4326, 4326)\nvars &lt;- c(\"CO\", \"COUNTY\", \"COUNTY\", \"COUNTYFP\")\ntx_tarrant_fips &lt;- usmap::fips(state = \"texas\", county = \"tarrant\")\ntx_fips &lt;- substr(tx_tarrant_fips, 1, 2)\ntarrant_fips &lt;- substr(tx_tarrant_fips, 3, 5)\n\nbuild_plot &lt;- function(id, years, set_crs, vars, state_fips, county_fips, output_dir){\n  tx_tracts_sf &lt;-  RcensusPkg::tiger_tracts_sf(\n    state = state_fips,\n    vintage = years[[id]],\n    general = T,\n    set_crs = set_crs[[id]],\n    output_dir = output_dir,\n    sf_info = F\n  )\n\n  col_name &lt;- vars[[id]]\n  tarrant_tracts_sf &lt;- data.table::as.data.table(tx_tracts_sf) %&gt;%\n    .[.[[col_name]] == county_fips, ] %&gt;%\n    sf::st_as_sf(.)\n\n  tarrant_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n    sf = tarrant_tracts_sf,\n    hide_x_tics = T,\n    hide_y_tics = T\n  )\n  \n  title &lt;- paste0(years[[id]], \": \", nrow(tarrant_tracts_sf), \" tracts\")\n  \n  return(list(title = title, plot = tarrant_tracts_plot))\n}\n\nplot_lst &lt;-  1:4 |&gt;\n  purrr::map(\\(x) build_plot(\n    x,\n    years = years,\n    set_crs = set_crs,\n    vars = vars,\n    state_fips = tx_fips,\n    county_fips = tarrant_fips,\n    output_dir = output_dir\n  ))\nplot_flat_lst &lt;- purrr::flatten(plot_lst)\ntitles_lst &lt;- purrr::keep(plot_flat_lst, names(plot_flat_lst) == \"title\")\nplots_lst &lt;- purrr::keep(plot_flat_lst, names(plot_flat_lst) == \"plot\")\n\nlayout &lt;- list(\n  plots = plots_lst,\n  rows = c(1, 1, 2, 2),\n  cols = c(1, 2, 1, 2)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = as.vector(titles_lst)\n)\n\n\n\n\nFigure 5.13: Tarrant County, TX Census tracts, 1990-2020\n\n\n\n\n\n\n\nNo scripts for this section",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html#coordinate-reference-systems",
    "href": "5_census_geographic_data.html#coordinate-reference-systems",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "For geographic data to appropriately represent locations in mapping and spatial analysis, they must be referenced to some model of the Earth’s surface correctly. In simpler terms - a data model of the state of Florida should represent where Florida is actually located relative to other locations.\n\n\nRetrieve the default coordinate reference system (i.e. crs NAD83) of Florida counties simple feature using sf::st_crs().\n\n\nflorida_fips &lt;- usmap::fips(state=\"florida\")\nflorida_express &lt;- expression(STATEFP == florida_fips)\nflorida_counties_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = florida_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nprint(sf::st_crs(florida_counties_sf))\n\nCoordinate Reference System:\n  User input: NAD83 \n  wkt:\nGEOGCRS[\"NAD83\",\n    DATUM[\"North American Datum 1983\",\n        ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4269]]\n\n\n\nAll Census Bureau datasets are stored in the “NAD83” geographic coordinate system, which refers to the North American Datum of 1983.\n\n\n\n\nThousands of projected CRS’s exist - each that are appropriate for minimizing data distortion in a specific part of the world. … the crsuggest package (K. Walker 2021a) can help narrow down the choices.\n\n\nShow the suggestions for florida_counties_sf.\n\n\nflorida_counties_suggest_df &lt;- crsuggest::suggest_crs(florida_counties_sf)\n\n\n\n\n\nTable 5.1: Suggested coordinate reference systems for Florida\n\n\ncrs_code\ncrs_name\ncrs_type\ncrs_gcs\ncrs_units\n\n\n\n\n6439\nNAD83(2011) / Florida GDL Albers\nprojected\n6318\nm\n\n\n3513\nNAD83(NSRS2007) / Florida GDL Albers\nprojected\n4759\nm\n\n\n3087\nNAD83(HARN) / Florida GDL Albers\nprojected\n4152\nm\n\n\n3086\nNAD83 / Florida GDL Albers\nprojected\n4269\nm\n\n\n6443\nNAD83(2011) / Florida West (ftUS)\nprojected\n6318\nus-ft\n\n\n6442\nNAD83(2011) / Florida West\nprojected\n6318\nm\n\n\n3517\nNAD83(NSRS2007) / Florida West (ftUS)\nprojected\n4759\nus-ft\n\n\n3516\nNAD83(NSRS2007) / Florida West\nprojected\n4759\nm\n\n\n2882\nNAD83(HARN) / Florida West (ftUS)\nprojected\n4152\nus-ft\n\n\n2778\nNAD83(HARN) / Florida West\nprojected\n4152\nm\n\n\n\n\n\n\n\n\n\nThe “best choice” is the CRS “Florida GDL Albers” coordinate reference system, which is available with four different variations on the NAD1983 datum.\n\nIt appears that “NAD83(HARN) / Florida GDL Albers” with crs code 3087 is the best choice.\n\nTransform the crs geometries of florida_counties_sf to 3087 (i.e. NAD83(HARN)) using sf::st_transform().\n\n\nflorida_counties_3087_sf &lt;- sf::st_transform(florida_counties_sf, crs = 3087)\nhead(florida_counties_3087_sf)\n\nSimple feature collection with 6 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 83061.87 ymin: 262722.3 xmax: 793982.6 ymax: 780618.1\nProjected CRS: NAD83(HARN) / Florida GDL Albers\n  STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID       NAME          NAMELSAD\n1      12      119 00295740 0500000US12119 12119     Sumter     Sumter County\n2      12      069 00308551 0500000US12069 12069       Lake       Lake County\n3      12      079 00295731 0500000US12079 12079    Madison    Madison County\n4      12      127 00306921 0500000US12127 12127    Volusia    Volusia County\n5      12      099 00295761 0500000US12099 12099 Palm Beach Palm Beach County\n6      12      113 00306914 0500000US12113 12113 Santa Rosa Santa Rosa County\n  STUSPS STATE_NAME LSAD      ALAND     AWATER                       geometry\n1     FL    Florida   06 1442967719   58773420 MULTIPOLYGON (((564246.8 55...\n2     FL    Florida   06 2464507354  531492923 MULTIPOLYGON (((599838.7 49...\n3     FL    Florida   06 1804001483   49634046 MULTIPOLYGON (((417249.1 70...\n4     FL    Florida   06 2852384800  857611281 MULTIPOLYGON (((624847.1 59...\n5     FL    Florida   06 5087510105 1084950939 MULTIPOLYGON (((709391.4 29...\n6     FL    Florida   06 2622106399  543294939 MULTIPOLYGON (((83268.36 76...\n\n\n\nNote that the coordinates for the bounding box and the feature geometry have changed to much larger numbers; they are expressed in meters rather than the decimal degrees used by the NAD83 geographic coordinate system.\n\n\n\n\n\nUse ggplot2::coord_sf() to modify florida_counties_sf with crs 3087 without having to transform it and map with datum = 3087.\n\n\nRspatialPkg::get_geom_sf(florida_counties_sf) +\n    ggplot2::coord_sf(crs = 3087)\n\n\n\n\n\nFigure 5.14: ggplot2 map with CRS specified\n\n\n\n\nWhile the data are displayed on the plot in the requested coordinate system, the underlying .graticule (the grid lines and axis tick labels) default to longitude/latitude. To show the coordinates of the projected coordinate reference system, the argument datum can be used which controls the gridlines.\n\n\nRspatialPkg::get_geom_sf(florida_counties_sf) +\n    ggplot2::coord_sf(crs = 3087, datum = 3087)\n\n\n\n\n\nFigure 5.15: ggplot2 map with modified graticule",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "5_census_geographic_data.html#working-with-geometries",
    "href": "5_census_geographic_data.html#working-with-geometries",
    "title": "5 Census geographic data and applications in R",
    "section": "",
    "text": "Show the default geometries for the US states from the Census Bureau.\n\n\nus_states_sf &lt;- RcensusPkg::tiger_states_sf(\n  general = T, \n  resol = \"20m\", \n  sf_info = F,\n  output_dir = output_dir)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\nRspatialPkg::get_geom_sf(\n  sf = us_states_sf,\n  panel_border_color = NA,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\"\n)\n\n\n\n\n\nFigure 5.16: Default CRS for US states\n\n\n\n\nThe plot does not work well, in part because the Aleutian Islands in far west Alaska cross the 180 degree line of longitude and are plotted on the opposite side of the map.\n\n\nUse a coordinate reference appropriate for the United States such as the continental US Albers Equal Area projection (“ESRI:102003”).\n\n\nRspatialPkg::get_geom_sf(\n  sf = us_states_sf,\n  panel_border_color = NA,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\"\n) +\nggplot2::coord_sf(crs = \"ESRI:102003\")\n\n\n\n\n\nFigure 5.17: Equal-area CRS for US states\n\n\n\n\nWhile this representation puts all territories in their appropriate locations, it is clearly not appropriate for Alaska, Hawaii, and Puerto Rico which appear distorted. This coordinate reference system is also not ideal for comparative mapping of states given the large amount of blank space between the states on the map.\n\n\nShow the states representation using RcensusPkg::plot_us_data().\n\n\nRcensusPkg::plot_us_data(\n  output_dir = output_dir,\n  title = \"A Default Mapping of US States\"\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\n\n\nFigure 5.19: US states using RcensusPkg::plot_us_data()\n\n\n\n\n\n\n\n\nConvert and map the polygon geometries of major Texas places to points.\n\nGet the Texas state boundary lines:\n\ntexas_fips &lt;- usmap::fips(state = \"texas\")\ntexas_express &lt;- expression(STATEFP == texas_fips)\ntexas_sf &lt;- RcensusPkg::tiger_states_sf(\n  express = texas_express,\n  general = T,\n  transform_crs = 6580,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\nGet the Texas major places:\n\ntexas_fips &lt;- usmap::fips(state = \"texas\")\nmajor_places &lt;- c(\"Dallas\",\"Fort Worth\",\"Houston\",\"Austin\",\"San Antonio\",\"El Paso\")\ntexas_places_express &lt;- expression(NAME %in% major_places)\ntexas_places_sf &lt;- RcensusPkg::tiger_places_sf(\n  state = texas_fips, \n  general = T,\n  express = texas_places_express,\n  transform_crs = 6580, \n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, NAME := ifelse(NAME == \"Fort Worth\", \"Dallas-Fort Worth\", NAME)] %&gt;% \n  sf::st_as_sf(.)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = texas_sf,\n  sf_fill = \"yellow\",\n  sf_stroke = 2.0,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_sf,\n  sf_fill = \"red\",\n  sf_color = \"yellow\",\n  adding = T\n)  \n\n\n\n\nFigure 5.20: Large cities in Texas\n\n\n\n\nConvert the city polygon geometries to centroid points using sf::st_centroid():\n\ntexas_places_centroids_sf &lt;- sf::st_centroid(texas_places_sf)\n\nPlot the centroid points over the outline of Texas and label the cities.\n\nRspatialPkg::get_geom_sf(\n  sf = texas_sf,\n  sf_fill = \"yellow\",\n  sf_stroke = 2.0,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_centroids_sf,\n  sf_fill = \"red\",\n  sf_color = \"red\",\n  sf_size = 3,\n  adding = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = texas_places_centroids_sf,\n  aes_text = \"NAME\",\n  text_fontface = \"bold.italic\",\n  text_check_overlap = T,\n  # text_nudge_y = -120.3,\n  # text_nudge_x = 20,\n  adding = T\n)\n\n\n\n\nFigure 5.21: Large cities in Texas represented as points\n\n\n\n\n\n\n\n\nSeparate the MULTIPOLYGON geometry of Lee County, Florida into 4 separate POLYGON parts.\n\nGet the MULTIPOLYGON geometry of Lee County, Florida and map it:\n\nflorida_lee_fips &lt;- usmap::fips(state = \"florida\", county = \"lee\")\nflorida_fips &lt;- substr(florida_lee_fips, 1,2)\nlee_fips &lt;- substr(florida_lee_fips, 3, 5)\nlee_county_express &lt;- expression(STATEFP == florida_fips & COUNTYFP == lee_fips)\nlee_county_sf &lt;- RcensusPkg::tiger_counties_sf(\n  express = lee_county_express,\n  general = T,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nWarning in file.remove(f): cannot remove file\n'D:/Code_R/published/Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data/shapefiles/tl_2020_us_county.zip',\nreason 'Permission denied'\n\n\n\nRspatialPkg::get_geom_sf(\n  sf = lee_county_sf,\n  sf_fill = \"#FF8C19\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n)\n\n\n\n\n\nFigure 5.22: Lee County, Florida\n\n\n\nThe Lee County polygon has four distinct parts or non-contiguous areas as shown in the above plot.\n\nUsing sf::st_cast() “cast” Lee County as a POLYGON object which will create a separate row for each non-contiguous area.\n\n\nlee_singlepart_sf &lt;- sf::st_cast(lee_county_sf, \"POLYGON\")\nlee_singlepart_sf\n\nSimple feature collection with 4 features and 12 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -179.1467 ymin: -14.5487 xmax: 179.7785 ymax: 71.38782\nGeodetic CRS:  NAD83\n    STATEFP COUNTYFP COUNTYNS       AFFGEOID GEOID NAME   NAMELSAD STUSPS\n1        12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.1      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.2      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n1.3      12      071 00295758 0500000US12071 12071  Lee Lee County     FL\n    STATE_NAME LSAD      ALAND     AWATER                       geometry\n1      Florida   06 2022803068 1900583561 POLYGON ((-82.18358 26.6950...\n1.1    Florida   06 2022803068 1900583561 POLYGON ((-82.22407 26.6029...\n1.2    Florida   06 2022803068 1900583561 POLYGON ((-82.26248 26.6839...\n1.3    Florida   06 2022803068 1900583561 POLYGON ((-82.27005 26.7895...\n\n\nPlot the Sanibel Island, Florida piece:\n\nRspatialPkg::get_geom_sf(\n sf = sf::st_as_sf(lee_singlepart_sf[2, ]),\n sf_fill = \"#FF8C19\",\n hide_x_tics = T,\n hide_y_tics = T,\n panel_color = \"white\",\n panel_border_color = \"white\"\n) + \n coord_sf(crs = 3087, datum = 3087)\n\n\n\n\n\nFigure 5.23: Sanibel Island, Florida",
    "crumbs": [
      "5 Census geographic data and applications in R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html",
    "href": "6_mapping_census_data_with_R.html",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(data.table)\nlibrary(devtools)\nlibrary(sf)\nlibrary(tmap)\nlibrary(leaflet)\nlibrary(mapview)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(htmlwidgets)\nlibrary(patchwork)\nlibrary(scales)\nlibrary(magrittr)\nlibrary(kableExtra)\nlibrary(httr)\nlibrary(here)\nlibrary(RColorBrewer)\n\n\nLoad the packages ‘deandevl/RcensusPkg’, ‘deandevl/RplotterPkg’ and ‘deandevl/RspatialPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\ndevtools::install_github('deandevl/RplotterPkg')\ndevtools::install_github('deandevl/RspatialPkg')\n\n\nEstablish an output directory for all downloaded shapefiles. Set tmap to interactive mode.\n\n\noutput_dir &lt;- file.path(here::here(), \"shapefiles\")\n\n\n\n\nGet the tract based median household income (“B19013_001E”) for the District of Columbia and join it as a mapping fill aesthetic for each of the geometries of the DC tracts.\n\nGet the DC median household income by tract for 2020:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_B19013_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B19013_001E\",\n  region = \"tract\",\n  regionin = paste0(\"state:\", dc_fips)\n) %&gt;%\n  .[B19013_001E != -666666666, ] %&gt;%\n  data.table::setnames(., old = \"B19013_001E\", new = \"median_income\") %&gt;% \n  .[, median_income := as.numeric(median_income)]\n\nJoin the data dc_B19013_dt with DC’s simple feature tract geometries:\n\ndc_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  output_dir = output_dir,\n  state = dc_fips,\n  datafile = dc_B19013_dt,\n  datafile_key = \"GEOID\",\n  sf_info = F\n)\n\nMap the median household incomes as the fill aesthetic for the DC tract geometries of the simple feature dataframe dc_tracts_sf:\n\nRspatialPkg::get_geom_sf(\n  sf = dc_tracts_sf,\n  aes_fill = \"median_income\",\n  subtitle = \"Median Income Across District of Columbia Tracts\",\n  legend_key_width = 0.75\n) +\nggplot2::scale_fill_gradientn(\n  colors = RColorBrewer::brewer.pal(n = 9, name = \"Greens\"),\n  n.breaks = 8\n)\n\n\n\n\nFigure 6.1: Base R plot of median household income by tract in DC\n\n\n\n\n\n\n\n\n\n\nGet the median age by state and map it across state geometries.\n\nGet the median age for each state (i.e. “B01002_001E”):\n\nstates_median_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01002_001E\",\n  region = \"state\"\n) %&gt;%\n  data.table::setnames(., old = \"B01002_001E\", new = \"median_age\") %&gt;%\n  .[, median_age := as.numeric(median_age)]\n\n\nRcensusPkg::plot_us_data(\n  df = states_median_age_dt,\n  states_col = \"NAME\",\n  value_col = \"median_age\",\n  scale_limits = c(30, 50),\n  scale_breaks = c(30,35,40,45,50),\n  output_dir = output_dir\n)\n\n\n\n\nFigure 6.3: US choropleth map with ggplot2 defaults\n\n\n\n\n\n\n\n\nChange the color palette and reverse it so that darker colors represent older areas.\n\n\nRcensusPkg::plot_us_data(\n  df = states_median_age_dt,\n  states_col = \"NAME\",\n  value_col = \"median_age\",\n  output_dir = output_dir,\n  scale_breaks = seq(30,50,5),\n  scale_colors = RColorBrewer::brewer.pal(8,\"RdPu\"),\n  scale_limits = c(30,50),\n  scale_labels = c(\"Age:30\",\"Age:35\",\"Age:40\",\"Age:45\",\"Age:50\")\n)\n\n\n\n\nFigure 6.4: Styled choropleth of US median age with ggplot2\n\n\n\n\n\n\n\n\n\nEstablish some Census data.\n\nObtain race and ethnicity population data from the 2020 decennial US Census. Include non-Hispanic white, non-Hispanic Black, Asian, and Hispanic populations for Census tracts in Hennepin County, Minnesota:\n\nminn_henn_fips &lt;- usmap::fips(state = \"minnesota\", county = \"hennepin\")\nminn_fips &lt;-  substr(minn_henn_fips, 1, 2)\nhenn_cty_fips &lt;- substr(minn_henn_fips, 3, 5)\nvars &lt;- c(\"P2_001N\", \"P2_002N\", \"P2_005N\", \"P2_006N\", \"P2_007N\", \"P2_008N\")\n#var_names &lt;- c(\"summary_value\", \"Hispanic\", \"White\", \"Black\", \"Native\", \"Asian\")\n\nhennepin_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = vars,\n  region = \"tract\",\n  regionin = paste0(\"state:\", minn_fips, \"+county:\", henn_cty_fips)\n) %&gt;% \n  .[, .(NAME, GEOID, P2_001N, P2_002N, P2_005N, P2_006N, P2_007N, P2_008N)]\n\nReshape the race/ethnic estimates and summary(“P2_001N”) to the long form:\n\nhennepin_race_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = hennepin_race_dt,\n  measure_v = c(\"P2_002N\", \"P2_005N\", \"P2_006N\", \"P2_007N\", \"P2_008N\"),\n  value_name = \"value\"\n) %&gt;% \n  .[, value := as.numeric(value)]\n\nsummary_hennepin_race_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = hennepin_race_dt,\n  measure_v = \"P2_001N\",\n  value_name = \"summary_value\"\n) %&gt;% \n  .[, summary_value := as.numeric(summary_value)] %&gt;% \n  .[, .(GEOID,summary_value)]\n\nPerform some simple wrangling:\n\nhennepin_race_long_dt &lt;- hennepin_race_long_dt %&gt;% \n  .[, variable := fcase(\n    variable == \"P2_002N\",\"Hispanic\",\n    variable == \"P2_005N\",\"White\",\n    variable == \"P2_006N\",\"Black\",\n    variable == \"P2_007N\",\"Native\",\n    variable == \"P2_008N\",\"Asian\"\n  )] \n\nPerform a join between hennepin_race_long_dt and summary_hennepin_race_long_dt and compute the percentages:\n\ndata.table::setkeyv(hennepin_race_long_dt,cols = \"GEOID\")\ndata.table::setkeyv(summary_hennepin_race_long_dt, cols = \"GEOID\")\nhennepin_race_long_dt &lt;- hennepin_race_long_dt[summary_hennepin_race_long_dt] %&gt;% \n  .[, percent := 100 * value/summary_value]\n\nGet the geometries for the tracts in Hennepin County, Minnesota and join it with hennepin_race_long_dt:\n\nhennepin_race_express &lt;- expression(COUNTYFP == henn_cty_fips)\nhennepin_race_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = minn_fips,\n  general = T,\n  express = hennepin_race_express,\n  datafile = hennepin_race_long_dt,\n  datafile_key = \"GEOID\",\n  sf_info = T,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(GEOID,NAME,variable,value,summary_value,percent,geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nReading layer `cb_2020_27_tract_500k' from data source \n  `D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\shapefiles' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1502 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -97.23921 ymin: 43.49937 xmax: -89.49398 ymax: 49.38436\nGeodetic CRS:  NAD83\n\n\n\n\n\n\nTable 6.1: Race and ethnicity in Hennepin County, MN\n\n\nGEOID\nNAME\nvariable\nvalue\nsummary_value\npercent\n\n\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nHispanic\n363\n3351\n10.8325873\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nWhite\n1097\n3351\n32.7364966\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nBlack\n970\n3351\n28.9465831\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nNative\n29\n3351\n0.8654133\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nAsian\n635\n3351\n18.9495673\n\n\n27053000102\nCensus Tract 1.02, Hennepin County, Minnesota\nHispanic\n543\n5178\n10.4866744\n\n\n\n\n\n\n\n\n\n\n\nBefore using tmap, we will filter the shapefile hennepin_race_sf on the black race and produce a static choropleth ggplot2 map of tract percentages in Hennepin, County.\n\n\nhennepin_black_sf &lt;- data.table::as.data.table(hennepin_race_sf) %&gt;%\n  .[variable == \"Black\", ] %&gt;%\n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = hennepin_black_sf,\n  aes_fill = \"percent\",\n  subtitle = \"Percentage of Blacks in Hennepin County, MN tracts\",\n  legend_key_width = 0.75,\n  scale_breaks = seq(0,100,10),\n  scale_limits = c(0,100),\n  scale_colors = RColorBrewer::brewer.pal(n = 9, name = \"Oranges\"),\n  hide_x_tics = F,\n  hide_y_tics = F,\n  panel_color = \"white\"\n) \n\n\n\n\nFigure 6.5a: Tract percentages in Hennepin, County with ggplot2\n\n\n\n\n\nUse tmap’s tm_shape() function to visualize the polygon layer of hennepin_black_sf.\n\nDefine the bounding box to use for hennepin_black_sf:\n\nhennepin_bbox &lt;-  sf::st_bbox(c(xmin = -93.8, xmax = -93.18, ymax = 45.25, ymin = 44.77))\n\n\ntmap::tmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons() \n\n\n\n\nFigure 6.5: Basic polygon plot with tmap\n\n\n\n# tmap::qtm(hennepin_black_sf) +\n#   tmap::tm_grid()\n\n\nUse tmap to create an interactive choropleth map by assigning col = “percent”.\n\n\ntmap::tmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap::tm_shape(hennepin_black_sf) +\n  tmap::tm_polygons(col = \"percent\") \n\n\n\nFigure 6.6: Basic choropleth with tmap\n\n\n\nThe default classification scheme used by tm_fill() is “pretty”, which identifies clean-looking intervals in the data based on the data range. In this example, data classes change every 20 percent. However, this approach will always be sensitive to the distribution of data values.\n\n\nTake a look at the distribution of “percent” with a histogram setting bin breaks at 10 from 0 to 80.\n\n\nRplotterPkg::create_histogram_plot(\n  df = hennepin_black_sf,\n  aes_x = \"percent\",\n  title = \"Histogram of hennepin_black_sf$percent\",\n  x_title = \"black_tracts$percent\",\n  y_title = \"Frequency\",\n  bin_breaks = seq(0,80,10),\n  bar_fill = \"green\",\n)\n\n\n\n\nFigure 6.7: Base R histogram of percent Black by Census tract\n\n\n\n\n\nAs the histogram illustrates, most Census tracts in Hennepin County have Black populations below 20 percent.\n\n\nUse quantiles for classification of “percent” where each bin will contain the same number of tracts.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"quantile\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"Percent Black\\nby Census tract\"\n  ) +\n  tmap::tm_layout(\n    frame = F,\n    legend.outside = T\n  )\n\n\n\n\nFigure 6.8: tmap choropleth with options\n\n\n\n\n\n…quantiles reveals additional neighborhood-level heterogeneity in Hennepin County’s Black population in suburban areas. However, it does mask some heterogenity in Minneapolis as the top class now includes values ranging from 21 percent to 88 percent.\n\n\nUse Jenks natural-breaks method, which uses an algorithm to identify meaningful breaks in the data for bin boundaries.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    legend.hist = TRUE\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    legend.outside= T,\n    legend.frame = F,\n    legend.hist.height = .25,\n    legend.hist.width = .8\n  ) \n\n\n\n\nFigure 6.9: Styled tmap choropleth\n\n\n\n\n\n\n\n\nAdd additional tmap based reference elements to the above plot.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    alpha = 0.7\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    frame = F,\n    legend.outside = T\n  ) +\n  tmap::tm_scale_bar(\n    position = c(\"left\",\"bottom\")\n  ) +\n  tmap::tm_compass(\n    position = c(\"right\",\"top\")\n  ) +\n  tmap::tm_credits(\n    \"(c) RDean \",\n    bg.color = \"white\",\n    position = c(\"RIGHT\",\"BOTTOM\")\n  )\n\n\n\n\nFigure 6.10: Map of percent Black in Hennepin County with reference elements\n\n\n\n\n\n\n\nSection skipped\n\n\n\n\n\n\nGraduated symbol maps use shapes referenced to geographi units that are sized relative to a data attribute.\n\n\nUse tmap’s tm_bubbles() function to create a graduated symbol map of the “value” (i.e. the population across tracts) from black_tracts_sf.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tm_polygons() +\n  tm_bubbles(\n    size = \"value\",\n    alpha = 0.5,\n    col = \"navy\",\n    title.size = \"Non-Hispanic Black - 2020 US Census\"\n  ) +\n  tm_layout(\n    legend.outside = T,\n    legend.outside.position = \"bottom\"\n  )\n\n\n\n\nFigure 6.15: Graduated symbols with tmap\n\n\n\n\n\n\n\n\nComplete a faceted map showing the percentages percent across all ethnic/race groups (‘variable’) from minn_tracts_sf.\n\n\ntmap::tmap_mode(\"plot\") +\ntmap::tm_shape(hennepin_race_sf) +\n  tmap::tm_facets(\n    by = \"variable\",\n    scale.factor = 4\n  ) +\n  tmap::tm_fill(\n    col = \"percent\",\n    style = \"quantile\",\n    n = 6,\n    palette = \"Blues\",\n    title = \"Percent (2020 US Census)\"\n  ) +\n  tmap::tm_layout(\n    bg.color = \"grey\",\n    legend.position = c(-0.7, 0.15),\n    panel.label.bg.color = \"white\"\n  )\n\n\n\n\nFigure 6.16: Faceted map with tmap\n\n\n\n\n\n\n\n\nUse the RspatialPkg::dot_density_sf() function to produce a dot-density map of hennepin_race_sf.\n\nGet the dots for all the races in Hennepin County:\n\nhennepin_dots_sf &lt;- RspatialPkg::dot_density_sf(\n  sf = hennepin_race_sf,\n  dot_col = \"value\",\n  cases_per_dot = 100,\n  group_col = \"variable\"\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = \"variable\", new = \"Race\") %&gt;% \n  sf::st_as_sf(.)\n\nPlot both the tract geometries for Hennepin County layered under the POINT geometries from RspatialPkg::dot_density_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = hennepin_race_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  sf_fill = \"white\",\n  panel_border_color = \"white\",\n  title = \"Race/ethnicity, 2020 US Census\",\n  subtitle = \"1 dot = 100 people\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = hennepin_dots_sf,\n  aes_fill = \"Race\",\n  sf_size = 2,\n  adding = T\n)  \n\n\n\n\nFigure 6.17: Dot-density map with RspatiaPkg::get_geom_sf()\n\n\n\n\n\n\n\n\n\n\n\nData source: https://cookpolitical.com/2020-national-popular-vote-tracker\n\nRead data from the Cook Political Report on the 2020 US Presidential election results.\n\n\nelection_data_path &lt;- file.path(here(), \"data\", \"us_vote_2020.csv\")\nvote2020_dt &lt;- data.table::fread(file = election_data_path)\nnames(vote2020_dt)\n\n [1] \"state\"            \"called\"           \"final\"            \"dem_votes\"       \n [5] \"rep_votes\"        \"other_votes\"      \"dem_percent\"      \"rep_percent\"     \n [9] \"other_percent\"    \"dem_this_margin\"  \"margin_shift\"     \"vote_change\"     \n[13] \"stateid\"          \"EV\"               \"X\"                \"Y\"               \n[17] \"State_num\"        \"Center_X\"         \"Center_Y\"         \"V20\"             \n[21] \"2016 Margin\"      \"Total 2016 Votes\"\n\n\n\nMap the election “called” column data across the US state geometries RcensusPkg::plot_us_data().\n\nChange the name of column “state” to “NAME” and set the “called” column as a factor:\n\nvote2020_dt[, `:=`(called = as.factor(called))] %&gt;%\n  data.table::setnames(old = \"called\", new = \"Party\")\n\n\nRcensusPkg::plot_us_data(\n  df = vote2020_dt,\n  states_col = \"state\",\n  value_col = \"Party\",\n  output_dir = output_dir,\n  scale_limits = c(\"R\",\"D\"),\n  scale_breaks = c(\"R\",\"D\"),\n  scale_values = c(\"red\",\"blue\"),\n  sf_color = \"white\"\n)\n\n\n\n\nFigure 6.18: Map of the 2020 US presidential election results with ggplot2\n\n\n\n\n\n\n\n\nRead in the Internal Revenue Service’s Statistics of Income(SOI) data and associate its ZCTAs with ZCTAs for geographies near Boston, MA.\n\nRead in the SOI data and select variables N09400 (number of tax returns with self-employment tax) and N1 (the total number of returns):\n\nself_employment_dt &lt;- data.table::fread(\"https://www.irs.gov/pub/irs-soi/18zpallnoagi.csv\") %&gt;% \n  data.table::setnames(old = c(\"N09400\", \"N1\"), new = c(\"self_emp\", \"total\")) %&gt;% \n  .[, .(ZIPCODE = as.character(ZIPCODE),  self_emp, total)]\n\nJoin irs_data_dt dataframe with the Census Bureau’s tiger zctas geometries based on “ZIPCODE” values that start with “021”, “022”, or “024” which are near Boston, MA.\nGather the tiger ztas geometric data:\n\nboston_zctas_sf = RcensusPkg::tiger_zctas_sf(\n  output_dir = output_dir,\n  vintage = 2018,\n  general = TRUE,\n  sf_info = FALSE\n) %&gt;% \ndata.table::as.data.table(.) %&gt;% \n.[startsWith(GEOID10, \"021\") | startsWith(GEOID10, \"022\") | startsWith(GEOID10, \"024\"),] %&gt;% \n.[, .(GEOID10 = as.character(as.numeric(GEOID10)), geometry)] %&gt;% \nsf::st_sf(.)  \n\nShow the mapping of the zcta geometric boundaries using RspatialPkg::get_geom_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = boston_zctas_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  sf_fill = \"purple\",\n  sf_color = \"white\",\n  title = \"ZCTAs in the Boston, MA area, 2018\"\n  \n)\n\n\n\n\nFigure 6.19a: ZCTAs in the Boston, MA area\n\n\n\n\nShow the mapping of the zcta geometric boundaries using mapview:\n\nmapview::mapview(boston_zctas_sf$geometry)\n\n\n\nFigure 6.19: ZCTAs in the Boston, MA area\n\n\nJoin the geometric data with the self_employment_dt data.table:\n\nboston_zctas_dt &lt;- boston_zctas_sf %&gt;% \n  data.table::as.data.table(.)\n\ndata.table::setkeyv(boston_zctas_dt,cols = \"GEOID10\")\ndata.table::setkeyv(self_employment_dt, cols = \"ZIPCODE\")\n\nboston_se_data_sf &lt;- self_employment_dt[boston_zctas_dt] %&gt;% \n  sf::st_as_sf(.)\n\nAdd a new percentage column:\n\nboston_se_data_sf &lt;- boston_se_data_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, `:=`(pct_self_emp = (self_emp/total)*100)] %&gt;% \n  sf::st_sf(.)\n\n\n\n\n\nTable 6.2: Self-employment percentages by ZCTA in the Boston, MA area\n\n\nZIPCODE\nself_emp\ntotal\npct_self_emp\ngeometry\n\n\n\n\n2108\n540\n2610\n20.689655\nMULTIPOLYGON (((-71.07522 4...\n\n\n2109\n430\n2750\n15.636364\nMULTIPOLYGON (((-71.05979 4...\n\n\n2110\n490\n2450\n20.000000\nMULTIPOLYGON (((-71.06048 4...\n\n\n2111\n510\n3880\n13.144330\nMULTIPOLYGON (((-71.06342 4...\n\n\n2113\n420\n4570\n9.190372\nMULTIPOLYGON (((-71.05853 4...\n\n\n2114\n1070\n8220\n13.017032\nMULTIPOLYGON (((-71.07681 4...\n\n\n\n\n\n\n\n\nShow the choropleth map of the percentages using RspatialPkg::get_geom_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = boston_se_data_sf,\n  aes_fill = \"pct_self_emp\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  title = \"% self-employed\",\n  subtitle = \"2018 IRS SOI data\"\n)\n\n\n\n\nFigure 6.20a: Simple choropleth of self-employment in Boston using RspatialPkg::get_geom_sf()\n\n\n\n\nShow the choropleth map of the percentages using tmap:\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(boston_se_data_sf, projection = 26918) +\n  tmap::tm_fill(\n    col = \"pct_self_emp\",\n    palette = \"Purples\",\n    title = \"% self-employed, \\n2018 IRS SOI data\"\n  )\n\n\n\n\nFigure 6.20: Simple choropleth of self-employment in Boston\n\n\n\n\nShow a graduated symbol map of the self employment values self_emp:\n\nbbox &lt;-  sf::st_bbox(c(xmin = -71.0, xmax = -71.2, ymax = 42.5, ymin = 42.14))\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(boston_se_data_sf, bbox = bbox) +\n  tm_polygons() +\n  tm_bubbles(\n    size = \"self_emp\",\n    alpha = 0.5,\n    col = \"navy\",\n    title.size = \"Self-employed filers, \\n2020 IRS SOI data\"\n  ) +\n  tm_layout(\n    legend.outside = F,\n    legend.outside.position = \"bottom-left\"\n  )\n\n\n\n\nFigure 6.21: Graduated symbol map of self-employment by ZCTA in Boston\n\n\n\n\n\n\n\n\n\n\n\nGet the percentage of the population aged 25 and up with a bachelor’s degree or higher from the “acs/acs5/profile” dataset. Join the data with the geometry of Census tract in Dallas County, Texas.\n\nGet a description of the variable “DP02_0068P”:\n\nDP02_0068P_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  filter_name_str = \"DP02_0068P\"\n)\n\n\n\n\n\nDescriptions of DP02_0068P from acs/acs5/profile, 2020\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068PE\nPercent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nfloat\n\n\n\n\n\n\n\n\nGet the fips numbers for Texas and Dallas:\n\ndallas_tx_fips &lt;- usmap::fips(state = \"texas\", county = \"dallas\")\ndallas_cty_fips &lt;- substr(dallas_tx_fips, 3, 5)\ntexas_fips &lt;- substr(dallas_tx_fips,1,2)\n\nGet the Census data:\n\ndallas_bachelors_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  vars = \"DP02_0068PE\",\n  region = \"tract\",\n  regionin = paste0(\"state:\", texas_fips, \"+county:\", dallas_cty_fips)\n) %&gt;%\n  data.table::setnames(., old = \"DP02_0068PE\", new = \"estimate\") %&gt;%\n  .[, estimate := as.numeric(estimate)] %&gt;%\n  .[estimate &gt; 0,]\n\nGet the geographies data and join the Census data percentages dallas_bachelors_dt:\n\nexpress &lt;- expression(COUNTYFP == dallas_cty_fips)\ndallas_bachelors_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = texas_fips,\n  general = T,\n  express = express,\n  datafile = dallas_bachelors_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  sf_info = F\n) %&gt;% \n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")\n\n\nProduce a Leaflet map of the estimate data using mapview.\n\nNote that the mapview() function includes a parameter zcol that takes a column in the dataset as an argument, and visualizes that column with an interactive choropleth map.\n\ndallas_bachelors_mv &lt;- mapview::mapView(dallas_bachelors_sf, zcol = \"estimate\")\ndallas_bachelors_mv@map %&gt;% \n  leaflet.extras::addFullscreenControl()\n\n\n\nFigure 6.22: Interactive mapview choropleth\n\n\n\nProduce a Leaflet map of the estimate data using tmap.\n\nTo convert all subsequent tmap maps to interactive Leaflet maps, add the function tmap_mode(\"view\") prior to building the map(s) with the tm_shape() function. Also, tmap_mode(\"plot\"), is the default mode and produces a non-interactive map.\n\ntmap::tmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap::tm_shape(dallas_bachelors_sf) +\n  tmap::tm_fill(\n    col = \"estimate\",\n    palette = \"magma\",\n    alpha = 0.5\n  )\n\n\n\nFigure 6.23: Interactive map with tmap in view mode\n\n\n\nMap the data using the core leaflet package.\n\nNote the use of leaflet::colorNumeric() for controlling the color palette and using the leaflet::addProviderTiles() function for a grey background that won’t interfere with the choropleth mapping.\n\npal &lt;- leaflet::colorNumeric(\n  palette = \"magma\",\n  domain = dallas_bachelors_sf$estimate\n)\n\nleaflet::leaflet() %&gt;% \nleaflet::addPolygons(\n  data = dallas_bachelors_sf,\n  color = ~pal(estimate),\n  weight = 0.5,\n  smoothFactor = 0.2,\n  fillOpacity = 0.5,\n  label = ~estimate\n) %&gt;% \nleaflet::addLegend(\n  position = \"bottomright\",\n  pal = pal,\n  values = dallas_bachelors_sf$estimate,\n  title = \"% with bachelor's&lt;br/&gt;degree\"\n)\n\n\n\nFigure 6.24: Interactive leaflet map\n\n\n\n\n\n\nLike most interactive mapping platforms, Leaflet uses tiled mapping in the Web Mercator coordinates reference system. Web Mercator works well for tiled web maps that need to fit within rectangular computer screens, and preserves angles at large scales (zoomed in areas) which is useful for local navigation…it grossly distorts the area of geographic features near the poles, making it inappropriate for small-scale thematic mapping of the world or world regions.\n\nIn preparation for small-scale thematic mapping or the world or world regions, get the median house values across the states (B25077_001, acs/acs1, 2019).\n\nhousing_values_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B25077_001E\", \n  region = \"state:*\"\n) %&gt;%  \n  data.table::setnames(old = \"B25077_001E\", new = \"estimate\") %&gt;% \n  .[, estimate := as.numeric(estimate)] \n\nGet the US geometries and join the above housing values:\n\nstates_sf &lt;- RcensusPkg::tiger_states_sf(\n  general = T,\n  resol = \"20m\",\n  datafile = housing_values_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  sf_info = F\n) %&gt;% \n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")\n\n\nUse leaflet to map the median home values by state from the 1-year ACS.\n\nNote that Alaska’s area is grossly distorted relative to the rest of the United States.\nNote the use of leaflet::addMapPane() to control the layering and pane assignment of background and polygons.\n\nus_pal &lt;- leaflet::colorNumeric(\n  palette = \"plasma\",\n  domain = states_sf$estimate\n)\n\nleaflet::leaflet() %&gt;% \nleaflet::addMapPane(\"background_map\", zIndex = 410) %&gt;% \nleaflet::addMapPane(\"polygons\", zIndex = 420) %&gt;% \nleaflet::addPolygons(  \n  data = states_sf,\n  color = ~us_pal(estimate),\n  weight = 0.5,\n  smoothFactor = 0.2,\n  fillOpacity = 0.5,\n  label = ~estimate,\n  options = pathOptions(pane = \"polygons\")\n) %&gt;% \nleaflet::addLegend(\n  position = \"bottomright\",\n  pal = us_pal,\n  values = states_sf$estimate,\n  title = \"Median home values\"\n)\n\n\n\nFigure 6.25: Interactive US map using Web Mercator\n\n\n\nUse the package RcensusPkg::plot_us_data() to produce a static map of median house values across US state geometries. Then use the ggiraph package to convert the static ggplot2 graphics into interactive plots.\n\nDefine interval breaks/labels for variable “estimate” from housing_values_dt:\n\nintervals &lt;- classInt::classIntervals(\n  housing_values_dt$estimate,\n  n = 6,\n  style = \"pretty\"\n)\nbreaks &lt;- intervals$brks\nlabels &lt;- c(\"$100,000\",\"$200,000\",\"$300,000\",\"$400,000\",\"$500,000\",\"$600,000\",\"$700,000\")\n\nShow the ggplot2 based choropleth map of US median housing values:\n\ndata.table::setnames(housing_values_dt, old = \"estimate\", new = \"Median_House_Values\")\n\nhousing_plot_lst &lt;- RcensusPkg::plot_us_data(\n  df = housing_values_dt,\n  states_col = \"NAME\",\n  value_col = \"Median_House_Values\",\n  output_dir = output_dir,\n  scale_breaks = breaks,\n  scale_limits = c(100000, 700000),\n  scale_labels = labels,\n  scale_colors = RColorBrewer::brewer.pal(8,\"YlOrRd\"),\n  display_plot = FALSE\n)\nhousing_plot_lst$plots$us_states\n\n\n\n\n\n\n\n\n\nstates_tooltip_sf &lt;- housing_plot_lst$sf$lower_48 %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, `:=`(tooltip = paste(NAME, Median_House_Values, sep = \": \"))] %&gt;% \n  sf::st_sf(.)\n\ngg &lt;- ggplot(states_tooltip_sf, aes(fill = Median_House_Values)) +\n  ggiraph::geom_sf_interactive(aes(tooltip = tooltip, data_id = NAME), size = 0.1) +\n  scale_fill_viridis_c(option = \"plasma\", labels = scales::label_dollar()) +\n  labs(\n    title = \"Median housing value by State, 2019\",\n    caption = \"Data source: 2019 1-year ACS, US Census Bureau\"\n  ) +\n  theme_void()\n\nggiraph::girafe(ggobj = gg) %&gt;%\n  ggiraph::girafe_options(opts_hover(css = \"fill:cyan;\"), opts_zoom(max = 10))\n\n\n\nFigure 6.26: Interactive US map with ggiraph\n\n\n\n\n\n\n\n\nThis section is currently skipped\n\n\n\n\nLink a choropleth map of household income for Vermont counties with a ggplot2 bar chart showing the income estimates along with intervals of error.\n\nGet the county household income estimates and margin of error for Vermont from the Census Bureau for 2020:\n\nvt_fips = usmap::fips(state = \"vermont\")\nvermont_hh_income_dt = RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\",\"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\",vt_fips)\n) %&gt;% \n  data.table::setnames(old = c(\"B19013_001E\",\"B19013_001M\"), new = c(\"HouseholdIncome\",\"MOE\")) %&gt;% \n  .[,`:=`(NAME = stringr::str_remove(NAME, \"County, Vermont\"),      HouseholdIncome = as.numeric(HouseholdIncome), MOE = as.numeric(MOE))]\n\nGet the simple features object(sf) for the Vermont county geographies and join it with the above county income data:\n\nexpress &lt;- expression(STATEFP == \"50\")\nvermont_hh_income_geo_sf &lt;- RcensusPkg::tiger_counties_sf(\n  output_dir = output_dir,\n  general = T,\n  sf_info = F,\n  express = express,\n  datafile = vermont_hh_income_dt,\n  datafile_key = \"county\"\n)\n\nCreate the ggplot2 geom_sf object from the above simple features using the ggiraph package:\n\nvermont_hh_income_map_plot &lt;- ggplot2::ggplot(vermont_hh_income_geo_sf, aes(fill = HouseholdIncome)) +\n  ggiraph::geom_sf_interactive(aes(data_id = GEOID)) +\n  scale_fill_distiller(\n    palette = \"Greens\",\n    direction = 1,\n    guide = \"none\"\n  ) +\n  theme_void()\n\nggiraph::girafe(ggobj = vermont_hh_income_map_plot, width_svg = 10, height_svg = 5) \n\n\n\n\n\nCreate the ggplot2 point chart with error bars from the above simple features:\n\nvermont_hh_income_point_plot &lt;- ggplot2::ggplot(vermont_hh_income_geo_sf, aes(x = HouseholdIncome, y = reorder(NAME, HouseholdIncome),fill = HouseholdIncome)) +\n  geom_errorbar(aes(xmin = HouseholdIncome - MOE, xmax = HouseholdIncome + MOE)) +\n  ggiraph::geom_point_interactive(color = \"black\", size = 4, shape = 21, aes(data_id = GEOID)) +\n  scale_x_continuous(labels = scales::label_dollar()) +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, labels = scales::label_dollar()) +\n  labs(\n    title = \"Household income by county in Vermont\",\n    subtitle = \"2016-2020 American Community Survey\",\n    y = \"\",\n    x = \"Household Income (bars represent margin of error\"\n  )\n\nggiraph::girafe(ggobj = vermont_hh_income_point_plot, width_svg = 10, height_svg = 5) \n\n\n\n\n\nJoin both plots:\n\ncombined_plot &lt;- vermont_hh_income_map_plot + vermont_hh_income_point_plot + patchwork::plot_layout(ncol = 2)\n\nggiraph::girafe(ggobj = combined_plot, width_svg = 10, height_svg = 5) %&gt;% \n  ggiraph::girafe_options(opts_hover(css = \"fill:cyan;\"))\n\n\n\nFigure 6.28: Linked map and chart with ggiraph\n\n\n\n\n\nSee the file shiny_leaflet_example.R in this directory for the application.\n\n\n\n\n\n\n\nIn order to work with maps made with tmap, export it using the tmap_save() function.\n\nAssign a previous tmap map in this chapter to a variable:\n\ntmap::tmap_mode(\"plot\")\nhennepin_map &lt;- tmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    legend.hist = TRUE\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    legend.outside= T,\n    legend.frame = F,\n    legend.hist.height = .25,\n    legend.hist.width = .8\n  ) \nhennepin_map\n\n\n\n\n\n\n\n\nSave the tmap:\n\ntmap::tmap_save(\n  tm = hennepin_map,\n  filename = file.path(here(), \"images\", \"hennepin_black_map.png\"),\n  height = 5.5,\n  width = 8,\n  dpi = 300\n)\n\nMap saved to D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\images\\hennepin_black_map.png\n\n\nResolution: 2400 by 1650 pixels\n\n\nSize: 8 by 5.5 inches (300 dpi)\n\n\n\nSave an interactive leaflet as an HTML document using the htmlwidgets::saveWidget() function.\n\nSave a previous leaflet map in this chapter. Uncomment the following lines of code:\n\n# dallas_map &lt;- mapview::mapView(dallas_bachelors_sf, zcol = \"estimate\")\n# \n# map_file_path &lt;- file.path(here(), \"html\", \"dallas_mapview_map.html\")\n# \n# htmlwidgets::saveWidget(dallas_map@map, map_file_path, selfcontained = TRUE)\n\n\n\n\n\nshapefile is a common vector spatial data format readable by desktop GIS software and Tableau.\n\nThe function sf::st_write() provides the means to write any of the special feature objects in this chapter to a shapefile.",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#using-geometry-in-tidycensus",
    "href": "6_mapping_census_data_with_R.html#using-geometry-in-tidycensus",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Get the tract based median household income (“B19013_001E”) for the District of Columbia and join it as a mapping fill aesthetic for each of the geometries of the DC tracts.\n\nGet the DC median household income by tract for 2020:\n\ndc_fips &lt;- usmap::fips(state = \"dc\")\ndc_B19013_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B19013_001E\",\n  region = \"tract\",\n  regionin = paste0(\"state:\", dc_fips)\n) %&gt;%\n  .[B19013_001E != -666666666, ] %&gt;%\n  data.table::setnames(., old = \"B19013_001E\", new = \"median_income\") %&gt;% \n  .[, median_income := as.numeric(median_income)]\n\nJoin the data dc_B19013_dt with DC’s simple feature tract geometries:\n\ndc_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  output_dir = output_dir,\n  state = dc_fips,\n  datafile = dc_B19013_dt,\n  datafile_key = \"GEOID\",\n  sf_info = F\n)\n\nMap the median household incomes as the fill aesthetic for the DC tract geometries of the simple feature dataframe dc_tracts_sf:\n\nRspatialPkg::get_geom_sf(\n  sf = dc_tracts_sf,\n  aes_fill = \"median_income\",\n  subtitle = \"Median Income Across District of Columbia Tracts\",\n  legend_key_width = 0.75\n) +\nggplot2::scale_fill_gradientn(\n  colors = RColorBrewer::brewer.pal(n = 9, name = \"Greens\"),\n  n.breaks = 8\n)\n\n\n\n\nFigure 6.1: Base R plot of median household income by tract in DC",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#map-making-with-ggplot2-and-geom_sf",
    "href": "6_mapping_census_data_with_R.html#map-making-with-ggplot2-and-geom_sf",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Get the median age by state and map it across state geometries.\n\nGet the median age for each state (i.e. “B01002_001E”):\n\nstates_median_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01002_001E\",\n  region = \"state\"\n) %&gt;%\n  data.table::setnames(., old = \"B01002_001E\", new = \"median_age\") %&gt;%\n  .[, median_age := as.numeric(median_age)]\n\n\nRcensusPkg::plot_us_data(\n  df = states_median_age_dt,\n  states_col = \"NAME\",\n  value_col = \"median_age\",\n  scale_limits = c(30, 50),\n  scale_breaks = c(30,35,40,45,50),\n  output_dir = output_dir\n)\n\n\n\n\nFigure 6.3: US choropleth map with ggplot2 defaults\n\n\n\n\n\n\n\n\nChange the color palette and reverse it so that darker colors represent older areas.\n\n\nRcensusPkg::plot_us_data(\n  df = states_median_age_dt,\n  states_col = \"NAME\",\n  value_col = \"median_age\",\n  output_dir = output_dir,\n  scale_breaks = seq(30,50,5),\n  scale_colors = RColorBrewer::brewer.pal(8,\"RdPu\"),\n  scale_limits = c(30,50),\n  scale_labels = c(\"Age:30\",\"Age:35\",\"Age:40\",\"Age:45\",\"Age:50\")\n)\n\n\n\n\nFigure 6.4: Styled choropleth of US median age with ggplot2",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#map-making-with-tmap",
    "href": "6_mapping_census_data_with_R.html#map-making-with-tmap",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Establish some Census data.\n\nObtain race and ethnicity population data from the 2020 decennial US Census. Include non-Hispanic white, non-Hispanic Black, Asian, and Hispanic populations for Census tracts in Hennepin County, Minnesota:\n\nminn_henn_fips &lt;- usmap::fips(state = \"minnesota\", county = \"hennepin\")\nminn_fips &lt;-  substr(minn_henn_fips, 1, 2)\nhenn_cty_fips &lt;- substr(minn_henn_fips, 3, 5)\nvars &lt;- c(\"P2_001N\", \"P2_002N\", \"P2_005N\", \"P2_006N\", \"P2_007N\", \"P2_008N\")\n#var_names &lt;- c(\"summary_value\", \"Hispanic\", \"White\", \"Black\", \"Native\", \"Asian\")\n\nhennepin_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"dec/pl\",\n  vintage = 2020,\n  vars = vars,\n  region = \"tract\",\n  regionin = paste0(\"state:\", minn_fips, \"+county:\", henn_cty_fips)\n) %&gt;% \n  .[, .(NAME, GEOID, P2_001N, P2_002N, P2_005N, P2_006N, P2_007N, P2_008N)]\n\nReshape the race/ethnic estimates and summary(“P2_001N”) to the long form:\n\nhennepin_race_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = hennepin_race_dt,\n  measure_v = c(\"P2_002N\", \"P2_005N\", \"P2_006N\", \"P2_007N\", \"P2_008N\"),\n  value_name = \"value\"\n) %&gt;% \n  .[, value := as.numeric(value)]\n\nsummary_hennepin_race_long_dt &lt;- RcensusPkg::wide_to_long(\n  dt = hennepin_race_dt,\n  measure_v = \"P2_001N\",\n  value_name = \"summary_value\"\n) %&gt;% \n  .[, summary_value := as.numeric(summary_value)] %&gt;% \n  .[, .(GEOID,summary_value)]\n\nPerform some simple wrangling:\n\nhennepin_race_long_dt &lt;- hennepin_race_long_dt %&gt;% \n  .[, variable := fcase(\n    variable == \"P2_002N\",\"Hispanic\",\n    variable == \"P2_005N\",\"White\",\n    variable == \"P2_006N\",\"Black\",\n    variable == \"P2_007N\",\"Native\",\n    variable == \"P2_008N\",\"Asian\"\n  )] \n\nPerform a join between hennepin_race_long_dt and summary_hennepin_race_long_dt and compute the percentages:\n\ndata.table::setkeyv(hennepin_race_long_dt,cols = \"GEOID\")\ndata.table::setkeyv(summary_hennepin_race_long_dt, cols = \"GEOID\")\nhennepin_race_long_dt &lt;- hennepin_race_long_dt[summary_hennepin_race_long_dt] %&gt;% \n  .[, percent := 100 * value/summary_value]\n\nGet the geometries for the tracts in Hennepin County, Minnesota and join it with hennepin_race_long_dt:\n\nhennepin_race_express &lt;- expression(COUNTYFP == henn_cty_fips)\nhennepin_race_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = minn_fips,\n  general = T,\n  express = hennepin_race_express,\n  datafile = hennepin_race_long_dt,\n  datafile_key = \"GEOID\",\n  sf_info = T,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(GEOID,NAME,variable,value,summary_value,percent,geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nReading layer `cb_2020_27_tract_500k' from data source \n  `D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\shapefiles' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1502 features and 13 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -97.23921 ymin: 43.49937 xmax: -89.49398 ymax: 49.38436\nGeodetic CRS:  NAD83\n\n\n\n\n\n\nTable 6.1: Race and ethnicity in Hennepin County, MN\n\n\nGEOID\nNAME\nvariable\nvalue\nsummary_value\npercent\n\n\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nHispanic\n363\n3351\n10.8325873\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nWhite\n1097\n3351\n32.7364966\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nBlack\n970\n3351\n28.9465831\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nNative\n29\n3351\n0.8654133\n\n\n27053000101\nCensus Tract 1.01, Hennepin County, Minnesota\nAsian\n635\n3351\n18.9495673\n\n\n27053000102\nCensus Tract 1.02, Hennepin County, Minnesota\nHispanic\n543\n5178\n10.4866744\n\n\n\n\n\n\n\n\n\n\n\nBefore using tmap, we will filter the shapefile hennepin_race_sf on the black race and produce a static choropleth ggplot2 map of tract percentages in Hennepin, County.\n\n\nhennepin_black_sf &lt;- data.table::as.data.table(hennepin_race_sf) %&gt;%\n  .[variable == \"Black\", ] %&gt;%\n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = hennepin_black_sf,\n  aes_fill = \"percent\",\n  subtitle = \"Percentage of Blacks in Hennepin County, MN tracts\",\n  legend_key_width = 0.75,\n  scale_breaks = seq(0,100,10),\n  scale_limits = c(0,100),\n  scale_colors = RColorBrewer::brewer.pal(n = 9, name = \"Oranges\"),\n  hide_x_tics = F,\n  hide_y_tics = F,\n  panel_color = \"white\"\n) \n\n\n\n\nFigure 6.5a: Tract percentages in Hennepin, County with ggplot2\n\n\n\n\n\nUse tmap’s tm_shape() function to visualize the polygon layer of hennepin_black_sf.\n\nDefine the bounding box to use for hennepin_black_sf:\n\nhennepin_bbox &lt;-  sf::st_bbox(c(xmin = -93.8, xmax = -93.18, ymax = 45.25, ymin = 44.77))\n\n\ntmap::tmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons() \n\n\n\n\nFigure 6.5: Basic polygon plot with tmap\n\n\n\n# tmap::qtm(hennepin_black_sf) +\n#   tmap::tm_grid()\n\n\nUse tmap to create an interactive choropleth map by assigning col = “percent”.\n\n\ntmap::tmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap::tm_shape(hennepin_black_sf) +\n  tmap::tm_polygons(col = \"percent\") \n\n\n\nFigure 6.6: Basic choropleth with tmap\n\n\n\nThe default classification scheme used by tm_fill() is “pretty”, which identifies clean-looking intervals in the data based on the data range. In this example, data classes change every 20 percent. However, this approach will always be sensitive to the distribution of data values.\n\n\nTake a look at the distribution of “percent” with a histogram setting bin breaks at 10 from 0 to 80.\n\n\nRplotterPkg::create_histogram_plot(\n  df = hennepin_black_sf,\n  aes_x = \"percent\",\n  title = \"Histogram of hennepin_black_sf$percent\",\n  x_title = \"black_tracts$percent\",\n  y_title = \"Frequency\",\n  bin_breaks = seq(0,80,10),\n  bar_fill = \"green\",\n)\n\n\n\n\nFigure 6.7: Base R histogram of percent Black by Census tract\n\n\n\n\n\nAs the histogram illustrates, most Census tracts in Hennepin County have Black populations below 20 percent.\n\n\nUse quantiles for classification of “percent” where each bin will contain the same number of tracts.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"quantile\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"Percent Black\\nby Census tract\"\n  ) +\n  tmap::tm_layout(\n    frame = F,\n    legend.outside = T\n  )\n\n\n\n\nFigure 6.8: tmap choropleth with options\n\n\n\n\n\n…quantiles reveals additional neighborhood-level heterogeneity in Hennepin County’s Black population in suburban areas. However, it does mask some heterogenity in Minneapolis as the top class now includes values ranging from 21 percent to 88 percent.\n\n\nUse Jenks natural-breaks method, which uses an algorithm to identify meaningful breaks in the data for bin boundaries.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    legend.hist = TRUE\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    legend.outside= T,\n    legend.frame = F,\n    legend.hist.height = .25,\n    legend.hist.width = .8\n  ) \n\n\n\n\nFigure 6.9: Styled tmap choropleth\n\n\n\n\n\n\n\n\nAdd additional tmap based reference elements to the above plot.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    alpha = 0.7\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    frame = F,\n    legend.outside = T\n  ) +\n  tmap::tm_scale_bar(\n    position = c(\"left\",\"bottom\")\n  ) +\n  tmap::tm_compass(\n    position = c(\"right\",\"top\")\n  ) +\n  tmap::tm_credits(\n    \"(c) RDean \",\n    bg.color = \"white\",\n    position = c(\"RIGHT\",\"BOTTOM\")\n  )\n\n\n\n\nFigure 6.10: Map of percent Black in Hennepin County with reference elements\n\n\n\n\n\n\n\nSection skipped\n\n\n\n\n\n\nGraduated symbol maps use shapes referenced to geographi units that are sized relative to a data attribute.\n\n\nUse tmap’s tm_bubbles() function to create a graduated symbol map of the “value” (i.e. the population across tracts) from black_tracts_sf.\n\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tm_polygons() +\n  tm_bubbles(\n    size = \"value\",\n    alpha = 0.5,\n    col = \"navy\",\n    title.size = \"Non-Hispanic Black - 2020 US Census\"\n  ) +\n  tm_layout(\n    legend.outside = T,\n    legend.outside.position = \"bottom\"\n  )\n\n\n\n\nFigure 6.15: Graduated symbols with tmap\n\n\n\n\n\n\n\n\nComplete a faceted map showing the percentages percent across all ethnic/race groups (‘variable’) from minn_tracts_sf.\n\n\ntmap::tmap_mode(\"plot\") +\ntmap::tm_shape(hennepin_race_sf) +\n  tmap::tm_facets(\n    by = \"variable\",\n    scale.factor = 4\n  ) +\n  tmap::tm_fill(\n    col = \"percent\",\n    style = \"quantile\",\n    n = 6,\n    palette = \"Blues\",\n    title = \"Percent (2020 US Census)\"\n  ) +\n  tmap::tm_layout(\n    bg.color = \"grey\",\n    legend.position = c(-0.7, 0.15),\n    panel.label.bg.color = \"white\"\n  )\n\n\n\n\nFigure 6.16: Faceted map with tmap\n\n\n\n\n\n\n\n\nUse the RspatialPkg::dot_density_sf() function to produce a dot-density map of hennepin_race_sf.\n\nGet the dots for all the races in Hennepin County:\n\nhennepin_dots_sf &lt;- RspatialPkg::dot_density_sf(\n  sf = hennepin_race_sf,\n  dot_col = \"value\",\n  cases_per_dot = 100,\n  group_col = \"variable\"\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = \"variable\", new = \"Race\") %&gt;% \n  sf::st_as_sf(.)\n\nPlot both the tract geometries for Hennepin County layered under the POINT geometries from RspatialPkg::dot_density_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = hennepin_race_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  sf_fill = \"white\",\n  panel_border_color = \"white\",\n  title = \"Race/ethnicity, 2020 US Census\",\n  subtitle = \"1 dot = 100 people\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = hennepin_dots_sf,\n  aes_fill = \"Race\",\n  sf_size = 2,\n  adding = T\n)  \n\n\n\n\nFigure 6.17: Dot-density map with RspatiaPkg::get_geom_sf()",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#cartographic-workflows-with-non-census-data",
    "href": "6_mapping_census_data_with_R.html#cartographic-workflows-with-non-census-data",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Data source: https://cookpolitical.com/2020-national-popular-vote-tracker\n\nRead data from the Cook Political Report on the 2020 US Presidential election results.\n\n\nelection_data_path &lt;- file.path(here(), \"data\", \"us_vote_2020.csv\")\nvote2020_dt &lt;- data.table::fread(file = election_data_path)\nnames(vote2020_dt)\n\n [1] \"state\"            \"called\"           \"final\"            \"dem_votes\"       \n [5] \"rep_votes\"        \"other_votes\"      \"dem_percent\"      \"rep_percent\"     \n [9] \"other_percent\"    \"dem_this_margin\"  \"margin_shift\"     \"vote_change\"     \n[13] \"stateid\"          \"EV\"               \"X\"                \"Y\"               \n[17] \"State_num\"        \"Center_X\"         \"Center_Y\"         \"V20\"             \n[21] \"2016 Margin\"      \"Total 2016 Votes\"\n\n\n\nMap the election “called” column data across the US state geometries RcensusPkg::plot_us_data().\n\nChange the name of column “state” to “NAME” and set the “called” column as a factor:\n\nvote2020_dt[, `:=`(called = as.factor(called))] %&gt;%\n  data.table::setnames(old = \"called\", new = \"Party\")\n\n\nRcensusPkg::plot_us_data(\n  df = vote2020_dt,\n  states_col = \"state\",\n  value_col = \"Party\",\n  output_dir = output_dir,\n  scale_limits = c(\"R\",\"D\"),\n  scale_breaks = c(\"R\",\"D\"),\n  scale_values = c(\"red\",\"blue\"),\n  sf_color = \"white\"\n)\n\n\n\n\nFigure 6.18: Map of the 2020 US presidential election results with ggplot2\n\n\n\n\n\n\n\n\nRead in the Internal Revenue Service’s Statistics of Income(SOI) data and associate its ZCTAs with ZCTAs for geographies near Boston, MA.\n\nRead in the SOI data and select variables N09400 (number of tax returns with self-employment tax) and N1 (the total number of returns):\n\nself_employment_dt &lt;- data.table::fread(\"https://www.irs.gov/pub/irs-soi/18zpallnoagi.csv\") %&gt;% \n  data.table::setnames(old = c(\"N09400\", \"N1\"), new = c(\"self_emp\", \"total\")) %&gt;% \n  .[, .(ZIPCODE = as.character(ZIPCODE),  self_emp, total)]\n\nJoin irs_data_dt dataframe with the Census Bureau’s tiger zctas geometries based on “ZIPCODE” values that start with “021”, “022”, or “024” which are near Boston, MA.\nGather the tiger ztas geometric data:\n\nboston_zctas_sf = RcensusPkg::tiger_zctas_sf(\n  output_dir = output_dir,\n  vintage = 2018,\n  general = TRUE,\n  sf_info = FALSE\n) %&gt;% \ndata.table::as.data.table(.) %&gt;% \n.[startsWith(GEOID10, \"021\") | startsWith(GEOID10, \"022\") | startsWith(GEOID10, \"024\"),] %&gt;% \n.[, .(GEOID10 = as.character(as.numeric(GEOID10)), geometry)] %&gt;% \nsf::st_sf(.)  \n\nShow the mapping of the zcta geometric boundaries using RspatialPkg::get_geom_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = boston_zctas_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  sf_fill = \"purple\",\n  sf_color = \"white\",\n  title = \"ZCTAs in the Boston, MA area, 2018\"\n  \n)\n\n\n\n\nFigure 6.19a: ZCTAs in the Boston, MA area\n\n\n\n\nShow the mapping of the zcta geometric boundaries using mapview:\n\nmapview::mapview(boston_zctas_sf$geometry)\n\n\n\nFigure 6.19: ZCTAs in the Boston, MA area\n\n\nJoin the geometric data with the self_employment_dt data.table:\n\nboston_zctas_dt &lt;- boston_zctas_sf %&gt;% \n  data.table::as.data.table(.)\n\ndata.table::setkeyv(boston_zctas_dt,cols = \"GEOID10\")\ndata.table::setkeyv(self_employment_dt, cols = \"ZIPCODE\")\n\nboston_se_data_sf &lt;- self_employment_dt[boston_zctas_dt] %&gt;% \n  sf::st_as_sf(.)\n\nAdd a new percentage column:\n\nboston_se_data_sf &lt;- boston_se_data_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, `:=`(pct_self_emp = (self_emp/total)*100)] %&gt;% \n  sf::st_sf(.)\n\n\n\n\n\nTable 6.2: Self-employment percentages by ZCTA in the Boston, MA area\n\n\nZIPCODE\nself_emp\ntotal\npct_self_emp\ngeometry\n\n\n\n\n2108\n540\n2610\n20.689655\nMULTIPOLYGON (((-71.07522 4...\n\n\n2109\n430\n2750\n15.636364\nMULTIPOLYGON (((-71.05979 4...\n\n\n2110\n490\n2450\n20.000000\nMULTIPOLYGON (((-71.06048 4...\n\n\n2111\n510\n3880\n13.144330\nMULTIPOLYGON (((-71.06342 4...\n\n\n2113\n420\n4570\n9.190372\nMULTIPOLYGON (((-71.05853 4...\n\n\n2114\n1070\n8220\n13.017032\nMULTIPOLYGON (((-71.07681 4...\n\n\n\n\n\n\n\n\nShow the choropleth map of the percentages using RspatialPkg::get_geom_sf():\n\nRspatialPkg::get_geom_sf(\n  sf = boston_se_data_sf,\n  aes_fill = \"pct_self_emp\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  title = \"% self-employed\",\n  subtitle = \"2018 IRS SOI data\"\n)\n\n\n\n\nFigure 6.20a: Simple choropleth of self-employment in Boston using RspatialPkg::get_geom_sf()\n\n\n\n\nShow the choropleth map of the percentages using tmap:\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(boston_se_data_sf, projection = 26918) +\n  tmap::tm_fill(\n    col = \"pct_self_emp\",\n    palette = \"Purples\",\n    title = \"% self-employed, \\n2018 IRS SOI data\"\n  )\n\n\n\n\nFigure 6.20: Simple choropleth of self-employment in Boston\n\n\n\n\nShow a graduated symbol map of the self employment values self_emp:\n\nbbox &lt;-  sf::st_bbox(c(xmin = -71.0, xmax = -71.2, ymax = 42.5, ymin = 42.14))\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(boston_se_data_sf, bbox = bbox) +\n  tm_polygons() +\n  tm_bubbles(\n    size = \"self_emp\",\n    alpha = 0.5,\n    col = \"navy\",\n    title.size = \"Self-employed filers, \\n2020 IRS SOI data\"\n  ) +\n  tm_layout(\n    legend.outside = F,\n    legend.outside.position = \"bottom-left\"\n  )\n\n\n\n\nFigure 6.21: Graduated symbol map of self-employment by ZCTA in Boston",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#interactive-mapping",
    "href": "6_mapping_census_data_with_R.html#interactive-mapping",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "Get the percentage of the population aged 25 and up with a bachelor’s degree or higher from the “acs/acs5/profile” dataset. Join the data with the geometry of Census tract in Dallas County, Texas.\n\nGet a description of the variable “DP02_0068P”:\n\nDP02_0068P_dt &lt;- RcensusPkg::get_variable_names(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  filter_name_str = \"DP02_0068P\"\n)\n\n\n\n\n\nDescriptions of DP02_0068P from acs/acs5/profile, 2020\n\n\nname\nlabel\nconcept\nrequired\npredicateType\n\n\n\n\nDP02_0068PE\nPercent!!EDUCATIONAL ATTAINMENT!!Population 25 years and over!!Bachelor's degree or higher\nSELECTED SOCIAL CHARACTERISTICS IN THE UNITED STATES\nNA\nfloat\n\n\n\n\n\n\n\n\nGet the fips numbers for Texas and Dallas:\n\ndallas_tx_fips &lt;- usmap::fips(state = \"texas\", county = \"dallas\")\ndallas_cty_fips &lt;- substr(dallas_tx_fips, 3, 5)\ntexas_fips &lt;- substr(dallas_tx_fips,1,2)\n\nGet the Census data:\n\ndallas_bachelors_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  vars = \"DP02_0068PE\",\n  region = \"tract\",\n  regionin = paste0(\"state:\", texas_fips, \"+county:\", dallas_cty_fips)\n) %&gt;%\n  data.table::setnames(., old = \"DP02_0068PE\", new = \"estimate\") %&gt;%\n  .[, estimate := as.numeric(estimate)] %&gt;%\n  .[estimate &gt; 0,]\n\nGet the geographies data and join the Census data percentages dallas_bachelors_dt:\n\nexpress &lt;- expression(COUNTYFP == dallas_cty_fips)\ndallas_bachelors_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = texas_fips,\n  general = T,\n  express = express,\n  datafile = dallas_bachelors_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  sf_info = F\n) %&gt;% \n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")\n\n\nProduce a Leaflet map of the estimate data using mapview.\n\nNote that the mapview() function includes a parameter zcol that takes a column in the dataset as an argument, and visualizes that column with an interactive choropleth map.\n\ndallas_bachelors_mv &lt;- mapview::mapView(dallas_bachelors_sf, zcol = \"estimate\")\ndallas_bachelors_mv@map %&gt;% \n  leaflet.extras::addFullscreenControl()\n\n\n\nFigure 6.22: Interactive mapview choropleth\n\n\n\nProduce a Leaflet map of the estimate data using tmap.\n\nTo convert all subsequent tmap maps to interactive Leaflet maps, add the function tmap_mode(\"view\") prior to building the map(s) with the tm_shape() function. Also, tmap_mode(\"plot\"), is the default mode and produces a non-interactive map.\n\ntmap::tmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntmap::tm_shape(dallas_bachelors_sf) +\n  tmap::tm_fill(\n    col = \"estimate\",\n    palette = \"magma\",\n    alpha = 0.5\n  )\n\n\n\nFigure 6.23: Interactive map with tmap in view mode\n\n\n\nMap the data using the core leaflet package.\n\nNote the use of leaflet::colorNumeric() for controlling the color palette and using the leaflet::addProviderTiles() function for a grey background that won’t interfere with the choropleth mapping.\n\npal &lt;- leaflet::colorNumeric(\n  palette = \"magma\",\n  domain = dallas_bachelors_sf$estimate\n)\n\nleaflet::leaflet() %&gt;% \nleaflet::addPolygons(\n  data = dallas_bachelors_sf,\n  color = ~pal(estimate),\n  weight = 0.5,\n  smoothFactor = 0.2,\n  fillOpacity = 0.5,\n  label = ~estimate\n) %&gt;% \nleaflet::addLegend(\n  position = \"bottomright\",\n  pal = pal,\n  values = dallas_bachelors_sf$estimate,\n  title = \"% with bachelor's&lt;br/&gt;degree\"\n)\n\n\n\nFigure 6.24: Interactive leaflet map\n\n\n\n\n\n\nLike most interactive mapping platforms, Leaflet uses tiled mapping in the Web Mercator coordinates reference system. Web Mercator works well for tiled web maps that need to fit within rectangular computer screens, and preserves angles at large scales (zoomed in areas) which is useful for local navigation…it grossly distorts the area of geographic features near the poles, making it inappropriate for small-scale thematic mapping of the world or world regions.\n\nIn preparation for small-scale thematic mapping or the world or world regions, get the median house values across the states (B25077_001, acs/acs1, 2019).\n\nhousing_values_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B25077_001E\", \n  region = \"state:*\"\n) %&gt;%  \n  data.table::setnames(old = \"B25077_001E\", new = \"estimate\") %&gt;% \n  .[, estimate := as.numeric(estimate)] \n\nGet the US geometries and join the above housing values:\n\nstates_sf &lt;- RcensusPkg::tiger_states_sf(\n  general = T,\n  resol = \"20m\",\n  datafile = housing_values_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  sf_info = F\n) %&gt;% \n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")\n\n\nUse leaflet to map the median home values by state from the 1-year ACS.\n\nNote that Alaska’s area is grossly distorted relative to the rest of the United States.\nNote the use of leaflet::addMapPane() to control the layering and pane assignment of background and polygons.\n\nus_pal &lt;- leaflet::colorNumeric(\n  palette = \"plasma\",\n  domain = states_sf$estimate\n)\n\nleaflet::leaflet() %&gt;% \nleaflet::addMapPane(\"background_map\", zIndex = 410) %&gt;% \nleaflet::addMapPane(\"polygons\", zIndex = 420) %&gt;% \nleaflet::addPolygons(  \n  data = states_sf,\n  color = ~us_pal(estimate),\n  weight = 0.5,\n  smoothFactor = 0.2,\n  fillOpacity = 0.5,\n  label = ~estimate,\n  options = pathOptions(pane = \"polygons\")\n) %&gt;% \nleaflet::addLegend(\n  position = \"bottomright\",\n  pal = us_pal,\n  values = states_sf$estimate,\n  title = \"Median home values\"\n)\n\n\n\nFigure 6.25: Interactive US map using Web Mercator\n\n\n\nUse the package RcensusPkg::plot_us_data() to produce a static map of median house values across US state geometries. Then use the ggiraph package to convert the static ggplot2 graphics into interactive plots.\n\nDefine interval breaks/labels for variable “estimate” from housing_values_dt:\n\nintervals &lt;- classInt::classIntervals(\n  housing_values_dt$estimate,\n  n = 6,\n  style = \"pretty\"\n)\nbreaks &lt;- intervals$brks\nlabels &lt;- c(\"$100,000\",\"$200,000\",\"$300,000\",\"$400,000\",\"$500,000\",\"$600,000\",\"$700,000\")\n\nShow the ggplot2 based choropleth map of US median housing values:\n\ndata.table::setnames(housing_values_dt, old = \"estimate\", new = \"Median_House_Values\")\n\nhousing_plot_lst &lt;- RcensusPkg::plot_us_data(\n  df = housing_values_dt,\n  states_col = \"NAME\",\n  value_col = \"Median_House_Values\",\n  output_dir = output_dir,\n  scale_breaks = breaks,\n  scale_limits = c(100000, 700000),\n  scale_labels = labels,\n  scale_colors = RColorBrewer::brewer.pal(8,\"YlOrRd\"),\n  display_plot = FALSE\n)\nhousing_plot_lst$plots$us_states\n\n\n\n\n\n\n\n\n\nstates_tooltip_sf &lt;- housing_plot_lst$sf$lower_48 %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, `:=`(tooltip = paste(NAME, Median_House_Values, sep = \": \"))] %&gt;% \n  sf::st_sf(.)\n\ngg &lt;- ggplot(states_tooltip_sf, aes(fill = Median_House_Values)) +\n  ggiraph::geom_sf_interactive(aes(tooltip = tooltip, data_id = NAME), size = 0.1) +\n  scale_fill_viridis_c(option = \"plasma\", labels = scales::label_dollar()) +\n  labs(\n    title = \"Median housing value by State, 2019\",\n    caption = \"Data source: 2019 1-year ACS, US Census Bureau\"\n  ) +\n  theme_void()\n\nggiraph::girafe(ggobj = gg) %&gt;%\n  ggiraph::girafe_options(opts_hover(css = \"fill:cyan;\"), opts_zoom(max = 10))\n\n\n\nFigure 6.26: Interactive US map with ggiraph",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#advanced-examples",
    "href": "6_mapping_census_data_with_R.html#advanced-examples",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "This section is currently skipped\n\n\n\n\nLink a choropleth map of household income for Vermont counties with a ggplot2 bar chart showing the income estimates along with intervals of error.\n\nGet the county household income estimates and margin of error for Vermont from the Census Bureau for 2020:\n\nvt_fips = usmap::fips(state = \"vermont\")\nvermont_hh_income_dt = RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = c(\"B19013_001E\",\"B19013_001M\"),\n  region = \"county:*\",\n  regionin = paste0(\"state:\",vt_fips)\n) %&gt;% \n  data.table::setnames(old = c(\"B19013_001E\",\"B19013_001M\"), new = c(\"HouseholdIncome\",\"MOE\")) %&gt;% \n  .[,`:=`(NAME = stringr::str_remove(NAME, \"County, Vermont\"),      HouseholdIncome = as.numeric(HouseholdIncome), MOE = as.numeric(MOE))]\n\nGet the simple features object(sf) for the Vermont county geographies and join it with the above county income data:\n\nexpress &lt;- expression(STATEFP == \"50\")\nvermont_hh_income_geo_sf &lt;- RcensusPkg::tiger_counties_sf(\n  output_dir = output_dir,\n  general = T,\n  sf_info = F,\n  express = express,\n  datafile = vermont_hh_income_dt,\n  datafile_key = \"county\"\n)\n\nCreate the ggplot2 geom_sf object from the above simple features using the ggiraph package:\n\nvermont_hh_income_map_plot &lt;- ggplot2::ggplot(vermont_hh_income_geo_sf, aes(fill = HouseholdIncome)) +\n  ggiraph::geom_sf_interactive(aes(data_id = GEOID)) +\n  scale_fill_distiller(\n    palette = \"Greens\",\n    direction = 1,\n    guide = \"none\"\n  ) +\n  theme_void()\n\nggiraph::girafe(ggobj = vermont_hh_income_map_plot, width_svg = 10, height_svg = 5) \n\n\n\n\n\nCreate the ggplot2 point chart with error bars from the above simple features:\n\nvermont_hh_income_point_plot &lt;- ggplot2::ggplot(vermont_hh_income_geo_sf, aes(x = HouseholdIncome, y = reorder(NAME, HouseholdIncome),fill = HouseholdIncome)) +\n  geom_errorbar(aes(xmin = HouseholdIncome - MOE, xmax = HouseholdIncome + MOE)) +\n  ggiraph::geom_point_interactive(color = \"black\", size = 4, shape = 21, aes(data_id = GEOID)) +\n  scale_x_continuous(labels = scales::label_dollar()) +\n  scale_fill_distiller(palette = \"Greens\", direction = 1, labels = scales::label_dollar()) +\n  labs(\n    title = \"Household income by county in Vermont\",\n    subtitle = \"2016-2020 American Community Survey\",\n    y = \"\",\n    x = \"Household Income (bars represent margin of error\"\n  )\n\nggiraph::girafe(ggobj = vermont_hh_income_point_plot, width_svg = 10, height_svg = 5) \n\n\n\n\n\nJoin both plots:\n\ncombined_plot &lt;- vermont_hh_income_map_plot + vermont_hh_income_point_plot + patchwork::plot_layout(ncol = 2)\n\nggiraph::girafe(ggobj = combined_plot, width_svg = 10, height_svg = 5) %&gt;% \n  ggiraph::girafe_options(opts_hover(css = \"fill:cyan;\"))\n\n\n\nFigure 6.28: Linked map and chart with ggiraph\n\n\n\n\n\nSee the file shiny_leaflet_example.R in this directory for the application.",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "6_mapping_census_data_with_R.html#working-with-software-outside-of-r-for-cartographic-projects",
    "href": "6_mapping_census_data_with_R.html#working-with-software-outside-of-r-for-cartographic-projects",
    "title": "6 Mapping Census data with R",
    "section": "",
    "text": "In order to work with maps made with tmap, export it using the tmap_save() function.\n\nAssign a previous tmap map in this chapter to a variable:\n\ntmap::tmap_mode(\"plot\")\nhennepin_map &lt;- tmap::tm_shape(hennepin_black_sf, bbox = hennepin_bbox) +\n  tmap::tm_polygons(\n    col = \"percent\",\n    style = \"jenks\",\n    n = 5,\n    palette = \"Purples\",\n    title = \"2020 US Census\",\n    legend.hist = TRUE\n  ) +\n  tmap::tm_layout(\n    title = \"Percent Black\\nby Census tract\",\n    legend.outside= T,\n    legend.frame = F,\n    legend.hist.height = .25,\n    legend.hist.width = .8\n  ) \nhennepin_map\n\n\n\n\n\n\n\n\nSave the tmap:\n\ntmap::tmap_save(\n  tm = hennepin_map,\n  filename = file.path(here(), \"images\", \"hennepin_black_map.png\"),\n  height = 5.5,\n  width = 8,\n  dpi = 300\n)\n\nMap saved to D:\\Code_R\\published\\Techniques-in-Acquisition-Computation-and-Display-of-Census-Bureau-Data\\images\\hennepin_black_map.png\n\n\nResolution: 2400 by 1650 pixels\n\n\nSize: 8 by 5.5 inches (300 dpi)\n\n\n\nSave an interactive leaflet as an HTML document using the htmlwidgets::saveWidget() function.\n\nSave a previous leaflet map in this chapter. Uncomment the following lines of code:\n\n# dallas_map &lt;- mapview::mapView(dallas_bachelors_sf, zcol = \"estimate\")\n# \n# map_file_path &lt;- file.path(here(), \"html\", \"dallas_mapview_map.html\")\n# \n# htmlwidgets::saveWidget(dallas_map@map, map_file_path, selfcontained = TRUE)\n\n\n\n\n\nshapefile is a common vector spatial data format readable by desktop GIS software and Tableau.\n\nThe function sf::st_write() provides the means to write any of the special feature objects in this chapter to a shapefile.",
    "crumbs": [
      "6 Mapping Census data with R"
    ]
  },
  {
    "objectID": "7_spatial_analysis_with_census.html",
    "href": "7_spatial_analysis_with_census.html",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(data.table)\nlibrary(devtools)\nlibrary(sf)\nlibrary(usmap)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(mapview)\nlibrary(magrittr)\nlibrary(kableExtra)\nlibrary(here)\nlibrary(spdep)\n\n\nLoad the packages ‘deandevl/RcensusPkg’, ‘deandevl/RplotterPkg’ and ‘deandevl/RspatialPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\ndevtools::install_github('deandevl/RspatialPkg')\ndevtools::install_github('deandevl/RplotterPkg')\n\n\nEstablish an output directory for all downloaded shapefiles.\n\n\noutput_dir &lt;- file.path(here::here(), \"shapefiles\")\n\n\n\n\nIn this representation, different components of the landscape that interact in the real world are abstracted out into different layers, represented by different geometries. For example, Census tracts might be represented as polygons; customers as points; and roads as linestrings.\n\n\n\n\nIn any workflow using spatial overlay, including all of the methods discussed in this chapter, it is essential that all layers share the same CRS for overlay methods to work.\n\nUse the sf::st_transform() to transform data toe the projected CRS.\n\n\n\n\nGiven that Census spatial datasets are designed to align with one another, spatial overlay can be used to identify geographic features that fall within a given metropolitan area and extract those features.\n\n\nOverlay the boundary geometries of the Kansas City metropolitan area with the state tract boundaries of Kansas and Missouri.\n\nGet the fips numbers for the states of Kansas and Missouri:\n\nks_fips &lt;- usmap::fips(state = \"kansas\")\nmo_fips &lt;- usmap::fips(state = \"missouri\")\n\nGet the combined tracts of both states:\n\nks_mo_tracts_sf &lt;- purrr::map_dfr(\n  c(ks_fips, mo_fips), \n  ~{RcensusPkg::tiger_tracts_sf(\n      state = .x, \n      general = TRUE, \n      transform_crs = 8528, \n      sf_info = FALSE,\n      output_dir = output_dir, \n    )\n  }\n)\n\nGet the metropolitan area (core-based statistical area) of Kansas City:\n\nkc_metro_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  general = TRUE,\n  city_filter = \"Kansas City\",\n  transform_crs = 8528,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n\nMap the overlay of metropolitan area geometries with the Kansas-Missouri tracts geometries:\n\nRspatialPkg::get_geom_sf(\n  sf = ks_mo_tracts_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  sf_fill = \"white\",\n  sf_color = \"gray\",\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.2: The Kansas City CBSA relative to Kansas and Missouri\n\n\n\n\n\n\n\nSubset and map ks_mo_tracts_sf tract geometries to just the CBSA Kansas City geometries kc_metro_sf.\n\nNote that [] operator is using the default spatial function sf::st_intersect() to accomplish the intersection. It returns tracts that are within the metro’s boundary and those that cross or touch the boundary.\n\nkc_tracts_sf &lt;- ks_mo_tracts_sf[kc_metro_sf,]\n\nRspatialPkg::get_geom_sf(\n  sf = kc_tracts_sf,\n  sf_fill = \"white\",\n  sf_color = \"grey\",\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.3: Census tracts that intersect the Kansas City CBSA\n\n\n\n\nUse the spatial predicate sf::st_within() to return tracts only within the Kansas City CBSA geometries.\n\n\nkc_tracts_within_sf &lt;- kc_tracts_sf[kc_metro_sf, op = sf::st_within]\n\n\nRspatialPkg::get_geom_sf(\n  sf = kc_tracts_within_sf,\n  sf_fill = \"white\",\n  sf_color = \"grey\",\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.4: Census tracts that are within the Kansas City CBSA\n\n\n\n\n\n\n\n\n\n\nLet’s consider a hypothetical task where a health data analyst in Gainesville, Florida needs to determine the percentage of residents age 65 and up who lack health insurance in patients’ neighborhoods. The analyst has a dataset of patients with patient ID along with longitude and latitude information.\n\nCreate a hypothetical dataset:\n\ngainesville_patients_dt &lt;- data.table(\n  patient_id = 1:10,\n  longitude = c(-82.308131, -82.311972, -82.361748, -82.374377, \n                -82.38177, -82.259461, -82.367436, -82.404031, \n                -82.43289, -82.461844),\n  latitude = c(29.645933, 29.655195, 29.621759, 29.653576, \n               29.677201, 29.674923, 29.71099, 29.711587, \n               29.648227, 29.624037)\n)\n\n\n\n\n\nTable 7.1: Hypothetical dataset of patients in Gainesville, Florida\n\n\npatient_id\nlongitude\nlatitude\n\n\n\n\n1\n-82.30813\n29.64593\n\n\n2\n-82.31197\n29.65519\n\n\n3\n-82.36175\n29.62176\n\n\n4\n-82.37438\n29.65358\n\n\n5\n-82.38177\n29.67720\n\n\n6\n-82.25946\n29.67492\n\n\n\n\n\n\n\n\nUsing sf::st_as_sf() convert the dataframe to a simple features object with a geometry column:\n\nBy convention, the coordinate reference system used for longitude / latitude data is WGS 1984, represented with the EPSG code 4326. We’ll need to specify this CRS in st_as_sf() so that sf can locate the points correctly before we transform to an appropriate projected coordinate reference system with st_transform().\n\n\ngainesville_sf &lt;- gainesville_patients_dt %&gt;% \n  sf::st_as_sf(coords = c(\"longitude\",\"latitude\"), crs = 4326) %&gt;% \n  sf::st_transform(6440)\n\nMap the sf with mapview():\n\nmapview::mapview(\n  x = gainesville_sf,\n  col.regions = \"red\",\n  legend = F\n)\n\n\n\n\nFigure 7.5: Map of hypothetical patient locations in Gainsville, Florida\n\nAcquire health insurance percent (“DP03_0096PE”,“DP03_0096PM”) coverage by tract from the American Community Survey (“acs/acs5/profile”). Gainsville is within Alachua County, Florida with data available from the 2015-2019 5-year ACS.\n\nfl_alachua_fips &lt;- usmap::fips(state = \"florida\", county = \"alachua\")\nfl_fips &lt;- substr(fl_alachua_fips,1,2)\nalachua_fips &lt;- substr(fl_alachua_fips,3,5)\n\nalachua_insurance_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2019,\n  vars = c(\"DP03_0096PE\", \"DP03_0096PM\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", fl_fips, \"+county:\", alachua_fips)\n) %&gt;% \n  data.table::setnames(., old = c(\"DP03_0096PE\", \"DP03_0096PM\"),new = c(\"pct_insured\",\"pct_insured_moe\")) %&gt;%   .[, .(GEOID, pct_insured, pct_insured_moe)] %&gt;%\n  .[, `:=`(pct_insured = as.numeric(pct_insured), pct_insured_moe = as.numeric(pct_insured_moe))]\n\nAcquire the tract data for Alachua County and merge the Alachua insurance data based on their cooresponding GEOID values.\n\nexpress &lt;- expression(COUNTYFP == \"001\")\nalachua_insurance_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = fl_fips,\n  vintage = 2019,\n  general = TRUE,\n  express = express,\n  datafile = alachua_insurance_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(GEOID, pct_insured, pct_insured_moe, geometry)] %&gt;% \n  .[, `:=`(pct_insured = as.numeric(pct_insured), pct_insured_moe = as.numeric(pct_insured_moe))] %&gt;% \n  sf::st_as_sf() %&gt;% \n  sf::st_transform(4326) %&gt;% \n  sf::st_transform(., 6440)\n\n\nBefore computing the spatial join, layer the point data over the Gainsville, Florida tracts using mapview.\n\n\nmapview(\n  alachua_insurance_sf,\n  zcol = \"pct_insured\",\n  layer.name = \"% with health&lt;br/&gt;insurance\"\n) +\n  mapview(\n    gainesville_sf,\n    col.regions = \"red\",\n    legend = FALSE\n  )\n\n\n\n\nFigure 7.6: Layered interactive view of patients and Census tracts in Gainesville\n\n\nCompute the spatial join between simple features gainesville_sf tract geometries and the alachua_insurance_sf data related geometries using sf::st_join() function.\n\n\npatients_joined_sf &lt;- sf::st_join(\n  gainesville_sf,\n  alachua_insurance_sf\n)\n\nNote that sf::st_join() uses sf::st_intersection() by default to match x/y geometries or a point-in-polygon spatial join\n\n\n\n\nTable 7.2: Patients dataset after spatial join to Census tracts\n\n\npatient_id\nGEOID\npct_insured\npct_insured_moe\ngeometry\n\n\n\n\n1\n12001000700\n81.6\n7.0\nPOINT (812216.7 73640.25)\n\n\n2\n12001000500\n91.0\n5.1\nPOINT (811825.2 74659.57)\n\n\n3\n12001001515\n85.2\n6.2\nPOINT (807076.4 70862.57)\n\n\n4\n12001001603\n88.3\n5.1\nPOINT (805787.7 74365.85)\n\n\n5\n12001001100\n96.2\n2.7\nPOINT (805023.4 76970.8)\n\n\n6\n12001001902\n86.0\n5.9\nPOINT (816865.2 76944.63)\n\n\n7\n12001001803\n92.3\n4.0\nPOINT (806340.6 80741.36)\n\n\n8\n12001001813\n97.9\n1.4\nPOINT (802799 80741.87)\n\n\n9\n12001002207\n95.7\n2.4\nPOINT (800134.3 73668.88)\n\n\n10\n12001002205\n96.5\n1.6\nPOINT (797379.2 70937.49)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s say that we are interested in analyzing the distributions of neighborhoods (defined here as Census tracts) by Hispanic population for the four largest metropolitan areas in Texas. We’ll use the variable B01003_001 from the 2019 1-year ACS to acquire population data by core-based statistical area (CBSA) along with simple feature geometry which will eventually be used for the spatial join.\n\nGet the Texas cbsa geometries and merge it with population data. The CRS: NAD83(2011) / Texas Centric Albers Equal Area.\n\ntx_cbsa_geo_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  vintage = 2019,\n  general = TRUE,\n  state_filter = \"TX\",\n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  sf::st_transform(6579)\n\nGet the “B01003_001” population data for just the top 4 metro GEOID locations in tx_cbsa_geo_sf:\n\ntx_metro_pop_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B01003_001E\",\"B01003_001M\")\n) %&gt;% \n  data.table::setnames(old = c(\"B01003_001E\",\"B01003_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n  .[GEOID %in% tx_cbsa_geo_sf$GEOID] %&gt;% \n  .[order(-estimate)] %&gt;% \n  .[1:4,]\n\nJoin the dataframe tx_metro_pop_dt with the geometries provided by dataframe tx_cbsa_geo_sf based on their common “GEOID” values:\n\ntx_cbsa_sf &lt;- RcensusPkg::join_it(\n  df_1 = tx_cbsa_geo_sf,\n  df_2 = tx_metro_pop_dt,\n  key_1 = \"GEOID\",\n  key_2 = \"GEOID\",\n) %&gt;% \n  .[, `:=`(variable = \"B01003_001\", moe = NA)] %&gt;% \n  .[, .(GEOID, NAME, variable, estimate, moe, geometry)] %&gt;% \n  .[order(-estimate)] %&gt;% \n  sf::st_as_sf()\n\n\n\n\n\nTable 7.3: Large CBSAs in Texas\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\ngeometry\n\n\n\n\n19100\nDallas-Fort Worth-Arlington, TX\nB01003_001\n7573136\nNA\nMULTIPOLYGON (((1681247 760...\n\n\n26420\nHouston-The Woodlands-Sugar Land, TX\nB01003_001\n7066140\nNA\nMULTIPOLYGON (((2009903 730...\n\n\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1538306 729...\n\n\n12420\nAustin-Round Rock-Georgetown, TX\nB01003_001\n2227083\nNA\nMULTIPOLYGON (((1664195 732...\n\n\n\n\n\n\n\n\n\nObtain data on percent of Hispanic by tract from the ACS Data Profile for 2015-2019.\n\n\ntx_fips &lt;- usmap::fips(state = \"texas\")\npct_hispanic_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2019,\n  vars = c(\"DP05_0071PE\",\"DP05_0071PM\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", tx_fips)\n)\n\n\nObtain the geometries for tracts in the state of Texas and merge the percent of Hispanic data.\n\n\npct_hispanic_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = tx_fips,\n  vintage = 2019,\n  general = TRUE,\n  datafile = pct_hispanic_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 6579,\n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(.,old = c(\"DP05_0071PE\",\"DP05_0071PM\"), new = c(\"estimate\",\"moe\")) %&gt;% \n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe), variable = \"DP05_0071PE\")] %&gt;% \n  .[, .(GEOID, NAME, variable, estimate, moe, geometry)] %&gt;% \n  sf::st_as_sf()\n\n\n\n\n\nTable 7.4: Percent Hispanic by Census tract in Texas\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\ngeometry\n\n\n\n\n48001950100\nCensus Tract 9501, Anderson County, Texas\nDP05_0071PE\n12.0\n5.8\nMULTIPOLYGON (((1905956 754...\n\n\n48001950401\nCensus Tract 9504.01, Anderson County, Texas\nDP05_0071PE\n25.1\n2.6\nMULTIPOLYGON (((1892475 752...\n\n\n48001950402\nCensus Tract 9504.02, Anderson County, Texas\nDP05_0071PE\n23.2\n2.9\nMULTIPOLYGON (((1879518 752...\n\n\n48001950500\nCensus Tract 9505, Anderson County, Texas\nDP05_0071PE\n38.5\n8.2\nMULTIPOLYGON (((1907352 752...\n\n\n48001950600\nCensus Tract 9506, Anderson County, Texas\nDP05_0071PE\n3.2\n2.7\nMULTIPOLYGON (((1905825 751...\n\n\n48001950700\nCensus Tract 9507, Anderson County, Texas\nDP05_0071PE\n34.6\n6.6\nMULTIPOLYGON (((1911228 752...\n\n\n\n\n\n\n\n\n\n\n\nWe have a total of 5254 tracts in the state of Texas with Hispanic percentage. To reduce the number of tracts, select only those tract geometries that are within the four metropolitan areas.\n\nhispanic_by_metro_sf &lt;- sf::st_join(pct_hispanic_sf,tx_cbsa_sf, join = st_within, suffix = c(\"_tracts\", \"_metro\"), left = F)\n\nWe have reduced the number of tracts to 3189.\n\n\n\n\nTable 7.5: Census tracts after spatial join operation\n\n\n\nGEOID_tracts\nNAME_tracts\nvariable_tracts\nestimate_tracts\nmoe_tracts\nGEOID_metro\nNAME_metro\nvariable_metro\nestimate_metro\nmoe_metro\ngeometry\n\n\n\n\n42\n48013960100\nCensus Tract 9601, Atascosa County, Texas\nDP05_0071PE\n62.1\n6.8\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1647089 720...\n\n\n43\n48013960201\nCensus Tract 9602.01, Atascosa County, Texas\nDP05_0071PE\n68.3\n6.9\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1616126 722...\n\n\n44\n48013960202\nCensus Tract 9602.02, Atascosa County, Texas\nDP05_0071PE\n76.0\n3.9\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1618776 721...\n\n\n45\n48013960300\nCensus Tract 9603, Atascosa County, Texas\nDP05_0071PE\n83.1\n6.2\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1634154 721...\n\n\n46\n48013960401\nCensus Tract 9604.01, Atascosa County, Texas\nDP05_0071PE\n70.3\n12.8\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1639999 722...\n\n\n47\n48013960402\nCensus Tract 9604.02, Atascosa County, Texas\nDP05_0071PE\n46.6\n5.6\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1638944 720...\n\n\n\n\n\n\n\n\n\nPlot the density distribution of hispanic percent across the 4 metro areas.\n\nReshape hispanic_by_metro_sf from long to wide format:\n\nhispanic_by_metro_dt &lt;- data.table::as.data.table(hispanic_by_metro_sf) %&gt;% \n  .[estimate_tracts != -666666666, .(estimate_tracts, NAME_tracts, NAME_metro)] %&gt;%   \n   RcensusPkg::long_to_wide(id_v = \"NAME_tracts\", parameter_col = \"NAME_metro\", value_col = \"estimate_tracts\") %&gt;% \n  data.table::setnames(old = names(.), new = c(\"tracts\", \"Austin\", \"Dallas\", \"Houston\", \"SanAntonio\"))\n\nPlot the densities using RplotterPkg::create_density_ridge_plot():\n\nRplotterPkg::create_density_ridge_plot(\n  df = hispanic_by_metro_dt,\n  variables = names(hispanic_by_metro_dt)[2:5],\n  x_major_breaks = seq(0, 100, 25),\n  x_limits = c(0, 100),\n  x_title = \"Percent Hispanic/Latino in Census tract\",\n  y_major_breaks = seq(0.0, 0.03, 0.01),\n  y_limits = c(0.0, 0.03),\n  y_show_axis = TRUE,\n  plot_widths = 15,\n  plot_heights = 6.0,\n  density_color = \"navy\",\n  density_fill = \"navy\"\n)\n\n\n\n\nFigure 7.7: Faceted density plot of tract Hispanic populations by CBSA in Texas\n\n\n\n\n\nOutput from a spatial join operation can also be “rolled up” to a larger geography through group-wise data analysis.\n\n\nUsing basic data.table techniques, group by the 4 Texas metro areas and find their respective hispanic percent median values.\n\n\nmedian_by_metro_sf &lt;- data.table::as.data.table(hispanic_by_metro_sf) %&gt;% \n  .[, .(median_est = median(.SD$estimate_tracts, na.rm = T), geometry = sf::st_union(geometry)), by = NAME_metro] %&gt;% \n  sf::st_as_sf(.)\n\n\n\n\n\nTable 7.6: Summarized median Hispanic population by metro\n\n\nNAME_metro\nmedian_est\ngeometry\n\n\n\n\nSan Antonio-New Braunfels, TX\n52.60\nPOLYGON ((1619499 7170517, ...\n\n\nHouston-The Woodlands-Sugar Land, TX\n32.40\nMULTIPOLYGON (((1901162 724...\n\n\nAustin-Round Rock-Georgetown, TX\n25.85\nPOLYGON ((1700741 7302450, ...\n\n\nDallas-Fort Worth-Arlington, TX\n22.55\nPOLYGON ((1737530 7565076, ...\n\n\nNA\nNA\nGEOMETRYCOLLECTION EMPTY\n\n\nNA\nNA\nGEOMETRYCOLLECTION EMPTY\n\n\n\n\n\n\n\n\n\nMap the grouped geometry of the “Austin-Round Rock-Georgetown, TX” metro area.\n\n\naustin_sf &lt;- sf::st_as_sf(data.table::as.data.table(median_by_metro_sf)[3,])\n\naustin_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = austin_sf, \n  sf_fill = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n)\naustin_plot\n\n\n\n\n\nFigure 7.8: Dissolved geometry of Census tracts identified within the Austin CBSA\n\n\n\n\n\n\n\n\n\nCompare Census tract boundaries for a fast-growing area of Gilbert, Arizona (southeast of Phoenix) for 2015 and 2020.\n\n\naz_fips &lt;- usmap::fips(state = \"AZ\")\n\n# get 2015 tracts\ngilbert_2015_express &lt;- expression(GEOID == \"04013816000\")\ngilbert_2015_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2015,\n  general = TRUE,\n  express = gilbert_2015_express,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n# get 2020 tracts\ngilbert_2020_express &lt;- expression(GEOID %in% c(\"04013816001\",\"04013816002\",\"04013816003\",\"04013816005\",\"04013816004\"))\ngilbert_2020_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = gilbert_2020_express,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n\nPlot both the 2015 and 2020 tract geometries using RplotterPkg::multi_panel_grid() function:\n\ngilbert_2015_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2015_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  hide_x_tics = T,\n  hide_y_tics = T\n)\n\ngilbert_2020_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2020_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  hide_x_tics = T,\n  hide_y_tics = T\n)\nlayout &lt;- list(\n  plots = list(gilbert_2015_tracts_plot, gilbert_2020_tracts_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"2015 tracts\",\"2020 tracts\")\n)\n\n\n\n\n\nFigure 7.9: Comparison of Census tracts in Gilbert, AZ from the 2010 and 2020\n\n\n\n\nAreal interpolation refers to the allocation of data from one set of zones to a second overlapping set of zones that may or may not perfectly align spatially. In cases of mis-alignment, some type of weighting scheme needs to be specified to determine how to allocate partial data in areas of overlap. Two such approaches for interpolation are outlined here: area-weighted interpolation and population-weighted interpolation.\n\n\n\n\nThis method uses the area of overlap of geometries as the interpolation weights. From a technical standpoint, an intersection is computed between the origin geometries and the destination geometries. Weights are then computed as the proportion of the overall origin area comprised by the intersection.\n\n\nUse area weights to estimate data at 2020 geographies for the Census tract in Gilbert.\n\nAssign a variable to the land area of Gilbert and create a “proportion” column in the gilbert_2020_tracts_sf dataframe:\n\narea_2015 &lt;- gilbert_2015_tracts_sf$ALAND\n\ngilbert_2020_tracts_sf &lt;- gilbert_2020_tracts_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, proportion := round(ALAND/area_2015, digits = 3)] %&gt;% \n  sf::st_as_sf(.)\n\nPlot and label the tracts:\n\ngilbert_2020_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2020_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  subtitle = \"2020 tracts\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  geom_sf_label(data = gilbert_2020_tracts_sf, aes(label = proportion), fun.geometry = st_centroid)\ngilbert_2020_tracts_plot\n\n\n\n\n\nFigure 7.10: Illustration of area weights\n\n\n\n\nUse sf::st_interpolate_aw interpolation method to compare data for Maricopa County, AZ on the number of people working from home in the 2011-2015 ACS (which uses 2010 boundaries) and the 2016-2020 ACS (which uses 2020 boundaries).\n\nGet both the 2011-2015 and 2016-2020 acs/acs5 data for people working from home (“B08006_017”) for Maricopa County, AZ:\n\naz_fips &lt;- usmap::fips(state = \"AZ\")\naz_maricopa_fips &lt;- usmap::fips(state = \"AZ\", county = \"Maricopa\")\nmaricopa_fips &lt;- substr(az_maricopa_fips,3,5)\n\nwfh_2015_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2015,\n  vars = \"B08006_017E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", az_fips, \"+county:\", maricopa_fips)\n) %&gt;% \n  data.table::setnames(old = \"B08006_017E\", new = \"worked_at_home\") %&gt;% \n  .[, worked_at_home := as.numeric(worked_at_home)]\n\nwfh_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B08006_017E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", az_fips, \"+county:\", maricopa_fips)\n) %&gt;% \n  data.table::setnames(old = \"B08006_017E\", new = \"worked_at_home\") %&gt;% \n  .[, worked_at_home := as.numeric(worked_at_home)]\n\nGet the tract geographies for the years and join with the above data:\n\nexpress &lt;- expression(COUNTYFP == maricopa_fips)\nwfh_tracts_2015_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2015,\n  general = TRUE,\n  express = express,\n  datafile = wfh_2015_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26949,\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(worked_at_home, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nwfh_tracts_2020_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = express,\n  datafile = wfh_2020_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26949,\n  sf_info = FALSE,\n  output_dir = output_dir\n)%&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(worked_at_home, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nUse sf::st_interpolate_aw to estimate area-weighted interpolation:\n\nwfh_interpolate_aw_sf &lt;- sf::st_interpolate_aw(\n  wfh_tracts_2015_sf,\n  wfh_tracts_2020_sf,\n  extensive = TRUE\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, GEOID := wfh_2020_dt$GEOID] %&gt;% \n  sf::st_as_sf(.)\n\n\n\n\n\nArea interplolation using sf::st_interpolate_aw\n\n\nworked_at_home\nGEOID\ngeometry\n\n\n\n\n362.94291\n04013061044\nPOLYGON ((199614.5 327529.9...\n\n\n154.61054\n04013061045\nPOLYGON ((225387.6 307155.6...\n\n\n67.41170\n04013061046\nPOLYGON ((232623.7 304703.7...\n\n\n80.00828\n04013061047\nPOLYGON ((208921.6 310661.5...\n\n\n182.85828\n04013061048\nPOLYGON ((206044.3 310398.1...\n\n\n192.20883\n04013061049\nPOLYGON ((134351 332974, 13...\n\n\n\n\n\n\n\n\n\n\n\nSection has been skipped.\n\n\n\nSection has been skipped.\n\n\n\n\n\nConsider accessibility to Level I and Level II trauma hospitals by Census tract in the state of Iowa.\n\nGet the US hospital locations:\n\nhospitals_file_path &lt;- file.path(here::here(), \"data\", \"Hospitals.gz\")\n\ntrauma_sf &lt;- data.table::fread(hospitals_file_path) %&gt;%\n  unique(., by = \"ID\") %&gt;% \n  .[TRAUMA %in% c(\"LEVEL I\", \"LEVEL II\")] %&gt;% \n  sf::st_as_sf(., coords = c(\"LONGITUDE\",\"LATITUDE\"), crs=sf::st_crs(4269), remove = FALSE)\n\nGet the Census tracts for the state of Iowa:\n\nia_fips &lt;- usmap::fips(state = \"Iowa\")\nia_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ia_fips,\n  vintage = 2019,\n  output_dir = output_dir,\n  sf_info = F\n)\n\n\n\n\nTo determine accessibility of Iowa Census tracts to Level I or II trauma centers, we need to identify not only those hospitals that are located in Iowa, but also those in other states near to the Iowa border, such as in Omaha, Nebraska and Rock Island, Illinois.\n\nApply a distance threshold with sf::st_filter() and st::st_is_within_distance() set at 100km\n\nia_trauma_sf &lt;- trauma_sf %&gt;% \n  sf::st_filter(ia_tracts_sf, \n     .predicate = st_is_within_distance,\n     dist = 100000) %&gt;% \n  sf::st_transform(.,sf::st_crs(26975))\n\nia_tracts_sf &lt;- sf::st_transform(ia_tracts_sf, sf::st_crs(26975))\n\nPlot the Trauma centers located within distance of the Iowa tracts:\n\nRspatialPkg::get_geom_sf(\n  sf = ia_tracts_sf,\n  sf_color = \"gray50\",\n  sf_fill = \"gray50\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n  \n) + RspatialPkg::get_geom_sf(\n  sf = ia_trauma_sf,\n  sf_fill = \"red\",\n  sf_size = 4,\n  adding = T)\n\n\n\n\n\nFigure 7.14: Level I or II trauma centers within 100km of Iowa\n\n\n\n\nCalculate the distances from the centroids of Iowa Census tracts (reflecting the center points of each tract geometry) to each trauma center.\n\n\ndist_mt &lt;- ia_tracts_sf %&gt;%\n  sf::st_centroid() %&gt;%\n  sf::st_distance(ia_trauma_sf) \n\nmin_dist_v &lt;- dist_mt %&gt;%\n  apply(1, min) %&gt;%\n  as.vector() %&gt;%\n  magrittr::divide_by(1000) \n\nShow the distribution of the minimum distances in a histogram:\n\nRplotterPkg::create_histogram_plot(\n  df = data.frame(min_distance = min_dist_v),\n  aes_x = \"min_distance\",\n  bin_breaks = seq(0, 140, 10),\n  x_limits = c(0, 140),\n  x_major_breaks = seq(0, 140, 20),\n  bar_fill = 'green'\n)\n\n\n\n\n\nFigure 7.15: Histogram of minimum distances to trauma centers\n\n\n\n\n\n\nThis section is skipped.\n\n\n\n\n…you’ll want to analyze accessibility in a more local way. A common use case might involve a study of the demographic characteristics of a hospital catchment area, defined as the area around a hospital from which patients will likely come.\n\n\nUse Iowa Methodist Medical Center in Des Moines as an example and the distance-based approach using a buffer, implemented with the sf::st_buffer().\n\nCompute the 5k buffer around the Iowa Methodist Medical Center:\n\niowa_methodist_sf &lt;- data.table::as.data.table(ia_trauma_sf) %&gt;% \n  .[ID == 9850308,] %&gt;% \n  sf::st_as_sf(.)\n\niowa_methodist_buf5km_sf &lt;- sf::st_buffer(iowa_methodist_sf, dist = 5000) \n\nPlot the buffer with leaflet:\n\nhospital_icon &lt;- leaflet::makeAwesomeIcon(icon = \"ios-medical\", \n                           markerColor = \"red\",\n                           library = \"ion\")\n\n\niowa_methodist_buf5km_lf &lt;- leaflet::leaflet() %&gt;% \n  leaflet::addTiles() %&gt;%\n  leaflet::addPolygons(data = sf::st_transform(iowa_methodist_buf5km_sf, 4326)) %&gt;% \n  leaflet::addAwesomeMarkers(data = st_transform(iowa_methodist_sf, 4326),\n                    icon = hospital_icon)\niowa_methodist_buf5km_lf\n\n\n\n\nFigure 7.17: Synced map showing buffer catchment areas in Des Moines\n\n\n\n\nNote: this section has not been completed.\n\n\n\n\n\nMap the median household income by Census tract in Manhattan (New York County), NY\n\nGet the median household income data:\n\nny_state_county_fips &lt;- usmap::fips(state = \"New York\", county = \"New York\")\nny_state_fips &lt;- substr(ny_state_county_fips, 1,2)\nny_county_fips &lt;- substr(ny_state_county_fips, 3, 5)\n\nny_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B19013_001E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", ny_state_fips, \"+county:\", ny_county_fips)\n) %&gt;% \n  data.table::setnames(old = \"B19013_001E\", new = \"median_income\") %&gt;% \n  .[, median_income := as.numeric(median_income)] %&gt;% \n  .[median_income &gt; 0.0]\n\nGet the New York county tract shapefiles and join with the above income data:\n\nexpress &lt;- expression(COUNTYFP == ny_county_fips)\nny_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ny_state_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = express,\n  datafile = ny_income_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(median_income, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nMap the tract shapefiles and data:\n\nRspatialPkg::get_geom_sf(\n  sf = ny_tracts_sf,\n  aes_fill = \"median_income\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n   ggplot2::scale_fill_viridis_c(labels = scales::label_dollar())\n\n\n\n\n\nFigure 7.18: Map of Manhattan with default CB geometries\n\n\n\n\nAs illustrated in the graphic, the boundaries of Manhattan include water boundaries - stretching into the Hudson and East Rivers. In turn, a more accurate representation of Manhattan’s land area might be desired.\n\n\n\n\nRemove water area from the Census tracts of New York county.\n\nRe-define the New York tracts by setting the general parameter to FALSE:\n\nexpress &lt;- expression(COUNTYFP == ny_county_fips)\nny_tracts_2_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ny_state_fips,\n  vintage = 2020,\n  general = FALSE,\n  transform_crs = 6538,\n  express = express,\n  datafile = ny_income_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(median_income, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nUse RcensusPkg::remove_area_water() to remove area water from the New York tracts:\n\nny_tracts_without_water_sf &lt;- RcensusPkg::remove_area_water(ny_tracts_2_sf, output_dir = output_dir)\n\nMap the New York tracts both with and without water:\n\nny_tracts_with_water_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = ny_tracts_2_sf,\n  sf_fill = \"green\",\n  sf_alpha = 0.5,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  show_legend = F\n)\nny_tracts_without_water_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = ny_tracts_without_water_sf,\n  sf_fill = \"green\",\n  sf_alpha = 0.5,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  show_legend = F\n)\n\nlayout &lt;- list(\n  plots = list(ny_tracts_with_water_plot, ny_tracts_without_water_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\n\nny_tracts_multi_plot &lt;- RplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"with water\", \"without water\")\n)\nny_tracts_multi_plot\n\n\n\n\n\nFigure 7.19: Map of Manhattan with water areas erased\n\n\n\n\n\n\n\n\nExplore spatial patterns and spatial clustering of a given demographic attribute (Exploratory Spatial Data Analysis or ESDA).\n\nAs an example, acquire a dataset on median age by Census tract in the Dallas-Fort Worth, TX metropolitan area:\n\ntx_fips &lt;- usmap::fips(state = \"TX\")\n\ntx_tracts_median_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B01002_001E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", tx_fips)\n) %&gt;% \n  data.table::setnames(old = \"B01002_001E\", new = \"median_age\") %&gt;% \n  .[, .(NAME, tract, median_age = as.numeric(median_age), GEOID)] %&gt;% \n  .[median_age &gt; 0,]\n\nGet the geometries for the Dallas area CBSA:\n\ndallas_cbsa_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  vintage = 2020,\n  state_filter = \"TX\",\n  city_filter = \"Dallas-Fort Worth-Arlington\",\n  general = T,\n  transform_crs = 32138,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nGet the Texas Census tracts and age data for just within the Dallas CBSA geometries:\n\ndallas_tracts_median_age_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = tx_fips,\n  vintage = 2020,\n  general = T,\n  transform_crs = 32138,\n  datafile = tx_tracts_median_age_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  check_na = T,\n  sf_info = F\n) %&gt;% \nsf::st_filter(dallas_cbsa_sf, .predicate = st_within)\n\nPlot the Dallas area tracts with their color coded median age:\n\ndallas_tracts_median_age_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = dallas_tracts_median_age_sf,\n  aes_fill = \"median_age\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_viridis_c(na.value = \"white\")\ndallas_tracts_median_age_plot\n\n\n\n\n\n\n\n\n\n\n\nUsing spdep::poly2nb() find polygons in the above Dallas median age shapefile that share at least one vertex to be considered neighbors.\n\n\nneighbors_lst &lt;- spdep::poly2nb(\n  pl = dallas_tracts_median_age_sf, \n  queen = TRUE\n)\n\nsummary(neighbors_lst)\n\nNeighbour list object:\nNumber of regions: 1699 \nNumber of nonzero links: 10930 \nPercentage nonzero weights: 0.378646 \nAverage number of links: 6.433196 \nLink number distribution:\n\n  2   3   4   5   6   7   8   9  10  11  12  13  14  15  17 \n  8  52 172 305 396 343 218 112  44  29  11   5   2   1   1 \n8 least connected regions:\n707 1070 1097 1143 1239 1415 1503 1689 with 2 links\n1 most connected region:\n685 with 17 links\n\n\nTract’s average number of neighbors: 6.4; Minimum: 2; Maximum: 17\n\nShow the neighbors of the Census tract at row index 1:\n\n\nneighbors_lst[[1]]\n\n[1]  2  3  8 73 77\n\n\n\n\n\n\nTo perform exploratory spatial data analysis, we can convert the neighbors list object into spatial weights. Spatial weights define how metrics associated with a feature’s neighbors should be weighted.\n\n\nConvert the above neighbors list to a weights matrix.\n\n\nweights_lst &lt;- spdep::nb2listw(\n  neighbours = neighbors_lst, \n  style = \"W\"\n)\nweights_lst$weights[[1]]\n\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nRow index 1 has five neighbors, each neighbor is assigned the weight 0.2\n\n\n\n\n\nWith respect to the exploratory spatial analysis of Census data, we might be interested in the degree to which a given Census variable clusters spatially, and subsequently where those clusters are found.\n\n\n\n\nCompute the average median age for the neighbors of each Census tract in the Dallas-Fort Worth metropolitan area.\n\n\nlag_v &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dallas_tracts_median_age_sf$median_age\n)\n\n\nDraw a scatterplot of the ACS estimate vs. its lagged mean to do a preliminary assessment of spatial clustering in the data.\n\n\ndt &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, lag_median_age := lag_v]\n\nRplotterPkg::create_scatter_plot(\n  df = dt,\n  aes_x = \"median_age\",\n  aes_y = \"lag_median_age\",\n  x_title = \"Median Age\",\n  y_title = \"Spatial lag, median age\"\n  \n) +\n  geom_abline(color = \"red\")\n\n\n\n\n\nFigure 7.21: Scatterplot of median age relative to its spatial lag\n\n\n\n\nCompute Moran’s I, which is similar to a correlation coefficient but for the relationship between observations and their neighbors.\n\n\nspdep::moran.test(\n  x = dallas_tracts_median_age_sf$median_age, \n  listw = weights_lst\n)\n\n\n    Moran I test under randomisation\n\ndata:  dallas_tracts_median_age_sf$median_age  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 21.275, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2926713016     -0.0005889282      0.0001900099 \n\n\nThe Moran’s I statistic of 0.29 is positive, and the small p-value suggests that we reject the null hypothesis of spatial randomness in the dataset\n\n\n\n\nLocal measures of spatial autocorrelation disaggregate global results to identify “hot spots” of similar values within a given spatial dataset.\n\n\nThe equation (Gi*) computes a ratio of the weighted average of the neighborhood values to the total sum of values for the dataset. Results are returned as z-scores.\n\n\nlocalg_weights_lst &lt;- spdep::nb2listw(\n  spdep::include.self(neighbors_lst)\n)\n\nlocalG_v &lt;- spdep::localG(\n  x = dallas_tracts_median_age_sf$median_age, \n  listw = localg_weights_lst\n)\n\n\nCreate a cholorplath map of the Dallas tracts based on their respective weighted neighbor tracts average of median age.\n\n\ndallas_tracts_localG_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;%\n  .[, localG := as.numeric(localG_v)] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_localG_sf,\n  aes_fill = \"localG\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_distiller(palette = \"RdYlBu\")\n\n\n\n\n\nFigure 7.22: Map of local Gi* scores\n\n\n\n\nUse the Gi* z-scores from dallas_tracts_localG_sf to define values greater than 2.5 as a “High cluster” and below -2.5 as “Low cluster” and map these areas.\n\nAdd a column indicating the 3 levels:\n\ndallas_tracts_localG_sf &lt;- data.table::as.data.table(dallas_tracts_localG_sf) %&gt;% \n  .[, hotspot := fcase(\n    localG &gt;= 2.576, \"High cluster\",\n    localG &lt;= -2.576, \"Low cluster\",\n    default = \"Not significant\"\n  )\n  ] %&gt;% \n  .[, hotspot := as.factor(hotspot)] %&gt;% \n  sf::st_as_sf(.)\n\nPlot and color code the levels of cluster:\n\ncolors &lt;- c(\"red\",\"blue\",\"grey\")\nnames(colors) &lt;- c(\"High cluster\", \"Low cluster\", \"Not significant\")\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_localG_sf,\n  aes_fill = \"hotspot\",\n  sf_color = \"white\",\n  scale_values = colors,\n  scale_labels = names(colors),\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) \n\n\n\n\n\nFigure 7.23: Map of local Gi* scores with significant clusters highlighted\n\n\n\n\nThe red areas on the resulting map are representative of “high” clustering of median age, where neighborhoods with older populations are surrounded by other older-age neighbors. “Low” clusters are represented in blue, which reflect clustering of Census tracts with comparatively youthful populations.\n\n\n\n\n\nOne of the major benefits of using LISA for exploratory analysis is its ability to identify both spatial clusters, where observations are surrounded by similar values, and spatial outliers, where observations are surrounded by dissimilar values.\n\n\nCompute the LISA values for median age among the Dallas tracts.\n\nSet a random number seed and convert the median age to a z-score using scale():\n\nset.seed(1983)\n\ndallas_tracts_median_age_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, scaled_median_age := as.numeric(scale(median_age))] %&gt;% \n  sf::st_as_sf(.)\n\nCompute LISA with localmoran_perm() for the scaled value of median age:\n\ndallas_tracts_median_age_LISA_dt &lt;- spdep::localmoran_perm(\n  x = dallas_tracts_median_age_sf$scaled_median_age,\n  listw = weights_lst,\n  nsim = 999L,\n  alternative = \"two.sided\"\n) %&gt;% data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = colnames(.), new = c(\"local_i\",\"exp_i\",\"var_i\",\"z_i\",\"p_i\",\"p_i_sim\",\"pi_sim_folded\",\"skewness\",\"kurtosis\"))\n\nCompute the lagged value of scaled_median_age using spdep::lag.listw():\n\nlag_scaled_median_age_v &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dallas_tracts_median_age_sf$scaled_median_age\n)\n\nCombine vectors/columns:\n\ndallas_tracts_median_age_LISA_dt &lt;- dallas_tracts_median_age_LISA_dt %&gt;% \n  .[, `:=`(GEOID = dallas_tracts_median_age_sf$GEOID, scaled_median_age = dallas_tracts_median_age_sf$scaled_median_age, lagged_median_age = lag_scaled_median_age_v)]\n\n\n\n\n\nTable 7.8: Local Moran’s I results\n\n\nGEOID\nscaled_median_age\nlagged_median_age\n\n\n\n\n48085030101\n-0.6163538\n0.2278064\n\n\n48085030102\n1.3837469\n0.0925054\n\n\n48085030201\n-0.1457419\n-0.0254149\n\n\n48085030202\n0.8837218\n-0.1709532\n\n\n48085030204\n-0.4987008\n-0.2290794\n\n\n48085030205\n-0.8369531\n0.0564742\n\n\n\n\n\n\n\n\n\nFrom dallas_tracts_median_age_LISA_dt complete a LISA quadrant scatterplot.\n\n\ndallas_tracts_median_age_LISA_dt[, lisa_cluster := fcase(\n  p_i &gt;= 0.05, \"Not significant\",\n  scaled_median_age &gt; 0 & local_i &gt; 0, \"High-high\",\n  scaled_median_age &gt; 0 & local_i &lt; 0, \"High-low\",\n  scaled_median_age &lt; 0 & local_i &gt; 0, \"Low-low\",\n  scaled_median_age &lt; 0 & local_i &lt; 0, \"Low-high\"\n)]\n\ncolor_values &lt;- c(`High-high` = \"red\",\n                  `High-low` = \"pink\",\n                  `Low-low` = \"blue\",\n                  `Low-high` = \"lightblue\",\n                  `Not significant` = \"white\"\n                )\n\nRplotterPkg::create_scatter_plot(\n  df = dallas_tracts_median_age_LISA_dt,\n  aes_x = \"scaled_median_age\",\n  aes_y = \"lagged_median_age\",\n  aes_fill = \"lisa_cluster\",\n  x_title = \"Median age (z-score)\",\n  y_title = \"Spatial lag of median age (z-score)\",\n  pts_size = 2\n) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\") +\n  scale_fill_manual(values = color_values)\n\n\n\n\n\nFigure 7.24: LISA quadrant scatterplot\n\n\n\n\nObservations falling in the top-right quadant represent “high-high” clusters, where Census tracts with higher than median age are also surrounded by Census tracts with older populations. The bottom-left quadrant also represents spatial clusters, but instead includes lower median age tracts that are surrounded by tracts with similarly low median ages. The top-left and bottom-right quadrants are home to spatial outliers, where values are dissimilar from their neighbors.\n\n\nMap the cluster areas.\n\n\ndallas_tracts_median_age_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, lisa_cluster := dallas_tracts_median_age_LISA_dt$lisa_cluster] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_median_age_sf,\n  aes_fill = \"lisa_cluster\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_manual(values = color_values)\n\n\n\n\n\nFigure 7.25: LISA cluster map\n\n\n\n\nOlder clusters are colored red; Younger clusters are dark blue; low-high clusters are Census tracts with large quantities of multifamily housing adjacent to predominantly single-family neighborhoods."
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#spatial-overlay",
    "href": "7_spatial_analysis_with_census.html#spatial-overlay",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "In this representation, different components of the landscape that interact in the real world are abstracted out into different layers, represented by different geometries. For example, Census tracts might be represented as polygons; customers as points; and roads as linestrings.\n\n\n\n\nIn any workflow using spatial overlay, including all of the methods discussed in this chapter, it is essential that all layers share the same CRS for overlay methods to work.\n\nUse the sf::st_transform() to transform data toe the projected CRS.\n\n\n\n\nGiven that Census spatial datasets are designed to align with one another, spatial overlay can be used to identify geographic features that fall within a given metropolitan area and extract those features.\n\n\nOverlay the boundary geometries of the Kansas City metropolitan area with the state tract boundaries of Kansas and Missouri.\n\nGet the fips numbers for the states of Kansas and Missouri:\n\nks_fips &lt;- usmap::fips(state = \"kansas\")\nmo_fips &lt;- usmap::fips(state = \"missouri\")\n\nGet the combined tracts of both states:\n\nks_mo_tracts_sf &lt;- purrr::map_dfr(\n  c(ks_fips, mo_fips), \n  ~{RcensusPkg::tiger_tracts_sf(\n      state = .x, \n      general = TRUE, \n      transform_crs = 8528, \n      sf_info = FALSE,\n      output_dir = output_dir, \n    )\n  }\n)\n\nGet the metropolitan area (core-based statistical area) of Kansas City:\n\nkc_metro_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  general = TRUE,\n  city_filter = \"Kansas City\",\n  transform_crs = 8528,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n\nMap the overlay of metropolitan area geometries with the Kansas-Missouri tracts geometries:\n\nRspatialPkg::get_geom_sf(\n  sf = ks_mo_tracts_sf,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  sf_fill = \"white\",\n  sf_color = \"gray\",\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.2: The Kansas City CBSA relative to Kansas and Missouri\n\n\n\n\n\n\n\nSubset and map ks_mo_tracts_sf tract geometries to just the CBSA Kansas City geometries kc_metro_sf.\n\nNote that [] operator is using the default spatial function sf::st_intersect() to accomplish the intersection. It returns tracts that are within the metro’s boundary and those that cross or touch the boundary.\n\nkc_tracts_sf &lt;- ks_mo_tracts_sf[kc_metro_sf,]\n\nRspatialPkg::get_geom_sf(\n  sf = kc_tracts_sf,\n  sf_fill = \"white\",\n  sf_color = \"grey\",\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.3: Census tracts that intersect the Kansas City CBSA\n\n\n\n\nUse the spatial predicate sf::st_within() to return tracts only within the Kansas City CBSA geometries.\n\n\nkc_tracts_within_sf &lt;- kc_tracts_sf[kc_metro_sf, op = sf::st_within]\n\n\nRspatialPkg::get_geom_sf(\n  sf = kc_tracts_within_sf,\n  sf_fill = \"white\",\n  sf_color = \"grey\",\n  panel_color = \"white\",\n  panel_border_color = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\nRspatialPkg::get_geom_sf(\n  sf = kc_metro_sf,\n  sf_color = \"red\",\n  sf_alpha = 0.0,\n  sf_linewidth = 0.5,\n  adding = TRUE\n)\n\n\n\n\n\nFigure 7.4: Census tracts that are within the Kansas City CBSA"
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#spatial-joins",
    "href": "7_spatial_analysis_with_census.html#spatial-joins",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Let’s consider a hypothetical task where a health data analyst in Gainesville, Florida needs to determine the percentage of residents age 65 and up who lack health insurance in patients’ neighborhoods. The analyst has a dataset of patients with patient ID along with longitude and latitude information.\n\nCreate a hypothetical dataset:\n\ngainesville_patients_dt &lt;- data.table(\n  patient_id = 1:10,\n  longitude = c(-82.308131, -82.311972, -82.361748, -82.374377, \n                -82.38177, -82.259461, -82.367436, -82.404031, \n                -82.43289, -82.461844),\n  latitude = c(29.645933, 29.655195, 29.621759, 29.653576, \n               29.677201, 29.674923, 29.71099, 29.711587, \n               29.648227, 29.624037)\n)\n\n\n\n\n\nTable 7.1: Hypothetical dataset of patients in Gainesville, Florida\n\n\npatient_id\nlongitude\nlatitude\n\n\n\n\n1\n-82.30813\n29.64593\n\n\n2\n-82.31197\n29.65519\n\n\n3\n-82.36175\n29.62176\n\n\n4\n-82.37438\n29.65358\n\n\n5\n-82.38177\n29.67720\n\n\n6\n-82.25946\n29.67492\n\n\n\n\n\n\n\n\nUsing sf::st_as_sf() convert the dataframe to a simple features object with a geometry column:\n\nBy convention, the coordinate reference system used for longitude / latitude data is WGS 1984, represented with the EPSG code 4326. We’ll need to specify this CRS in st_as_sf() so that sf can locate the points correctly before we transform to an appropriate projected coordinate reference system with st_transform().\n\n\ngainesville_sf &lt;- gainesville_patients_dt %&gt;% \n  sf::st_as_sf(coords = c(\"longitude\",\"latitude\"), crs = 4326) %&gt;% \n  sf::st_transform(6440)\n\nMap the sf with mapview():\n\nmapview::mapview(\n  x = gainesville_sf,\n  col.regions = \"red\",\n  legend = F\n)\n\n\n\n\nFigure 7.5: Map of hypothetical patient locations in Gainsville, Florida\n\nAcquire health insurance percent (“DP03_0096PE”,“DP03_0096PM”) coverage by tract from the American Community Survey (“acs/acs5/profile”). Gainsville is within Alachua County, Florida with data available from the 2015-2019 5-year ACS.\n\nfl_alachua_fips &lt;- usmap::fips(state = \"florida\", county = \"alachua\")\nfl_fips &lt;- substr(fl_alachua_fips,1,2)\nalachua_fips &lt;- substr(fl_alachua_fips,3,5)\n\nalachua_insurance_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2019,\n  vars = c(\"DP03_0096PE\", \"DP03_0096PM\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", fl_fips, \"+county:\", alachua_fips)\n) %&gt;% \n  data.table::setnames(., old = c(\"DP03_0096PE\", \"DP03_0096PM\"),new = c(\"pct_insured\",\"pct_insured_moe\")) %&gt;%   .[, .(GEOID, pct_insured, pct_insured_moe)] %&gt;%\n  .[, `:=`(pct_insured = as.numeric(pct_insured), pct_insured_moe = as.numeric(pct_insured_moe))]\n\nAcquire the tract data for Alachua County and merge the Alachua insurance data based on their cooresponding GEOID values.\n\nexpress &lt;- expression(COUNTYFP == \"001\")\nalachua_insurance_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = fl_fips,\n  vintage = 2019,\n  general = TRUE,\n  express = express,\n  datafile = alachua_insurance_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(GEOID, pct_insured, pct_insured_moe, geometry)] %&gt;% \n  .[, `:=`(pct_insured = as.numeric(pct_insured), pct_insured_moe = as.numeric(pct_insured_moe))] %&gt;% \n  sf::st_as_sf() %&gt;% \n  sf::st_transform(4326) %&gt;% \n  sf::st_transform(., 6440)\n\n\nBefore computing the spatial join, layer the point data over the Gainsville, Florida tracts using mapview.\n\n\nmapview(\n  alachua_insurance_sf,\n  zcol = \"pct_insured\",\n  layer.name = \"% with health&lt;br/&gt;insurance\"\n) +\n  mapview(\n    gainesville_sf,\n    col.regions = \"red\",\n    legend = FALSE\n  )\n\n\n\n\nFigure 7.6: Layered interactive view of patients and Census tracts in Gainesville\n\n\nCompute the spatial join between simple features gainesville_sf tract geometries and the alachua_insurance_sf data related geometries using sf::st_join() function.\n\n\npatients_joined_sf &lt;- sf::st_join(\n  gainesville_sf,\n  alachua_insurance_sf\n)\n\nNote that sf::st_join() uses sf::st_intersection() by default to match x/y geometries or a point-in-polygon spatial join\n\n\n\n\nTable 7.2: Patients dataset after spatial join to Census tracts\n\n\npatient_id\nGEOID\npct_insured\npct_insured_moe\ngeometry\n\n\n\n\n1\n12001000700\n81.6\n7.0\nPOINT (812216.7 73640.25)\n\n\n2\n12001000500\n91.0\n5.1\nPOINT (811825.2 74659.57)\n\n\n3\n12001001515\n85.2\n6.2\nPOINT (807076.4 70862.57)\n\n\n4\n12001001603\n88.3\n5.1\nPOINT (805787.7 74365.85)\n\n\n5\n12001001100\n96.2\n2.7\nPOINT (805023.4 76970.8)\n\n\n6\n12001001902\n86.0\n5.9\nPOINT (816865.2 76944.63)\n\n\n7\n12001001803\n92.3\n4.0\nPOINT (806340.6 80741.36)\n\n\n8\n12001001813\n97.9\n1.4\nPOINT (802799 80741.87)\n\n\n9\n12001002207\n95.7\n2.4\nPOINT (800134.3 73668.88)\n\n\n10\n12001002205\n96.5\n1.6\nPOINT (797379.2 70937.49)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s say that we are interested in analyzing the distributions of neighborhoods (defined here as Census tracts) by Hispanic population for the four largest metropolitan areas in Texas. We’ll use the variable B01003_001 from the 2019 1-year ACS to acquire population data by core-based statistical area (CBSA) along with simple feature geometry which will eventually be used for the spatial join.\n\nGet the Texas cbsa geometries and merge it with population data. The CRS: NAD83(2011) / Texas Centric Albers Equal Area.\n\ntx_cbsa_geo_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  vintage = 2019,\n  general = TRUE,\n  state_filter = \"TX\",\n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  sf::st_transform(6579)\n\nGet the “B01003_001” population data for just the top 4 metro GEOID locations in tx_cbsa_geo_sf:\n\ntx_metro_pop_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = c(\"B01003_001E\",\"B01003_001M\")\n) %&gt;% \n  data.table::setnames(old = c(\"B01003_001E\",\"B01003_001M\"), new = c(\"estimate\", \"moe\")) %&gt;%\n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe))] %&gt;% \n  .[GEOID %in% tx_cbsa_geo_sf$GEOID] %&gt;% \n  .[order(-estimate)] %&gt;% \n  .[1:4,]\n\nJoin the dataframe tx_metro_pop_dt with the geometries provided by dataframe tx_cbsa_geo_sf based on their common “GEOID” values:\n\ntx_cbsa_sf &lt;- RcensusPkg::join_it(\n  df_1 = tx_cbsa_geo_sf,\n  df_2 = tx_metro_pop_dt,\n  key_1 = \"GEOID\",\n  key_2 = \"GEOID\",\n) %&gt;% \n  .[, `:=`(variable = \"B01003_001\", moe = NA)] %&gt;% \n  .[, .(GEOID, NAME, variable, estimate, moe, geometry)] %&gt;% \n  .[order(-estimate)] %&gt;% \n  sf::st_as_sf()\n\n\n\n\n\nTable 7.3: Large CBSAs in Texas\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\ngeometry\n\n\n\n\n19100\nDallas-Fort Worth-Arlington, TX\nB01003_001\n7573136\nNA\nMULTIPOLYGON (((1681247 760...\n\n\n26420\nHouston-The Woodlands-Sugar Land, TX\nB01003_001\n7066140\nNA\nMULTIPOLYGON (((2009903 730...\n\n\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1538306 729...\n\n\n12420\nAustin-Round Rock-Georgetown, TX\nB01003_001\n2227083\nNA\nMULTIPOLYGON (((1664195 732...\n\n\n\n\n\n\n\n\n\nObtain data on percent of Hispanic by tract from the ACS Data Profile for 2015-2019.\n\n\ntx_fips &lt;- usmap::fips(state = \"texas\")\npct_hispanic_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2019,\n  vars = c(\"DP05_0071PE\",\"DP05_0071PM\"),\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", tx_fips)\n)\n\n\nObtain the geometries for tracts in the state of Texas and merge the percent of Hispanic data.\n\n\npct_hispanic_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = tx_fips,\n  vintage = 2019,\n  general = TRUE,\n  datafile = pct_hispanic_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 6579,\n  sf_info = F,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(.,old = c(\"DP05_0071PE\",\"DP05_0071PM\"), new = c(\"estimate\",\"moe\")) %&gt;% \n  .[, `:=`(estimate = as.numeric(estimate), moe = as.numeric(moe), variable = \"DP05_0071PE\")] %&gt;% \n  .[, .(GEOID, NAME, variable, estimate, moe, geometry)] %&gt;% \n  sf::st_as_sf()\n\n\n\n\n\nTable 7.4: Percent Hispanic by Census tract in Texas\n\n\nGEOID\nNAME\nvariable\nestimate\nmoe\ngeometry\n\n\n\n\n48001950100\nCensus Tract 9501, Anderson County, Texas\nDP05_0071PE\n12.0\n5.8\nMULTIPOLYGON (((1905956 754...\n\n\n48001950401\nCensus Tract 9504.01, Anderson County, Texas\nDP05_0071PE\n25.1\n2.6\nMULTIPOLYGON (((1892475 752...\n\n\n48001950402\nCensus Tract 9504.02, Anderson County, Texas\nDP05_0071PE\n23.2\n2.9\nMULTIPOLYGON (((1879518 752...\n\n\n48001950500\nCensus Tract 9505, Anderson County, Texas\nDP05_0071PE\n38.5\n8.2\nMULTIPOLYGON (((1907352 752...\n\n\n48001950600\nCensus Tract 9506, Anderson County, Texas\nDP05_0071PE\n3.2\n2.7\nMULTIPOLYGON (((1905825 751...\n\n\n48001950700\nCensus Tract 9507, Anderson County, Texas\nDP05_0071PE\n34.6\n6.6\nMULTIPOLYGON (((1911228 752...\n\n\n\n\n\n\n\n\n\n\n\nWe have a total of 5254 tracts in the state of Texas with Hispanic percentage. To reduce the number of tracts, select only those tract geometries that are within the four metropolitan areas.\n\nhispanic_by_metro_sf &lt;- sf::st_join(pct_hispanic_sf,tx_cbsa_sf, join = st_within, suffix = c(\"_tracts\", \"_metro\"), left = F)\n\nWe have reduced the number of tracts to 3189.\n\n\n\n\nTable 7.5: Census tracts after spatial join operation\n\n\n\nGEOID_tracts\nNAME_tracts\nvariable_tracts\nestimate_tracts\nmoe_tracts\nGEOID_metro\nNAME_metro\nvariable_metro\nestimate_metro\nmoe_metro\ngeometry\n\n\n\n\n42\n48013960100\nCensus Tract 9601, Atascosa County, Texas\nDP05_0071PE\n62.1\n6.8\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1647089 720...\n\n\n43\n48013960201\nCensus Tract 9602.01, Atascosa County, Texas\nDP05_0071PE\n68.3\n6.9\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1616126 722...\n\n\n44\n48013960202\nCensus Tract 9602.02, Atascosa County, Texas\nDP05_0071PE\n76.0\n3.9\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1618776 721...\n\n\n45\n48013960300\nCensus Tract 9603, Atascosa County, Texas\nDP05_0071PE\n83.1\n6.2\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1634154 721...\n\n\n46\n48013960401\nCensus Tract 9604.01, Atascosa County, Texas\nDP05_0071PE\n70.3\n12.8\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1639999 722...\n\n\n47\n48013960402\nCensus Tract 9604.02, Atascosa County, Texas\nDP05_0071PE\n46.6\n5.6\n41700\nSan Antonio-New Braunfels, TX\nB01003_001\n2550960\nNA\nMULTIPOLYGON (((1638944 720...\n\n\n\n\n\n\n\n\n\nPlot the density distribution of hispanic percent across the 4 metro areas.\n\nReshape hispanic_by_metro_sf from long to wide format:\n\nhispanic_by_metro_dt &lt;- data.table::as.data.table(hispanic_by_metro_sf) %&gt;% \n  .[estimate_tracts != -666666666, .(estimate_tracts, NAME_tracts, NAME_metro)] %&gt;%   \n   RcensusPkg::long_to_wide(id_v = \"NAME_tracts\", parameter_col = \"NAME_metro\", value_col = \"estimate_tracts\") %&gt;% \n  data.table::setnames(old = names(.), new = c(\"tracts\", \"Austin\", \"Dallas\", \"Houston\", \"SanAntonio\"))\n\nPlot the densities using RplotterPkg::create_density_ridge_plot():\n\nRplotterPkg::create_density_ridge_plot(\n  df = hispanic_by_metro_dt,\n  variables = names(hispanic_by_metro_dt)[2:5],\n  x_major_breaks = seq(0, 100, 25),\n  x_limits = c(0, 100),\n  x_title = \"Percent Hispanic/Latino in Census tract\",\n  y_major_breaks = seq(0.0, 0.03, 0.01),\n  y_limits = c(0.0, 0.03),\n  y_show_axis = TRUE,\n  plot_widths = 15,\n  plot_heights = 6.0,\n  density_color = \"navy\",\n  density_fill = \"navy\"\n)\n\n\n\n\nFigure 7.7: Faceted density plot of tract Hispanic populations by CBSA in Texas\n\n\n\n\n\nOutput from a spatial join operation can also be “rolled up” to a larger geography through group-wise data analysis.\n\n\nUsing basic data.table techniques, group by the 4 Texas metro areas and find their respective hispanic percent median values.\n\n\nmedian_by_metro_sf &lt;- data.table::as.data.table(hispanic_by_metro_sf) %&gt;% \n  .[, .(median_est = median(.SD$estimate_tracts, na.rm = T), geometry = sf::st_union(geometry)), by = NAME_metro] %&gt;% \n  sf::st_as_sf(.)\n\n\n\n\n\nTable 7.6: Summarized median Hispanic population by metro\n\n\nNAME_metro\nmedian_est\ngeometry\n\n\n\n\nSan Antonio-New Braunfels, TX\n52.60\nPOLYGON ((1619499 7170517, ...\n\n\nHouston-The Woodlands-Sugar Land, TX\n32.40\nMULTIPOLYGON (((1901162 724...\n\n\nAustin-Round Rock-Georgetown, TX\n25.85\nPOLYGON ((1700741 7302450, ...\n\n\nDallas-Fort Worth-Arlington, TX\n22.55\nPOLYGON ((1737530 7565076, ...\n\n\nNA\nNA\nGEOMETRYCOLLECTION EMPTY\n\n\nNA\nNA\nGEOMETRYCOLLECTION EMPTY\n\n\n\n\n\n\n\n\n\nMap the grouped geometry of the “Austin-Round Rock-Georgetown, TX” metro area.\n\n\naustin_sf &lt;- sf::st_as_sf(data.table::as.data.table(median_by_metro_sf)[3,])\n\naustin_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = austin_sf, \n  sf_fill = \"white\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n)\naustin_plot\n\n\n\n\n\nFigure 7.8: Dissolved geometry of Census tracts identified within the Austin CBSA"
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#small-area-time-series-analysis",
    "href": "7_spatial_analysis_with_census.html#small-area-time-series-analysis",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Compare Census tract boundaries for a fast-growing area of Gilbert, Arizona (southeast of Phoenix) for 2015 and 2020.\n\n\naz_fips &lt;- usmap::fips(state = \"AZ\")\n\n# get 2015 tracts\ngilbert_2015_express &lt;- expression(GEOID == \"04013816000\")\ngilbert_2015_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2015,\n  general = TRUE,\n  express = gilbert_2015_express,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n# get 2020 tracts\ngilbert_2020_express &lt;- expression(GEOID %in% c(\"04013816001\",\"04013816002\",\"04013816003\",\"04013816005\",\"04013816004\"))\ngilbert_2020_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = gilbert_2020_express,\n  sf_info = FALSE,\n  output_dir = output_dir\n)\n\nPlot both the 2015 and 2020 tract geometries using RplotterPkg::multi_panel_grid() function:\n\ngilbert_2015_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2015_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  hide_x_tics = T,\n  hide_y_tics = T\n)\n\ngilbert_2020_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2020_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  hide_x_tics = T,\n  hide_y_tics = T\n)\nlayout &lt;- list(\n  plots = list(gilbert_2015_tracts_plot, gilbert_2020_tracts_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"2015 tracts\",\"2020 tracts\")\n)\n\n\n\n\n\nFigure 7.9: Comparison of Census tracts in Gilbert, AZ from the 2010 and 2020\n\n\n\n\nAreal interpolation refers to the allocation of data from one set of zones to a second overlapping set of zones that may or may not perfectly align spatially. In cases of mis-alignment, some type of weighting scheme needs to be specified to determine how to allocate partial data in areas of overlap. Two such approaches for interpolation are outlined here: area-weighted interpolation and population-weighted interpolation.\n\n\n\n\nThis method uses the area of overlap of geometries as the interpolation weights. From a technical standpoint, an intersection is computed between the origin geometries and the destination geometries. Weights are then computed as the proportion of the overall origin area comprised by the intersection.\n\n\nUse area weights to estimate data at 2020 geographies for the Census tract in Gilbert.\n\nAssign a variable to the land area of Gilbert and create a “proportion” column in the gilbert_2020_tracts_sf dataframe:\n\narea_2015 &lt;- gilbert_2015_tracts_sf$ALAND\n\ngilbert_2020_tracts_sf &lt;- gilbert_2020_tracts_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, proportion := round(ALAND/area_2015, digits = 3)] %&gt;% \n  sf::st_as_sf(.)\n\nPlot and label the tracts:\n\ngilbert_2020_tracts_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = gilbert_2020_tracts_sf,\n  sf_color = \"red\",\n  sf_fill = NA,\n  subtitle = \"2020 tracts\",\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  geom_sf_label(data = gilbert_2020_tracts_sf, aes(label = proportion), fun.geometry = st_centroid)\ngilbert_2020_tracts_plot\n\n\n\n\n\nFigure 7.10: Illustration of area weights\n\n\n\n\nUse sf::st_interpolate_aw interpolation method to compare data for Maricopa County, AZ on the number of people working from home in the 2011-2015 ACS (which uses 2010 boundaries) and the 2016-2020 ACS (which uses 2020 boundaries).\n\nGet both the 2011-2015 and 2016-2020 acs/acs5 data for people working from home (“B08006_017”) for Maricopa County, AZ:\n\naz_fips &lt;- usmap::fips(state = \"AZ\")\naz_maricopa_fips &lt;- usmap::fips(state = \"AZ\", county = \"Maricopa\")\nmaricopa_fips &lt;- substr(az_maricopa_fips,3,5)\n\nwfh_2015_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2015,\n  vars = \"B08006_017E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", az_fips, \"+county:\", maricopa_fips)\n) %&gt;% \n  data.table::setnames(old = \"B08006_017E\", new = \"worked_at_home\") %&gt;% \n  .[, worked_at_home := as.numeric(worked_at_home)]\n\nwfh_2020_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B08006_017E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", az_fips, \"+county:\", maricopa_fips)\n) %&gt;% \n  data.table::setnames(old = \"B08006_017E\", new = \"worked_at_home\") %&gt;% \n  .[, worked_at_home := as.numeric(worked_at_home)]\n\nGet the tract geographies for the years and join with the above data:\n\nexpress &lt;- expression(COUNTYFP == maricopa_fips)\nwfh_tracts_2015_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2015,\n  general = TRUE,\n  express = express,\n  datafile = wfh_2015_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26949,\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(worked_at_home, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nwfh_tracts_2020_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = az_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = express,\n  datafile = wfh_2020_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26949,\n  sf_info = FALSE,\n  output_dir = output_dir\n)%&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(worked_at_home, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nUse sf::st_interpolate_aw to estimate area-weighted interpolation:\n\nwfh_interpolate_aw_sf &lt;- sf::st_interpolate_aw(\n  wfh_tracts_2015_sf,\n  wfh_tracts_2020_sf,\n  extensive = TRUE\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, GEOID := wfh_2020_dt$GEOID] %&gt;% \n  sf::st_as_sf(.)\n\n\n\n\n\nArea interplolation using sf::st_interpolate_aw\n\n\nworked_at_home\nGEOID\ngeometry\n\n\n\n\n362.94291\n04013061044\nPOLYGON ((199614.5 327529.9...\n\n\n154.61054\n04013061045\nPOLYGON ((225387.6 307155.6...\n\n\n67.41170\n04013061046\nPOLYGON ((232623.7 304703.7...\n\n\n80.00828\n04013061047\nPOLYGON ((208921.6 310661.5...\n\n\n182.85828\n04013061048\nPOLYGON ((206044.3 310398.1...\n\n\n192.20883\n04013061049\nPOLYGON ((134351 332974, 13...\n\n\n\n\n\n\n\n\n\n\n\nSection has been skipped.\n\n\n\nSection has been skipped."
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#distance-and-proximity-analysis",
    "href": "7_spatial_analysis_with_census.html#distance-and-proximity-analysis",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Consider accessibility to Level I and Level II trauma hospitals by Census tract in the state of Iowa.\n\nGet the US hospital locations:\n\nhospitals_file_path &lt;- file.path(here::here(), \"data\", \"Hospitals.gz\")\n\ntrauma_sf &lt;- data.table::fread(hospitals_file_path) %&gt;%\n  unique(., by = \"ID\") %&gt;% \n  .[TRAUMA %in% c(\"LEVEL I\", \"LEVEL II\")] %&gt;% \n  sf::st_as_sf(., coords = c(\"LONGITUDE\",\"LATITUDE\"), crs=sf::st_crs(4269), remove = FALSE)\n\nGet the Census tracts for the state of Iowa:\n\nia_fips &lt;- usmap::fips(state = \"Iowa\")\nia_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ia_fips,\n  vintage = 2019,\n  output_dir = output_dir,\n  sf_info = F\n)\n\n\n\n\nTo determine accessibility of Iowa Census tracts to Level I or II trauma centers, we need to identify not only those hospitals that are located in Iowa, but also those in other states near to the Iowa border, such as in Omaha, Nebraska and Rock Island, Illinois.\n\nApply a distance threshold with sf::st_filter() and st::st_is_within_distance() set at 100km\n\nia_trauma_sf &lt;- trauma_sf %&gt;% \n  sf::st_filter(ia_tracts_sf, \n     .predicate = st_is_within_distance,\n     dist = 100000) %&gt;% \n  sf::st_transform(.,sf::st_crs(26975))\n\nia_tracts_sf &lt;- sf::st_transform(ia_tracts_sf, sf::st_crs(26975))\n\nPlot the Trauma centers located within distance of the Iowa tracts:\n\nRspatialPkg::get_geom_sf(\n  sf = ia_tracts_sf,\n  sf_color = \"gray50\",\n  sf_fill = \"gray50\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n  \n) + RspatialPkg::get_geom_sf(\n  sf = ia_trauma_sf,\n  sf_fill = \"red\",\n  sf_size = 4,\n  adding = T)\n\n\n\n\n\nFigure 7.14: Level I or II trauma centers within 100km of Iowa\n\n\n\n\nCalculate the distances from the centroids of Iowa Census tracts (reflecting the center points of each tract geometry) to each trauma center.\n\n\ndist_mt &lt;- ia_tracts_sf %&gt;%\n  sf::st_centroid() %&gt;%\n  sf::st_distance(ia_trauma_sf) \n\nmin_dist_v &lt;- dist_mt %&gt;%\n  apply(1, min) %&gt;%\n  as.vector() %&gt;%\n  magrittr::divide_by(1000) \n\nShow the distribution of the minimum distances in a histogram:\n\nRplotterPkg::create_histogram_plot(\n  df = data.frame(min_distance = min_dist_v),\n  aes_x = \"min_distance\",\n  bin_breaks = seq(0, 140, 10),\n  x_limits = c(0, 140),\n  x_major_breaks = seq(0, 140, 20),\n  bar_fill = 'green'\n)\n\n\n\n\n\nFigure 7.15: Histogram of minimum distances to trauma centers\n\n\n\n\n\n\nThis section is skipped.\n\n\n\n\n…you’ll want to analyze accessibility in a more local way. A common use case might involve a study of the demographic characteristics of a hospital catchment area, defined as the area around a hospital from which patients will likely come.\n\n\nUse Iowa Methodist Medical Center in Des Moines as an example and the distance-based approach using a buffer, implemented with the sf::st_buffer().\n\nCompute the 5k buffer around the Iowa Methodist Medical Center:\n\niowa_methodist_sf &lt;- data.table::as.data.table(ia_trauma_sf) %&gt;% \n  .[ID == 9850308,] %&gt;% \n  sf::st_as_sf(.)\n\niowa_methodist_buf5km_sf &lt;- sf::st_buffer(iowa_methodist_sf, dist = 5000) \n\nPlot the buffer with leaflet:\n\nhospital_icon &lt;- leaflet::makeAwesomeIcon(icon = \"ios-medical\", \n                           markerColor = \"red\",\n                           library = \"ion\")\n\n\niowa_methodist_buf5km_lf &lt;- leaflet::leaflet() %&gt;% \n  leaflet::addTiles() %&gt;%\n  leaflet::addPolygons(data = sf::st_transform(iowa_methodist_buf5km_sf, 4326)) %&gt;% \n  leaflet::addAwesomeMarkers(data = st_transform(iowa_methodist_sf, 4326),\n                    icon = hospital_icon)\niowa_methodist_buf5km_lf\n\n\n\n\nFigure 7.17: Synced map showing buffer catchment areas in Des Moines\n\n\n\n\nNote: this section has not been completed."
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#better-cartography-with-spatial-overlay",
    "href": "7_spatial_analysis_with_census.html#better-cartography-with-spatial-overlay",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Map the median household income by Census tract in Manhattan (New York County), NY\n\nGet the median household income data:\n\nny_state_county_fips &lt;- usmap::fips(state = \"New York\", county = \"New York\")\nny_state_fips &lt;- substr(ny_state_county_fips, 1,2)\nny_county_fips &lt;- substr(ny_state_county_fips, 3, 5)\n\nny_income_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B19013_001E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", ny_state_fips, \"+county:\", ny_county_fips)\n) %&gt;% \n  data.table::setnames(old = \"B19013_001E\", new = \"median_income\") %&gt;% \n  .[, median_income := as.numeric(median_income)] %&gt;% \n  .[median_income &gt; 0.0]\n\nGet the New York county tract shapefiles and join with the above income data:\n\nexpress &lt;- expression(COUNTYFP == ny_county_fips)\nny_tracts_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ny_state_fips,\n  vintage = 2020,\n  general = TRUE,\n  express = express,\n  datafile = ny_income_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(median_income, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nMap the tract shapefiles and data:\n\nRspatialPkg::get_geom_sf(\n  sf = ny_tracts_sf,\n  aes_fill = \"median_income\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n   ggplot2::scale_fill_viridis_c(labels = scales::label_dollar())\n\n\n\n\n\nFigure 7.18: Map of Manhattan with default CB geometries\n\n\n\n\nAs illustrated in the graphic, the boundaries of Manhattan include water boundaries - stretching into the Hudson and East Rivers. In turn, a more accurate representation of Manhattan’s land area might be desired.\n\n\n\n\nRemove water area from the Census tracts of New York county.\n\nRe-define the New York tracts by setting the general parameter to FALSE:\n\nexpress &lt;- expression(COUNTYFP == ny_county_fips)\nny_tracts_2_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ny_state_fips,\n  vintage = 2020,\n  general = FALSE,\n  transform_crs = 6538,\n  express = express,\n  datafile = ny_income_dt,\n  datafile_key = \"GEOID\",\n  sf_info = FALSE,\n  output_dir = output_dir\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, .(median_income, geometry)] %&gt;% \n  sf::st_as_sf(.)\n\nUse RcensusPkg::remove_area_water() to remove area water from the New York tracts:\n\nny_tracts_without_water_sf &lt;- RcensusPkg::remove_area_water(ny_tracts_2_sf, output_dir = output_dir)\n\nMap the New York tracts both with and without water:\n\nny_tracts_with_water_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = ny_tracts_2_sf,\n  sf_fill = \"green\",\n  sf_alpha = 0.5,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  show_legend = F\n)\nny_tracts_without_water_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = ny_tracts_without_water_sf,\n  sf_fill = \"green\",\n  sf_alpha = 0.5,\n  hide_x_tics = T,\n  hide_y_tics = T,\n  show_legend = F\n)\n\nlayout &lt;- list(\n  plots = list(ny_tracts_with_water_plot, ny_tracts_without_water_plot),\n  rows = c(1, 1),\n  cols = c(1, 2)\n)\n\nny_tracts_multi_plot &lt;- RplotterPkg::multi_panel_grid(\n  layout = layout,\n  plot_titles = c(\"with water\", \"without water\")\n)\nny_tracts_multi_plot\n\n\n\n\n\nFigure 7.19: Map of Manhattan with water areas erased"
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#spatial-neighborhoods-and-spatial-weights-matrices",
    "href": "7_spatial_analysis_with_census.html#spatial-neighborhoods-and-spatial-weights-matrices",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "Explore spatial patterns and spatial clustering of a given demographic attribute (Exploratory Spatial Data Analysis or ESDA).\n\nAs an example, acquire a dataset on median age by Census tract in the Dallas-Fort Worth, TX metropolitan area:\n\ntx_fips &lt;- usmap::fips(state = \"TX\")\n\ntx_tracts_median_age_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = \"B01002_001E\",\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", tx_fips)\n) %&gt;% \n  data.table::setnames(old = \"B01002_001E\", new = \"median_age\") %&gt;% \n  .[, .(NAME, tract, median_age = as.numeric(median_age), GEOID)] %&gt;% \n  .[median_age &gt; 0,]\n\nGet the geometries for the Dallas area CBSA:\n\ndallas_cbsa_sf &lt;- RcensusPkg::tiger_cbsa_sf(\n  vintage = 2020,\n  state_filter = \"TX\",\n  city_filter = \"Dallas-Fort Worth-Arlington\",\n  general = T,\n  transform_crs = 32138,\n  sf_info = F,\n  output_dir = output_dir\n)\n\nGet the Texas Census tracts and age data for just within the Dallas CBSA geometries:\n\ndallas_tracts_median_age_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = tx_fips,\n  vintage = 2020,\n  general = T,\n  transform_crs = 32138,\n  datafile = tx_tracts_median_age_dt,\n  datafile_key = \"GEOID\",\n  output_dir = output_dir,\n  check_na = T,\n  sf_info = F\n) %&gt;% \nsf::st_filter(dallas_cbsa_sf, .predicate = st_within)\n\nPlot the Dallas area tracts with their color coded median age:\n\ndallas_tracts_median_age_plot &lt;- RspatialPkg::get_geom_sf(\n  sf = dallas_tracts_median_age_sf,\n  aes_fill = \"median_age\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_viridis_c(na.value = \"white\")\ndallas_tracts_median_age_plot\n\n\n\n\n\n\n\n\n\n\n\nUsing spdep::poly2nb() find polygons in the above Dallas median age shapefile that share at least one vertex to be considered neighbors.\n\n\nneighbors_lst &lt;- spdep::poly2nb(\n  pl = dallas_tracts_median_age_sf, \n  queen = TRUE\n)\n\nsummary(neighbors_lst)\n\nNeighbour list object:\nNumber of regions: 1699 \nNumber of nonzero links: 10930 \nPercentage nonzero weights: 0.378646 \nAverage number of links: 6.433196 \nLink number distribution:\n\n  2   3   4   5   6   7   8   9  10  11  12  13  14  15  17 \n  8  52 172 305 396 343 218 112  44  29  11   5   2   1   1 \n8 least connected regions:\n707 1070 1097 1143 1239 1415 1503 1689 with 2 links\n1 most connected region:\n685 with 17 links\n\n\nTract’s average number of neighbors: 6.4; Minimum: 2; Maximum: 17\n\nShow the neighbors of the Census tract at row index 1:\n\n\nneighbors_lst[[1]]\n\n[1]  2  3  8 73 77\n\n\n\n\n\n\nTo perform exploratory spatial data analysis, we can convert the neighbors list object into spatial weights. Spatial weights define how metrics associated with a feature’s neighbors should be weighted.\n\n\nConvert the above neighbors list to a weights matrix.\n\n\nweights_lst &lt;- spdep::nb2listw(\n  neighbours = neighbors_lst, \n  style = \"W\"\n)\nweights_lst$weights[[1]]\n\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nRow index 1 has five neighbors, each neighbor is assigned the weight 0.2"
  },
  {
    "objectID": "7_spatial_analysis_with_census.html#global-and-local-spatial-autocorrelation",
    "href": "7_spatial_analysis_with_census.html#global-and-local-spatial-autocorrelation",
    "title": "7 Spatial analysis with US Census data",
    "section": "",
    "text": "With respect to the exploratory spatial analysis of Census data, we might be interested in the degree to which a given Census variable clusters spatially, and subsequently where those clusters are found.\n\n\n\n\nCompute the average median age for the neighbors of each Census tract in the Dallas-Fort Worth metropolitan area.\n\n\nlag_v &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dallas_tracts_median_age_sf$median_age\n)\n\n\nDraw a scatterplot of the ACS estimate vs. its lagged mean to do a preliminary assessment of spatial clustering in the data.\n\n\ndt &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, lag_median_age := lag_v]\n\nRplotterPkg::create_scatter_plot(\n  df = dt,\n  aes_x = \"median_age\",\n  aes_y = \"lag_median_age\",\n  x_title = \"Median Age\",\n  y_title = \"Spatial lag, median age\"\n  \n) +\n  geom_abline(color = \"red\")\n\n\n\n\n\nFigure 7.21: Scatterplot of median age relative to its spatial lag\n\n\n\n\nCompute Moran’s I, which is similar to a correlation coefficient but for the relationship between observations and their neighbors.\n\n\nspdep::moran.test(\n  x = dallas_tracts_median_age_sf$median_age, \n  listw = weights_lst\n)\n\n\n    Moran I test under randomisation\n\ndata:  dallas_tracts_median_age_sf$median_age  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 21.275, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2926713016     -0.0005889282      0.0001900099 \n\n\nThe Moran’s I statistic of 0.29 is positive, and the small p-value suggests that we reject the null hypothesis of spatial randomness in the dataset\n\n\n\n\nLocal measures of spatial autocorrelation disaggregate global results to identify “hot spots” of similar values within a given spatial dataset.\n\n\nThe equation (Gi*) computes a ratio of the weighted average of the neighborhood values to the total sum of values for the dataset. Results are returned as z-scores.\n\n\nlocalg_weights_lst &lt;- spdep::nb2listw(\n  spdep::include.self(neighbors_lst)\n)\n\nlocalG_v &lt;- spdep::localG(\n  x = dallas_tracts_median_age_sf$median_age, \n  listw = localg_weights_lst\n)\n\n\nCreate a cholorplath map of the Dallas tracts based on their respective weighted neighbor tracts average of median age.\n\n\ndallas_tracts_localG_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;%\n  .[, localG := as.numeric(localG_v)] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_localG_sf,\n  aes_fill = \"localG\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_distiller(palette = \"RdYlBu\")\n\n\n\n\n\nFigure 7.22: Map of local Gi* scores\n\n\n\n\nUse the Gi* z-scores from dallas_tracts_localG_sf to define values greater than 2.5 as a “High cluster” and below -2.5 as “Low cluster” and map these areas.\n\nAdd a column indicating the 3 levels:\n\ndallas_tracts_localG_sf &lt;- data.table::as.data.table(dallas_tracts_localG_sf) %&gt;% \n  .[, hotspot := fcase(\n    localG &gt;= 2.576, \"High cluster\",\n    localG &lt;= -2.576, \"Low cluster\",\n    default = \"Not significant\"\n  )\n  ] %&gt;% \n  .[, hotspot := as.factor(hotspot)] %&gt;% \n  sf::st_as_sf(.)\n\nPlot and color code the levels of cluster:\n\ncolors &lt;- c(\"red\",\"blue\",\"grey\")\nnames(colors) &lt;- c(\"High cluster\", \"Low cluster\", \"Not significant\")\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_localG_sf,\n  aes_fill = \"hotspot\",\n  sf_color = \"white\",\n  scale_values = colors,\n  scale_labels = names(colors),\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) \n\n\n\n\n\nFigure 7.23: Map of local Gi* scores with significant clusters highlighted\n\n\n\n\nThe red areas on the resulting map are representative of “high” clustering of median age, where neighborhoods with older populations are surrounded by other older-age neighbors. “Low” clusters are represented in blue, which reflect clustering of Census tracts with comparatively youthful populations.\n\n\n\n\n\nOne of the major benefits of using LISA for exploratory analysis is its ability to identify both spatial clusters, where observations are surrounded by similar values, and spatial outliers, where observations are surrounded by dissimilar values.\n\n\nCompute the LISA values for median age among the Dallas tracts.\n\nSet a random number seed and convert the median age to a z-score using scale():\n\nset.seed(1983)\n\ndallas_tracts_median_age_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, scaled_median_age := as.numeric(scale(median_age))] %&gt;% \n  sf::st_as_sf(.)\n\nCompute LISA with localmoran_perm() for the scaled value of median age:\n\ndallas_tracts_median_age_LISA_dt &lt;- spdep::localmoran_perm(\n  x = dallas_tracts_median_age_sf$scaled_median_age,\n  listw = weights_lst,\n  nsim = 999L,\n  alternative = \"two.sided\"\n) %&gt;% data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = colnames(.), new = c(\"local_i\",\"exp_i\",\"var_i\",\"z_i\",\"p_i\",\"p_i_sim\",\"pi_sim_folded\",\"skewness\",\"kurtosis\"))\n\nCompute the lagged value of scaled_median_age using spdep::lag.listw():\n\nlag_scaled_median_age_v &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dallas_tracts_median_age_sf$scaled_median_age\n)\n\nCombine vectors/columns:\n\ndallas_tracts_median_age_LISA_dt &lt;- dallas_tracts_median_age_LISA_dt %&gt;% \n  .[, `:=`(GEOID = dallas_tracts_median_age_sf$GEOID, scaled_median_age = dallas_tracts_median_age_sf$scaled_median_age, lagged_median_age = lag_scaled_median_age_v)]\n\n\n\n\n\nTable 7.8: Local Moran’s I results\n\n\nGEOID\nscaled_median_age\nlagged_median_age\n\n\n\n\n48085030101\n-0.6163538\n0.2278064\n\n\n48085030102\n1.3837469\n0.0925054\n\n\n48085030201\n-0.1457419\n-0.0254149\n\n\n48085030202\n0.8837218\n-0.1709532\n\n\n48085030204\n-0.4987008\n-0.2290794\n\n\n48085030205\n-0.8369531\n0.0564742\n\n\n\n\n\n\n\n\n\nFrom dallas_tracts_median_age_LISA_dt complete a LISA quadrant scatterplot.\n\n\ndallas_tracts_median_age_LISA_dt[, lisa_cluster := fcase(\n  p_i &gt;= 0.05, \"Not significant\",\n  scaled_median_age &gt; 0 & local_i &gt; 0, \"High-high\",\n  scaled_median_age &gt; 0 & local_i &lt; 0, \"High-low\",\n  scaled_median_age &lt; 0 & local_i &gt; 0, \"Low-low\",\n  scaled_median_age &lt; 0 & local_i &lt; 0, \"Low-high\"\n)]\n\ncolor_values &lt;- c(`High-high` = \"red\",\n                  `High-low` = \"pink\",\n                  `Low-low` = \"blue\",\n                  `Low-high` = \"lightblue\",\n                  `Not significant` = \"white\"\n                )\n\nRplotterPkg::create_scatter_plot(\n  df = dallas_tracts_median_age_LISA_dt,\n  aes_x = \"scaled_median_age\",\n  aes_y = \"lagged_median_age\",\n  aes_fill = \"lisa_cluster\",\n  x_title = \"Median age (z-score)\",\n  y_title = \"Spatial lag of median age (z-score)\",\n  pts_size = 2\n) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_vline(xintercept = 0, linetype = \"dashed\") +\n  scale_fill_manual(values = color_values)\n\n\n\n\n\nFigure 7.24: LISA quadrant scatterplot\n\n\n\n\nObservations falling in the top-right quadant represent “high-high” clusters, where Census tracts with higher than median age are also surrounded by Census tracts with older populations. The bottom-left quadrant also represents spatial clusters, but instead includes lower median age tracts that are surrounded by tracts with similarly low median ages. The top-left and bottom-right quadrants are home to spatial outliers, where values are dissimilar from their neighbors.\n\n\nMap the cluster areas.\n\n\ndallas_tracts_median_age_sf &lt;- data.table::as.data.table(dallas_tracts_median_age_sf) %&gt;% \n  .[, lisa_cluster := dallas_tracts_median_age_LISA_dt$lisa_cluster] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dallas_tracts_median_age_sf,\n  aes_fill = \"lisa_cluster\",\n  own_scale = T,\n  hide_x_tics = T,\n  hide_y_tics = T\n) +\n  scale_fill_manual(values = color_values)\n\n\n\n\n\nFigure 7.25: LISA cluster map\n\n\n\n\nOlder clusters are colored red; Younger clusters are dark blue; low-high clusters are Census tracts with large quantities of multifamily housing adjacent to predominantly single-family neighborhoods."
  },
  {
    "objectID": "8_modeling_census_data.html",
    "href": "8_modeling_census_data.html",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "Load the Required R Packages from CRAN:\n\n\nlibrary(data.table)\nlibrary(devtools)\nlibrary(sf)\nlibrary(usmap)\nlibrary(magrittr)\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(units)\nlibrary(here)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(segregation)\nlibrary(corrr)\nlibrary(car)\nlibrary(spdep)\nlibrary(spatialreg)\nlibrary(GWmodel)\n\noptions(DT.options = list(dom = 't', style = 'bootstrap'))\n\n\nLoad the packages ‘deandevl/RcensusPkg’, ‘deandevl/RplotterPkg’ and ‘deandevl/RspatialPkg’.\n\n\ndevtools::install_github('deandevl/RcensusPkg')\ndevtools::install_github('deandevl/RspatialPkg')\ndevtools::install_github('deandevl/RplotterPkg')\n\n\nEstablish an output directory for all downloaded shapefiles.\n\n\noutput_dir &lt;- file.path(here::here(), \"shapefiles\")\n\n\n\n\nSegregation as addressed here generally refers to the measurement of the extent to which two or more groups live apart from each other; diversity as a companion metric measures neighborhood heterogeneity among groups.\n\n\n\n\nGet California population tract data by race/ethnicity.\n\nGet the race/ethnicity data:\n\nca_fips &lt;- usmap::fips(state = \"california\")\nca_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2019,\n  vars = c(\n    white = \"B03002_003E\",\n    black = \"B03002_004E\",\n    asian = \"B03002_006E\",\n    hispanic = \"B03002_012E\"\n  ),\n  regionin = paste0(\"state:\",ca_fips),\n  region = \"tract:*\"\n)\n\nGet the tract geometries for California and join it with the above California race/ethnicity data:\n\nca_acs_data_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ca_fips,\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  datafile = ca_race_dt,\n  datafile_key = \"GEOID\",\n  sf_info = F\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(\n    old = c(\"B03002_003E\",\"B03002_004E\",\"B03002_006E\",\"B03002_012E\"),\n    new = c(\"white\",\"black\",\"asian\",\"hispanic\")\n  ) %&gt;% \n  sf::st_as_sf(.)\n\nGet the urbanized areas of California with populations greater than 750000:\n\nus_urban_areas_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01001_001E\",\n  regionin = \"urban_area\"\n) %&gt;% \n data.table::setnames(old = \"B01001_001E\",new = \"population\") %&gt;% \n .[, population := as.numeric(population)] %&gt;% \n .[population &gt;= 750000 & grepl(pattern = \"CA Urbanized Area (2010)\", NAME, fixed = T),] %&gt;%\n .[, NAME := stringr::str_remove(NAME, stringr::fixed(\" Urbanized Area (2010)\"))]\n\nGet the geometries for the urbanized areas and join it with the above urban population data:\n\nus_urban_areas_sf &lt;- RcensusPkg::tiger_urban_area_sf(\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  sf_info = F,\n  datafile = us_urban_areas_dt,\n  datafile_key = \"GEOID\",\n  sf_key = \"GEOID10\",\n  check_na = T\n) \n\nCompute an inner spatial join between the above California population race tracts (ca_acs_data_sf) geometries and the California urbanized area geometries (us_urban_areas_sf):\n\nca_urban_data_dt &lt;- ca_acs_data_sf %&gt;% \n  sf::st_join(us_urban_areas_sf, left = F) %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = c(\"GEOID.x\",\"NAME10\"),new = c(\"GEOID\",\"urban_name\")) %&gt;% \n  .[,.(white,black,asian,hispanic,GEOID,urban_name)] %&gt;%   data.table::melt(id.vars = c(\"GEOID\",\"urban_name\"), variable.name = \"variable\",value.name = \"estimate\") %&gt;% \n.[, estimate := as.numeric(estimate)]\n\n\n\n\n\nTable 8.1: Prepared data for segregation analysis\n\n\nGEOID\nurban_name\nvariable\nestimate\n\n\n\n\n06001400100\nSan Francisco--Oakland, CA\nwhite\n2317\n\n\n06001400200\nSan Francisco--Oakland, CA\nwhite\n1475\n\n\n06001400300\nSan Francisco--Oakland, CA\nwhite\n3434\n\n\n06001400400\nSan Francisco--Oakland, CA\nwhite\n2554\n\n\n06001400500\nSan Francisco--Oakland, CA\nwhite\n1874\n\n\n06001400600\nSan Francisco--Oakland, CA\nwhite\n860\n\n\n06001400700\nSan Francisco--Oakland, CA\nwhite\n1963\n\n\n06001400800\nSan Francisco--Oakland, CA\nwhite\n1772\n\n\n\n\n\n\n\n\n\n\n\n\nThe dissimilarity index is widely used to assess neighborhood segregation between two groups within a region.\n\n\nAssess neighborhood segregation between non-Hispanic white and Hispanic populations for the San Francisco/Oakland urbanized area.\n\n\nwhite_hispanic_dissimilar &lt;- ca_urban_data_dt %&gt;% \n  .[variable %in% c(\"white\",\"hispanic\") & urban_name == \"San Francisco--Oakland, CA\",] %&gt;% \n  segregation::dissimilarity(\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\"\n  )\n\nThe D index of segregation between non-Hispanic and Hispanic populations in the San Francisco-Oakland area is D, 0.5135526.\n\nFind the dissimilarity index between non-Hispanic and Hispanic populations for all the urban areas.\n\n\ncustom_fun &lt;- function(dt){\n  dissimilar &lt;- segregation::dissimilarity(\n    data = dt,\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\"\n  )\n}\n\nwhite_hispanic_dissimilar_urban_groups_dt &lt;- ca_urban_data_dt %&gt;%\n  .[variable %in% c(\"white\",\"hispanic\"),custom_fun(.SD),by=urban_name] %&gt;% \n  data.table::setorderv(.,cols = \"est\", order = -1)\n\nLos Angeles area is the most segregated of the large urbanized areas in California with respect to non-Hispanic white and Hispanic populations\n\n\n\n\nTable 8.2: Dissimilarity indices for Hispanic and non-Hispanic white populations, large California urbanized areas\n\n\nurban_name\nstat\nest\n\n\n\n\nLos Angeles--Long Beach--Anaheim, CA\nD\n0.5999229\n\n\nSan Francisco--Oakland, CA\nD\n0.5135526\n\n\nSan Jose, CA\nD\n0.4935633\n\n\nSan Diego, CA\nD\n0.4898184\n\n\nRiverside--San Bernardino, CA\nD\n0.4079863\n\n\nSacramento, CA\nD\n0.3687927\n\n\n\n\n\n\n\n\n\n\n\n\nUse the segregation::mutual_within() function to measure segregation and diversity between multiple groups.\n\n\nmultiple_diversity_dt &lt;- segregation::mutual_within(\n  data = ca_urban_data_dt,\n  group = \"variable\",\n  unit = \"GEOID\",\n  weight = \"estimate\",\n  within = \"urban_name\",\n  wide = TRUE\n)\n\nLos Angeles remains the most segregated urban area, whereas Riverside/San Bernardino is the least segregated\n\n\n\n\nTable 8.3: Multi-group segregation results for California urban areas\n\n\nurban_name\nM\np\nH\nent_ratio\n\n\n\n\nLos Angeles--Long Beach--Anaheim, CA\n0.3391033\n0.5016371\n0.2851662\n0.9693226\n\n\nRiverside--San Bernardino, CA\n0.1497129\n0.0867808\n0.1408461\n0.8664604\n\n\nSacramento, CA\n0.1658898\n0.0736948\n0.1426804\n0.9477412\n\n\nSan Diego, CA\n0.2290891\n0.1256072\n0.2025728\n0.9218445\n\n\nSan Francisco--Oakland, CA\n0.2685992\n0.1394522\n0.2116127\n1.0346590\n\n\nSan Jose, CA\n0.2147445\n0.0728278\n0.1829190\n0.9569681\n\n\n\n\n\n\n\n\n\nUse the segregation::mutual_local() function to measure segregation across the tracts in just the Los Angeles urban area and create a choropleth map the measurements.\n\nGet the segregation measures for Los Angeles:\n\nla_local_seg_dt &lt;- ca_urban_data_dt %&gt;% \n  .[urban_name == \"Los Angeles--Long Beach--Anaheim, CA\",] %&gt;% \n  segregation::mutual_local(\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\",\n    wide = TRUE\n  )\n\nJoin the segregation data with tract geometries:\n\nla_tracts_seg_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ca_fips,\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  datafile = la_local_seg_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26946,\n  check_na = TRUE,\n  sf_info = FALSE\n)\n\nCreate the choropleth map:\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_seg_sf,\n  aes_fill = \"ls\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::labs(fill = \"Local\\nsegregation index\") +\n  ggplot2::scale_fill_viridis_c(option = \"inferno\")\n\n\n\n\n\nFigure 8.1: Map of local multi-group segregation scores in Los Angeles\n\n\n\n\n\n\nThis section is skipped\n\n\n\n\n\n\n\nAs an illustrative example, get the predictor variable values by Census tract in the Dallas-Fort Worth metropolitan area.\n\nDefine the Texas counties FIPS and variable acronyms from both the acs/acs5 and acs/acs5/profile datasets:\n\ncounty_fips &lt;- function(fips){\n  return (substr(fips, 3, 5))\n}\n\ntexas_fips &lt;- usmap::fips(state = \"Texas\")\ncollin_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Collin\"))\ndallas_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Dallas\"))\ndenton_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Denton\"))\nellis_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Ellis\"))\nhunt_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Hunt\"))\nkaufman_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Kaufman\"))\nrockwall_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Rockwall\"))\njohnson_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Johnson\"))\nparker_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Parker\"))\ntarrant_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Tarrant\"))\nwise_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Wise\"))\n\ndfw_counties &lt;- c(collin_fips,dallas_fips,denton_fips,ellis_fips,hunt_fips,kaufman_fips,rockwall_fips,johnson_fips,parker_fips,tarrant_fips,wise_fips)\n\nvariables_acs5_df &lt;- data.frame(\n  names = c(\n    'median_valueE',\n    'median_valueM',\n    'median_roomsE',\n    'median_roomsM',\n    'total_populationE',\n    'total_populationM',\n    'median_ageE',\n    'median_ageM',\n    'median_year_builtE',\n    'median_year_builtM'\n  ),\n  val = c(\n    \"B25077_001E\",\n    \"B25077_001M\",\n    \"B25018_001E\",\n    \"B25018_001M\",\n    \"B01003_001E\",\n    \"B01003_001M\",\n    \"B01002_001E\",\n    \"B01002_001M\",\n    \"B25037_001E\",\n    \"B25037_001M\"\n  )\n)\nvariables_acs5_profile_df &lt;- data.frame(\n  names = c(\n    'pct_collegeE',\n    'pct_collegeM',\n    'pct_foreign_bornE',\n    'pct_foreign_bornM',\n    'median_incomeE',\n    'median_incomeM',\n    'percent_oohE',\n    'percent_oohM',\n    'pct_whiteE',\n    'pct_whiteM'\n  ),\n  val = c(\n   \"DP02_0068PE\",\n   \"DP02_0068PM\",\n   \"DP02_0094PE\",\n   \"DP02_0094PM\",\n   \"DP03_0062E\",\n   \"DP03_0062M\",\n   \"DP04_0046PE\",\n   \"DP04_0046PM\",\n   \"DP05_0077PE\",\n   \"DP05_0077PM\"\n  )\n)\n\nGet the acs/acs5/profile data and remove negative values:\n\n# Get the data\ndfw_acs5_profile_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  vars = variables_acs5_profile_df$val,\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", texas_fips)\n) %&gt;%\n  .[county %in% dfw_counties, ] %&gt;%\n  .[, DP02_0068PE:GEOID] %&gt;%\n  data.table::setnames(old = variables_acs5_profile_df$val, new = variables_acs5_profile_df$names) %&gt;%\n  .[, .(\n    GEOID,\n    median_incomeE = as.numeric(median_incomeE),\n    median_incomeM = as.numeric(median_incomeM),\n    pct_collegeE = as.numeric(pct_collegeE),\n    pct_collegeM = as.numeric(pct_collegeM),\n    pct_foreign_bornE = as.numeric(pct_foreign_bornE),\n    pct_foreign_bornM = as.numeric(pct_foreign_bornM),\n    pct_whiteE = as.numeric(pct_whiteE),\n    pct_whiteM = as.numeric(pct_whiteM),\n    percent_oohE = as.numeric(percent_oohE),\n    percent_oohM = as.numeric(percent_oohM)\n  )]\n# Reshape dfw_acs5_profile_dt to long form and remove negative values\nlong_dt &lt;- data.table::melt(\n  data = dfw_acs5_profile_dt, \n  id.vars = \"GEOID\") %&gt;% \n  .[value &gt;= 0.0, ]\n\n# Reshape long_dt back to wide format assigned to dfw_acs5_profile_dt\ndfw_acs5_profile_dt &lt;- data.table::dcast(\n  data = long_dt,\n  GEOID ~ variable,\n  value.var = 'value'\n)\n\nGet the acs/acs5 data and remove negative values.\n\ndfw_acs5_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = variables_acs5_df$val,\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", texas_fips)\n) %&gt;%\n  .[county %in% dfw_counties, ] %&gt;%\n  .[, B25077_001E:GEOID] %&gt;%\n  data.table::setnames(old = variables_acs5_df$val, new = variables_acs5_df$names) %&gt;%\n  .[, .(\n    GEOID,\n    median_valueE = as.numeric(median_valueE),\n    median_valueM = as.numeric(median_valueM),\n    median_roomsE = as.numeric(median_roomsE),\n    median_roomsM = as.numeric(median_roomsM),\n    total_populationE = as.numeric(total_populationE),\n    total_populationM = as.numeric(total_populationM),\n    median_ageE = as.numeric(median_ageE),\n    median_ageM = as.numeric(median_ageM),\n    median_year_builtE = as.numeric(median_year_builtE),\n    median_year_builtM = as.numeric(median_year_builtM)\n  )]\n\n# Reshape dfw_acs5_dt to long form and remove negative values\nlong_dt &lt;- data.table::melt(\n  data = dfw_acs5_dt, \n  id.vars = \"GEOID\") %&gt;% \n  .[value &gt;= 0.0, ]\n\n# Reshape long_dt back to wide format assigned to dfw_acs5_dt\ndfw_acs5_dt &lt;- data.table::dcast(\n  data = long_dt,\n  GEOID ~ variable,\n  value.var = 'value'\n) \n\nJoin acs/acs5/profile with acs/acs5 keyed to their common GEOID value:\n\ndata.table::setkey(dfw_acs5_profile_dt, \"GEOID\")\ndata.table::setkey(dfw_acs5_dt, \"GEOID\")\n\ndfw_data_dt &lt;- dfw_acs5_profile_dt[dfw_acs5_dt]\n\nGet the Dallas area simple feature tract geometries and join them with the dfw_data_dt data frame keyed via their common GEOID:\n\ndfw_data_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = texas_fips,\n  output_dir = output_dir,\n  vintage = 2020,\n  general = TRUE, \n  datafile = dfw_data_dt,\n  datafile_key = \"GEOID\",\n  check_na = FALSE,\n  sf_info = FALSE\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[COUNTYFP %in% dfw_counties, ] %&gt;% \n  .[, .(\n    GEOID,\n    median_valueE,\n    median_valueM,\n    median_roomsE,\n    median_roomsM,\n    total_populationE,\n    total_populationM,\n    median_ageE,\n    median_ageM,\n    median_year_builtE,\n    median_year_builtM,\n    pct_collegeE,\n    pct_collegeM,\n    pct_foreign_bornE,\n    pct_foreign_bornM,\n    median_incomeE,\n    median_incomeM,\n    percent_oohE,\n    percent_oohM,\n    pct_whiteE,\n    pct_whiteM,\n    geometry)] %&gt;% \n  sf::st_as_sf(.) %&gt;% \n  sf::st_transform(32138) # NAD83 Texas North Central\n\n\n\n\n\nTable 8.4: Data acquired from RcensusPkg for regression modeling\n\n\nGEOID\nmedian_valueE\nmedian_valueM\nmedian_roomsE\nmedian_roomsM\ntotal_populationE\ntotal_populationM\nmedian_ageE\nmedian_ageM\nmedian_year_builtE\nmedian_year_builtM\npct_collegeE\npct_collegeM\npct_foreign_bornE\npct_foreign_bornM\nmedian_incomeE\nmedian_incomeM\npercent_oohE\npercent_oohM\npct_whiteE\npct_whiteM\ngeometry\n\n\n\n\n48085030101\n183600\n11112\n6.0\n0.3\n2296\n420\n31.9\n5.6\n1994\n6\n8.6\n4.3\n16.5\n9.7\n63036\n25030\n85.5\n6.0\n65.4\n12.6\nMULTIPOLYGON (((787828.3 21...\n\n\n48085030102\n198500\n88036\n6.0\n0.7\n2720\n524\n45.5\n4.4\n1995\n4\n19.2\n6.5\n20.0\n9.0\n65234\n19074\n78.6\n9.7\n68.8\n9.8\nMULTIPOLYGON (((784027.9 21...\n\n\n48085030201\n324200\n47203\n7.4\n0.6\n3653\n509\n35.1\n5.6\n2002\n3\n41.3\n6.6\n4.9\n2.7\n85938\n12350\n79.2\n7.1\n77.0\n7.8\nMULTIPOLYGON (((774843.6 21...\n\n\n48085030202\n366900\n20014\n7.3\n0.4\n3530\n418\n42.1\n3.3\n2001\n4\n40.9\n5.6\n8.3\n4.6\n134097\n24830\n88.3\n4.7\n72.5\n8.5\nMULTIPOLYGON (((764886.2 21...\n\n\n48085030204\n217200\n14152\n6.2\n0.8\n6592\n1193\n32.7\n4.4\n2006\n1\n51.8\n15.8\n9.7\n5.3\n98622\n6630\n63.6\n18.2\n63.0\n10.0\nMULTIPOLYGON (((778099.2 21...\n\n\n48085030205\n231200\n41519\n6.3\n0.8\n5257\n1273\n30.4\n1.6\n2007\n3\n31.7\n12.2\n28.3\n15.0\n75382\n41296\n82.2\n11.7\n45.9\n17.5\nMULTIPOLYGON (((777818.4 21...\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a choropleth map of the outcome variable median home value.\n\n\nmhv_map &lt;- RspatialPkg::get_geom_sf(\n  sf = dfw_data_sf,\n  aes_fill = \"median_valueE\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c(labels = scales::label_dollar()) +\n  ggplot2::labs(fill = \"Median home value\")\n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\n\n\n\nCreate a histogram of the outcome variable median home value.\n\n\nmhv_histogram &lt;- RplotterPkg::create_histogram_plot(\n  df = dfw_data_sf,\n  aes_x = \"median_valueE\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Median home value\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n) \n\n\nmhv_map + mhv_histogram\n\n\n\n\nFigure 8.3: Median home value charts\n\n\n\n\n\nLog-transform the outcome variable to make its distribution closer to normal.\n\n\ndfw_data_sf &lt;- dfw_data_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, median_valueE_log := log(median_valueE)] %&gt;% \n  sf::st_as_sf(.)\n\nmhv_map_log &lt;- RspatialPkg::get_geom_sf(\n  sf = dfw_data_sf,\n  aes_fill = \"median_valueE_log\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c() +\n  ggplot2::labs(fill = \"Median home value\")\n\nmhv_histogram_log &lt;- RplotterPkg::create_histogram_plot(\n  df = dfw_data_sf,\n  aes_x = \"median_valueE_log\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Median home value\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n) \n\nmhv_map_log + mhv_histogram_log\n\n\n\n\nFigure 8.4: Logged median home value charts\n\n\n\n\n\n\n\n\nAdd two new variables to dfw_data_sf: pop_density and median_structure_age.\n\n\nE_cols &lt;- !endsWith(colnames(dfw_data_sf), \"M\")\narea &lt;- sf::st_area(dfw_data_sf)\n\ndfw_data_for_model_sf &lt;- data.table::as.data.table(dfw_data_sf) %&gt;%\n  .[, E_cols, with=FALSE] %&gt;%\n  .[, area := area] %&gt;%\n  .[, `:=`(pop_density = as.numeric(units::set_units(total_populationE / area, \"1/km2\")),\n           median_structure_age = 2018 - median_year_builtE)] %&gt;%\n  data.table::setnames(., old = colnames(.), new = stringr::str_remove(colnames(.), \"E\")) %&gt;%\n  na.omit(.) %&gt;%\n  sf::st_as_sf(.)\n\n\n\n\n\nTable 8.5: Engineered predictors for regression modeling\n\n\nGOID\nmedian_value\nmedian_rooms\ntotal_population\nmedian_age\nmedian_year_built\npct_college\npct_foreign_born\nmedian_income\npercent_ooh\npct_white\nmedian_value_log\narea\npop_density\nmedian_structure_age\ngeometry\n\n\n\n\n48085030101\n183600\n6.0\n2296\n31.9\n1994\n8.6\n16.5\n63036\n85.5\n65.4\n12.12051\n120507276 [m^2]\n19.05279\n24\nMULTIPOLYGON (((787828.3 21...\n\n\n48085030102\n198500\n6.0\n2720\n45.5\n1995\n19.2\n20.0\n65234\n78.6\n68.8\n12.19854\n202445272 [m^2]\n13.43573\n23\nMULTIPOLYGON (((784027.9 21...\n\n\n48085030201\n324200\n7.4\n3653\n35.1\n2002\n41.3\n4.9\n85938\n79.2\n77.0\n12.68912\n92575131 [m^2]\n39.45984\n16\nMULTIPOLYGON (((774843.6 21...\n\n\n48085030202\n366900\n7.3\n3530\n42.1\n2001\n40.9\n8.3\n134097\n88.3\n72.5\n12.81284\n153779876 [m^2]\n22.95489\n17\nMULTIPOLYGON (((764886.2 21...\n\n\n48085030204\n217200\n6.2\n6592\n32.7\n2006\n51.8\n9.7\n98622\n63.6\n63.0\n12.28857\n15789902 [m^2]\n417.48201\n12\nMULTIPOLYGON (((778099.2 21...\n\n\n48085030205\n231200\n6.3\n5257\n30.4\n2007\n31.7\n28.3\n75382\n82.2\n45.9\n12.35104\n9814228 [m^2]\n535.65092\n11\nMULTIPOLYGON (((777818.4 21...\n\n\n\n\n\n\n\n\n\n\n\n\nformula_1 &lt;- \"median_value_log ~ median_rooms + median_income + pct_college + pct_foreign_born + pct_white + median_age + median_structure_age + percent_ooh + pop_density + total_population\"\n\nmodel_1 &lt;- lm(formula = formula_1, data = dfw_data_for_model_sf)\nsummary(model_1)\n\n\nCall:\nlm(formula = formula_1, data = dfw_data_for_model_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.03016 -0.14248  0.00033  0.14793  1.45715 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           1.123e+01  6.199e-02 181.098  &lt; 2e-16 ***\nmedian_rooms          8.801e-03  1.058e-02   0.832 0.405629    \nmedian_income         5.007e-06  4.202e-07  11.915  &lt; 2e-16 ***\npct_college           1.325e-02  5.993e-04  22.109  &lt; 2e-16 ***\npct_foreign_born      2.877e-03  8.005e-04   3.594 0.000335 ***\npct_white             3.961e-03  4.735e-04   8.365  &lt; 2e-16 ***\nmedian_age            4.781e-03  1.372e-03   3.484 0.000507 ***\nmedian_structure_age  1.201e-05  2.585e-05   0.465 0.642161    \npercent_ooh          -4.761e-03  5.599e-04  -8.504  &lt; 2e-16 ***\npop_density          -7.945e-06  6.157e-06  -1.290 0.197129    \ntotal_population      8.961e-06  4.460e-06   2.009 0.044714 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2695 on 1548 degrees of freedom\nMultiple R-squared:  0.7818,    Adjusted R-squared:  0.7804 \nF-statistic: 554.6 on 10 and 1548 DF,  p-value: &lt; 2.2e-16\n\n\n\nProduce a correlation matrix among the predictors to inspect collinearity.\n\nIt appears that the predictors are correlated with one another to some degree\n\npredictors_1_v &lt;- c('median_rooms','median_income','pct_college','pct_foreign_born','pct_white','median_age','median_structure_age','percent_ooh','pop_density','total_population')\n\ndfw_estimates_dt &lt;- dfw_data_for_model_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, ..predictors_1_v]\n\ncorrelations_df &lt;- corrr::correlate(dfw_estimates_dt, method = \"pearson\", quiet = TRUE)\n\nggplot2::autoplot(correlations_df)\n\n\n\n\nFigure 8.5a: Correlations between model predictors\n\n\n\n\n\nInvestigate the collinearity further by calculating the variance inflation factor (VIF).\n\n\nA VIF value of 1 indicates no collinearity; VIF values above 5 suggest a level of collinearity that has a problematic influence on model interpretation.\n\nThe predictor median_income has a VIF over 6 and suggest removing it from the model\n\nVIF &lt;- car::vif(model_1)\nvif_df &lt;- as.data.frame(VIF)\n\nkableExtra::kbl(vif_df)\n\n\n\nVIF values among the first model predictors\n\n\n\nVIF\n\n\n\n\nmedian_rooms\n5.450352\n\n\nmedian_income\n6.210613\n\n\npct_college\n3.722382\n\n\npct_foreign_born\n2.013436\n\n\npct_white\n3.233046\n\n\nmedian_age\n1.833662\n\n\nmedian_structure_age\n1.055767\n\n\npercent_ooh\n3.953791\n\n\npop_density\n1.537542\n\n\ntotal_population\n1.174623\n\n\n\n\n\n\n\n\n\nRe-run the model with median_income removed.\n\nNote that the effect of median_rooms on median home value is positive and statistically significant.\n\nformula_2 &lt;- \"median_value_log ~ median_rooms + pct_college + pct_foreign_born + pct_white + median_age + median_structure_age + percent_ooh + pop_density + total_population\"\n\nmodel_2 &lt;- lm(formula = formula_2, data = dfw_data_for_model_sf)\nsummary(model_2)\n\n\nCall:\nlm(formula = formula_2, data = dfw_data_for_model_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.91753 -0.15319 -0.00222  0.16192  1.58950 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           1.101e+01  6.202e-02 177.570  &lt; 2e-16 ***\nmedian_rooms          7.326e-02  9.497e-03   7.714 2.18e-14 ***\npct_college           1.775e-02  4.862e-04  36.507  &lt; 2e-16 ***\npct_foreign_born      4.170e-03  8.284e-04   5.034 5.38e-07 ***\npct_white             4.996e-03  4.862e-04  10.275  &lt; 2e-16 ***\nmedian_age            3.527e-03  1.429e-03   2.468   0.0137 *  \nmedian_structure_age  2.831e-05  2.696e-05   1.050   0.2939    \npercent_ooh          -3.888e-03  5.798e-04  -6.705 2.81e-11 ***\npop_density          -5.474e-06  6.428e-06  -0.852   0.3946    \ntotal_population      9.712e-06  4.658e-06   2.085   0.0372 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2815 on 1549 degrees of freedom\nMultiple R-squared:  0.7618,    Adjusted R-squared:  0.7604 \nF-statistic: 550.4 on 9 and 1549 DF,  p-value: &lt; 2.2e-16\n\n\n\nCompute the VIF for the second model.\n\nWith the removal of median_income from the model, all of the VIF values are now below 5.\n\nVIF &lt;- car::vif(model_2)\nvif_df &lt;- as.data.frame(VIF)\n\nkableExtra::kbl(vif_df)\n\n\n\nVIF values among the second model predictors\n\n\n\nVIF\n\n\n\n\nmedian_rooms\n4.025349\n\n\npct_college\n2.245164\n\n\npct_foreign_born\n1.976451\n\n\npct_white\n3.124310\n\n\nmedian_age\n1.822864\n\n\nmedian_structure_age\n1.052811\n\n\npercent_ooh\n3.885979\n\n\npop_density\n1.535798\n\n\ntotal_population\n1.174389\n\n\n\n\n\n\n\n\n\n\n\n\nCalculate a principal components analysis using dfw_estimates_dt as the predictor data.\n\n\npca_lst &lt;- prcomp(\n  formula = ~.,\n  data = dfw_estimates_dt,\n  scale. = TRUE,\n  center = TRUE\n)\nsummary(pca_lst)\n\nImportance of components:\n                         PC1   PC2    PC3    PC4     PC5     PC6     PC7\nStandard deviation     2.020 1.183 1.1307 1.0093 0.89918 0.70312 0.67682\nProportion of Variance 0.408 0.140 0.1278 0.1019 0.08085 0.04944 0.04581\nCumulative Proportion  0.408 0.548 0.6759 0.7778 0.85860 0.90804 0.95385\n                           PC8     PC9    PC10\nStandard deviation     0.48099 0.36127 0.31568\nProportion of Variance 0.02314 0.01305 0.00997\nCumulative Proportion  0.97698 0.99003 1.00000\n\n\n\nShow the loading values for the predictors under each of the first 5 out of 10 components.\n\n\npca_dt &lt;- pca_lst$rotation %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  cbind(predictors_1_v, .) %&gt;% \n  data.table::setnames(old = \"predictors_1_v\", new = \"predictor\") %&gt;% \n  .[, predictor := as.factor(predictor)]\n\n\n\n\n\nTable 8.6: PCA variable loadings\n\n\npredictor\nPC1\nPC2\nPC3\nPC4\nPC5\n\n\n\n\nmedian_rooms\n-0.4077831\n0.1322892\n-0.3487259\n-0.0587324\n0.2076067\n\n\nmedian_income\n-0.4149986\n-0.2277823\n-0.3213260\n0.0366773\n-0.0067022\n\n\npct_college\n-0.3116228\n-0.5359323\n-0.1567025\n0.1562390\n-0.2059928\n\n\npct_foreign_born\n0.2812599\n-0.2409594\n-0.4666664\n-0.0771557\n0.4515800\n\n\npct_white\n-0.3910565\n-0.0924263\n0.2855171\n0.1710000\n-0.3472556\n\n\nmedian_age\n-0.3474772\n-0.1379305\n0.2394049\n0.0781057\n0.2959928\n\n\nmedian_structure_age\n-0.0095854\n-0.2700258\n-0.0448758\n-0.8829222\n-0.3133622\n\n\npercent_ooh\n-0.3813014\n0.3032373\n-0.1929917\n-0.1681026\n0.3004939\n\n\npop_density\n0.2571276\n-0.4253733\n-0.2877394\n0.3248123\n-0.1262100\n\n\ntotal_population\n-0.0032156\n0.4603837\n-0.5214579\n0.1272285\n-0.5457814\n\n\n\n\n\n\n\n\n\nbuild_plot &lt;- function(id, df, pca_v){\n  a_plot &lt;- RplotterPkg::create_bar_plot(\n    df = df,\n    aes_x = \"predictor\",\n    aes_y = pca_v[[id]],\n    bar_fill = \"darkgreen\",\n    bar_alpha = 0.5,\n    y_limits = c(-1.0, 1.0),\n    y_major_breaks = c(-1.0, -0.5, 0.0, 0.5, 1.0),\n    do_coord_flip = T,\n    rot_y_tic_label = T,\n    panel_border_color = \"white\"\n  )\n  return(a_plot)\n}\n\npca_v &lt;- c('PC1','PC2','PC3','PC4','PC5')\n\nplot_lst &lt;- purrr::map(1:5,\n  build_plot,\n  df = pca_dt,\n  pca_v = pca_v\n)\n\nlayout &lt;- list(\n  plots = plot_lst,\n  rows = c(1, 1, 1, 1, 1),\n  cols = c(1, 2, 3, 4, 5)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  cell_width = 4,\n  cell_height = 14,\n  plot_titles = pca_v\n)\n\n\n\n\nFigure 8.6: Loadings for first five principal components\n\n\n\n\n\nAttach the principal components to the original data dfw_estimates_dt with predict() to produce a matrix of 10 principal component values for each tract observation.\n\n\ncomponents_m &lt;- predict(pca_lst, dfw_estimates_dt)\n\n\nShow the choropleth map of tract values for principal component PC1.\n\n\ndfw_pca_sf &lt;- dfw_data_for_model_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  cbind(components_m) %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_pca_sf,\n  aes_fill = \"PC1\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.7: Map of principal component 1\n\n\n\n\nThe brighter yellow areas, which have higher values for PC1, are located in communities like east Fort Worth, east Arlington, Grand Prairie, and south Dallas. Generally speaking, these are low-to-middle income areas with larger nonwhite populations. The locations with the lowest values for PC1 are Southlake (northeast of Fort Worth) and Highland Park (north of downtown Dallas); these communities are segregated, predominantly non-Hispanic white, and are among the wealthiest neighborhoods in the entire United States.\n\n\nUse the first six components as predictors of the outcome variable, median home value.\n\n\npca_formula &lt;- paste0(\"median_value_log ~ \", paste0('PC', 1:6, collapse = ' + '))\npca_model &lt;- lm(formula = pca_formula, data = dfw_pca_sf)\nsummary(pca_model)\n\n\nCall:\nlm(formula = pca_formula, data = dfw_pca_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.78885 -0.16885 -0.00754  0.16940  1.60060 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) 12.301439   0.007483 1643.874   &lt;2e-16 ***\nPC1         -0.180706   0.003706  -48.764   &lt;2e-16 ***\nPC2         -0.247209   0.006327  -39.074   &lt;2e-16 ***\nPC3         -0.077089   0.006620  -11.644   &lt;2e-16 ***\nPC4          0.084413   0.007417   11.382   &lt;2e-16 ***\nPC5         -0.111437   0.008325  -13.386   &lt;2e-16 ***\nPC6          0.003698   0.010646    0.347    0.728    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2955 on 1552 degrees of freedom\nMultiple R-squared:  0.737, Adjusted R-squared:  0.736 \nF-statistic: 724.9 on 6 and 1552 DF,  p-value: &lt; 2.2e-16\n\n\n\nOne possible disadvantage of principal components regression is the interpretation of the results as the different variables which are comprehensible on their own are now spread across the components.\n\n\n\n\n\n\nChart the distribution of the model_2 residuals to check for normality.\n\n\ndfw_data_for_model_sf$residuals &lt;- residuals(model_2)\n\nRplotterPkg::create_histogram_plot(\n  df = dfw_data_for_model_sf,\n  aes_x = \"residuals\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Residuals\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n)\n\n\n\n\n\nFigure 8.8: Distribution of model residuals with RplotterPkg::create_histogram_plot\n\n\n\n\nUse the Moran I test to evaluate the correlation of tract residuals with their neighbors.\n\nThe Moran’s I statistic of 0.21 is modest and positive but is statistically significant\n\n# Compute the tract weights\nweights_lst &lt;- dfw_data_for_model_sf %&gt;% \n  spdep::poly2nb() %&gt;% \n  spdep::nb2listw()\n\nspdep::moran.test(\n  x = dfw_data_for_model_sf$residuals,\n  listw = weights_lst\n)\n\n\n    Moran I test under randomisation\n\ndata:  dfw_data_for_model_sf$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 14.017, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2101039004     -0.0006418485      0.0002260366 \n\n\n\nShow a scatterplot of the residual value vs. the average residual for the neighbors of each tract.\n\nPlot illustrates the positive spatial autocorrelation in the residuals, suggesting that the assumption of independence in the model error term is violated\n\ndfw_data_for_model_sf$lagged_residuals &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dfw_data_for_model_sf$residuals\n)\n\nRplotterPkg::create_scatter_plot(\n  df = dfw_data_for_model_sf,\n  aes_x = \"residuals\",\n  aes_y = \"lagged_residuals\",\n  pts_size = 2,\n  pts_fill = \"gray40\",\n  pts_line_alpha = 0.5,\n  panel_border_color = \"white\",\n  x_title = \"residuals\",\n  y_title = \"lagged_residuals\"\n) +\n  geom_smooth(method = \"lm\", color = \"red\")\n\n\n\n\n\nFigure 8.9: Moran scatterplot of residual spatial autocorrelation\n\n\n\n\n\n\n\n\nEstimate the spatial lag model for the relationship between logged median home value and its predictors as a spatial lag model using spatialreg::lagsarlm() function.\n\n\nlag_model &lt;- spatialreg::lagsarlm(\n  formula = formula_2,\n  data = dfw_data_for_model_sf,\n  listw = weights_lst\n)\nsummary(lag_model, Nagelkerke = TRUE)\n\n\nCall:spatialreg::lagsarlm(formula = formula_2, data = dfw_data_for_model_sf, \n    listw = weights_lst)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-2.0648694 -0.1377201 -0.0033418  0.1393358  1.4820565 \n\nType: lag \nCoefficients: (asymptotic standard errors) \n                        Estimate  Std. Error z value  Pr(&gt;|z|)\n(Intercept)           7.0145e+00  2.6904e-01 26.0726 &lt; 2.2e-16\nmedian_rooms          6.1989e-02  8.8554e-03  7.0002 2.556e-12\npct_college           1.2854e-02  5.4694e-04 23.5022 &lt; 2.2e-16\npct_foreign_born      2.0049e-03  7.7480e-04  2.5877  0.009662\npct_white             2.7053e-03  4.7181e-04  5.7340 9.810e-09\nmedian_age            3.4313e-03  1.3162e-03  2.6070  0.009134\nmedian_structure_age  2.6057e-05  2.4826e-05  1.0496  0.293909\npercent_ooh          -3.0388e-03  5.4319e-04 -5.5944 2.214e-08\npop_density          -1.3576e-05  5.9297e-06 -2.2895  0.022053\ntotal_population      8.4044e-06  4.2925e-06  1.9579  0.050239\n\nRho: 0.35357, LR test value: 211.02, p-value: &lt; 2.22e-16\nAsymptotic standard error: 0.023382\n    z-value: 15.122, p-value: &lt; 2.22e-16\nWald statistic: 228.66, p-value: &lt; 2.22e-16\n\nLog likelihood: -125.2091 for lag model\nML residual variance (sigma squared): 0.067169, (sigma: 0.25917)\nNagelkerke pseudo-R-squared: 0.79195 \nNumber of observations: 1559 \nNumber of parameters estimated: 12 \nAIC: 274.42, (AIC for lm: 483.43)\nLM test for residual autocorrelation\ntest value: 6.8633, p-value: 0.0087984\n\n\n\n\n\n\n\nCompute the alternative spatial error model which includes a spatial lag in the model’s error term using spatialreg::errorsarlm() function.\n\n\nerror_model &lt;- spatialreg::errorsarlm(\n  formula = formula_2,\n  data = dfw_data_for_model_sf,\n  listw = weights_lst\n)\nsummary(error_model, Nagelkerke = TRUE)\n\n\nCall:spatialreg::errorsarlm(formula = formula_2, data = dfw_data_for_model_sf, \n    listw = weights_lst)\n\nResiduals:\n        Min          1Q      Median          3Q         Max \n-1.97995036 -0.13648443 -0.00053403  0.13927657  1.54937157 \n\nType: error \nCoefficients: (asymptotic standard errors) \n                        Estimate  Std. Error  z value  Pr(&gt;|z|)\n(Intercept)           1.1098e+01  6.6718e-02 166.3418 &lt; 2.2e-16\nmedian_rooms          8.3008e-02  9.7138e-03   8.5453 &lt; 2.2e-16\npct_college           1.5855e-02  5.7435e-04  27.6047 &lt; 2.2e-16\npct_foreign_born      3.6574e-03  9.6580e-04   3.7869 0.0001526\npct_white             4.6693e-03  6.1196e-04   7.6301 2.354e-14\nmedian_age            3.9280e-03  1.4129e-03   2.7801 0.0054341\nmedian_structure_age  2.6012e-05  2.5450e-05   1.0221 0.3067450\npercent_ooh          -4.7624e-03  5.6765e-04  -8.3897 &lt; 2.2e-16\npop_density          -1.5031e-05  6.8705e-06  -2.1878 0.0286845\ntotal_population      1.0553e-05  4.4676e-06   2.3621 0.0181721\n\nLambda: 0.46781, LR test value: 164.17, p-value: &lt; 2.22e-16\nAsymptotic standard error: 0.031993\n    z-value: 14.622, p-value: &lt; 2.22e-16\nWald statistic: 213.81, p-value: &lt; 2.22e-16\n\nLog likelihood: -148.6307 for error model\nML residual variance (sigma squared): 0.067876, (sigma: 0.26053)\nNagelkerke pseudo-R-squared: 0.7856 \nNumber of observations: 1559 \nNumber of parameters estimated: 12 \nAIC: 321.26, (AIC for lm: 483.43)\n\n\n\n\n\n\nRe-compute Moran I test over the residuals of both models to evaluate their effectiveness in reducing spatial dependence.\n\nFor the lag_model$residuals we have:\n\nspdep::moran.test(lag_model$residuals, weights_lst)\n\n\n    Moran I test under randomisation\n\ndata:  lag_model$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 2.0342, p-value = 0.02096\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0299267176     -0.0006418485      0.0002258128 \n\n\nFor the error_model$residuals we have:\n\nspdep::moran.test(error_model$residuals, weights_lst)\n\n\n    Moran I test under randomisation\n\ndata:  error_model$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = -1.618, p-value = 0.9472\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0249564490     -0.0006418485      0.0002258232 \n\n\nThe error model does a better job of eliminating spatial autocorrelation in the residuals entirely\n\nUse the lm.LMtests() function to apply Lagrange multiplier tests for spatial dependence of model_2.\n\n\nspdep::lm.RStests(\n  model_2,\n  weights_lst,\n  test = c(\"LMerr\",\"LMlag\",\"RLMerr\",\"RLMlag\")\n)\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nRSerr = 193.99, df = 1, p-value &lt; 2.2e-16\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nRSlag = 223.45, df = 1, p-value &lt; 2.2e-16\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nadjRSerr = 32.887, df = 1, p-value = 9.767e-09\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nadjRSlag = 62.343, df = 1, p-value = 2.887e-15\n\n\n\n\n\n\n\nGeographically weighted regression (GWR) is a technique designed to evaluate local variations in the results of regression models given a kernel (distance-decay) weighting function.\n\n\n\n\nGWR relies on the concept of a “kernel bandwidth” to compute the local regression model for each location. A kernel bandwidth is based on the kernel type (fixed or adaptive) and a distance-decay function. A fixed kernel uses a cutoff distance to determine which observations will be included in the local model for a given location i, whereas an adaptive kernel uses the nearest neighbors to a given location.\n\n\nFrom the formula_2 model regression and the dfw_data_for_model_sf simple feature data, compute an adaptive kernel bandwidth using the GWmodel::bw.gwr() function.\n\n\ndfw_data_sp &lt;- dfw_data_for_model_sf %&gt;% \n  sf::as_Spatial()\n\nbw &lt;- GWmodel::bw.gwr(\n  formula = formula_2,\n  data = dfw_data_sp,\n  kernel = \"bisquare\",\n  adaptive = TRUE\n)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nAdaptive bandwidth: 971 CV score: 116.9119 \nAdaptive bandwidth: 608 CV score: 111.8214 \nAdaptive bandwidth: 383 CV score: 107.8615 \nAdaptive bandwidth: 244 CV score: 105.2766 \nAdaptive bandwidth: 158 CV score: 110.0219 \nAdaptive bandwidth: 297 CV score: 106.3267 \nAdaptive bandwidth: 211 CV score: 104.6335 \nAdaptive bandwidth: 190 CV score: 104.3428 \nAdaptive bandwidth: 178 CV score: 104.4641 \nAdaptive bandwidth: 198 CV score: 104.5065 \nAdaptive bandwidth: 185 CV score: 104.3518 \nAdaptive bandwidth: 193 CV score: 104.4187 \nAdaptive bandwidth: 188 CV score: 104.3302 \nAdaptive bandwidth: 187 CV score: 104.322 \nAdaptive bandwidth: 186 CV score: 104.3448 \nAdaptive bandwidth: 187 CV score: 104.322 \n\n\n\nThe function chose 187 as the number of nearest neighbors baseed on cross-validation. This means that for each Census tract, the nearest 187 of the total 1559 Census tracts in the Dallas-Fort Worth region will be used to estimate the local model, with weights calculated using the bisquare distance-decay function…\n\n\n\n\n\nUse the GWmodel::gwr.basic() together with the bandwidth bw, the regression model formula_2, and the data dfw_data_sp to compute the locally estimated model parameters.\n\n\ngw_model &lt;- GWmodel::gwr.basic(\n  formula = formula_2,\n  data = dfw_data_sp,\n  bw = bw,\n  kernel = \"bisquare\",\n  adaptive = TRUE\n)\n\n\nRetrieve the SDF element from gw_model and show a choropleth map of the local R-squared values.\n\nThe map suggests that the model performs very well in Fort Worth, Collin County, and the eastern edge of the the metropolitan area, with the local R-squared values exceeding 0.9.\n\ngw_model_results_sf &lt;- gw_model$SDF %&gt;% \n  sf::st_as_sf()\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"Local_R2\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.10: Local R-squared values from the GWR model\n\n\n\n\nShow a choropleth map of the local coefficent values for the owner-occupied housing predictor(percent_ooh).\n\nThe high negative values(dark purple areas) reflect high median home values with lower ownership (i.e. uptown Dallas with renter-occupied housing). Low positive values(yellow areas) reflect higher median home values and greater percentage of owner-occupied housing.\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"percent_ooh\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.11: Local parameter estimates for percent owner-occupied housing\n\n\n\n\nShow a choropleth map of the local coefficent values for the population density predictor(pop_density).\n\nBright yellow locations are those where high population densities are associated with higher home values. Dark purples are associated with rural areas/suburbs withsimilarie low densities and higher home values.\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"pop_density\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.12: Local parameter estimates for population density\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeodemographic classification refers to the grouping of geographic observations based on similar demographic (or other) characteristics. It is commonly used to generate neighborhood “typologies” that can help explain general similarities and differences among neighborhoods in a broader region.\n\n\nThe dataset dfw_pca_sf provides 10 principal components and their loading values across 1559 Dallas-Fort Worth area tracts. Take the first 8 principal component loadings and cluster them into 6 groups using the kmeans() function.\n\n\nset.seed(1983)\n\ndfw_kmeans_lst &lt;- dfw_pca_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, PC1:PC8] %&gt;% \n  kmeans(centers = 6) \n  \ndfw_kmeans_freq_dt &lt;- table(dfw_kmeans_lst$cluster) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = c(\"V1\",\"N\"), new = c(\"Cluster\", \"Freq\"))\n\nThe smallest(Cluster 4) has 83 Census tracts, whereas the largest(Cluster 1) has 456 Census tracts\n\n\n\n\n\n\nCluster\nFreq\n\n\n\n\n1\n456\n\n\n2\n193\n\n\n3\n172\n\n\n4\n83\n\n\n5\n228\n\n\n6\n427\n\n\n\n\n\n\n\n\n\nMutate the cluster id’s vector (i.e. dfw_kmeans_lst$cluster) to dfw_pca_sf and create a choropleth map with the id as the fill aesthetic.\n\n\ndfw_clusters_sf &lt;- dfw_pca_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, Cluster := as.factor(dfw_kmeans_lst$cluster)] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_clusters_sf,\n  aes_fill = \"Cluster\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_brewer(palette = \"Set1\")\n\n\n\n\n\nFigure 8.13: Map of geodemographic clusters in Dallas-Fort Worth\n\n\n\n\ncluster_plot &lt;- ggplot(\n  data = dfw_clusters_sf,\n  aes(x = PC1, y = PC2, data_id = GOID, color = Cluster)\n) +\nggiraph::geom_point_interactive(aes(\n    tooltip = paste(\n      \"&lt;strong&gt;PC1:&lt;/strong&gt;\", round(PC1,digits = 2),\n      \"&lt;br&gt;&lt;strong&gt;PC2:&lt;/strong&gt;\", round(PC2,digits = 2),\n      \"&lt;br&gt;&lt;strong&gt;Cluster:&lt;/strong&gt;\", Cluster\n    )\n)) +\nggplot2::scale_color_brewer(palette = \"Set1\") +\ntheme_minimal()\n\nggiraph::girafe(ggobj = cluster_plot)\n\n\n\n\nFigure 8.14: Interactive scatterplot of PC1 and PC2 by Cluster\n# cluster_plot  &lt;- ggplot(data = dfw_clusters_sf, aes(x = PC1, y = PC2, color = Cluster)) +\n# #ggplot2::scale_color_brewer(palette = \"Set1\") +\n# theme_minimal()\n# \n# cluster_plot &lt;- cluster_plot + geom_point()\n# \n# plotly::ggplotly(cluster_plot)\n\n\n\n\n\nThe geodemographic classification outlined in the previous section offers a useful methodology for identifying similar types of Census tracts in varying parts of a metropolitan region. However, this approach was aspatial in that it did not take the geographic properties of the Census tracts into account.\n\n\nFrom dfw_pca_sf simple feature use the SKATER algorithm to take into account a spatial, Census tract constraint to the clusters.\n\nGenerate the weights:\n\ninput_vars_dt &lt;- dfw_pca_sf %&gt;%\n  data.table::as.data.table(.) %&gt;%\n  .[, PC1:PC8]\n\nskater_nbrs &lt;- spdep::poly2nb(dfw_pca_sf, queen = TRUE)\ncosts_lst &lt;- spdep::nbcosts(skater_nbrs, input_vars_dt)\nskater_weights &lt;- spdep::nb2listw(skater_nbrs, costs_lst, style = \"B\")\n\nCreate a minimum spanning tree and call spdep::skater() to identify groups of tracts that make up “regions”:\n\nmst &lt;- spdep::mstree(skater_weights)\n\nregions &lt;- spdep::skater(\n  mst[, 1:2],\n  input_vars_dt,\n  ncuts = 7,\n  crit = 10\n)\n\n\nCreate a choropleth map of the “regions” based on the group identifiers in regions$groups.\n\n\ndfw_clusters_sf$Region &lt;- as.factor(regions$groups)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_clusters_sf,\n  aes_fill = \"Region\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_brewer(palette = \"Set1\")  \n\n\n\n\n\nFigure 8.15: Map of contiguous regions derived with the SKATER algorithm",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  },
  {
    "objectID": "8_modeling_census_data.html#indices-of-segregation-and-diversity",
    "href": "8_modeling_census_data.html#indices-of-segregation-and-diversity",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "Segregation as addressed here generally refers to the measurement of the extent to which two or more groups live apart from each other; diversity as a companion metric measures neighborhood heterogeneity among groups.\n\n\n\n\nGet California population tract data by race/ethnicity.\n\nGet the race/ethnicity data:\n\nca_fips &lt;- usmap::fips(state = \"california\")\nca_race_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2019,\n  vars = c(\n    white = \"B03002_003E\",\n    black = \"B03002_004E\",\n    asian = \"B03002_006E\",\n    hispanic = \"B03002_012E\"\n  ),\n  regionin = paste0(\"state:\",ca_fips),\n  region = \"tract:*\"\n)\n\nGet the tract geometries for California and join it with the above California race/ethnicity data:\n\nca_acs_data_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ca_fips,\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  datafile = ca_race_dt,\n  datafile_key = \"GEOID\",\n  sf_info = F\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(\n    old = c(\"B03002_003E\",\"B03002_004E\",\"B03002_006E\",\"B03002_012E\"),\n    new = c(\"white\",\"black\",\"asian\",\"hispanic\")\n  ) %&gt;% \n  sf::st_as_sf(.)\n\nGet the urbanized areas of California with populations greater than 750000:\n\nus_urban_areas_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs1\",\n  vintage = 2019,\n  vars = \"B01001_001E\",\n  regionin = \"urban_area\"\n) %&gt;% \n data.table::setnames(old = \"B01001_001E\",new = \"population\") %&gt;% \n .[, population := as.numeric(population)] %&gt;% \n .[population &gt;= 750000 & grepl(pattern = \"CA Urbanized Area (2010)\", NAME, fixed = T),] %&gt;%\n .[, NAME := stringr::str_remove(NAME, stringr::fixed(\" Urbanized Area (2010)\"))]\n\nGet the geometries for the urbanized areas and join it with the above urban population data:\n\nus_urban_areas_sf &lt;- RcensusPkg::tiger_urban_area_sf(\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  sf_info = F,\n  datafile = us_urban_areas_dt,\n  datafile_key = \"GEOID\",\n  sf_key = \"GEOID10\",\n  check_na = T\n) \n\nCompute an inner spatial join between the above California population race tracts (ca_acs_data_sf) geometries and the California urbanized area geometries (us_urban_areas_sf):\n\nca_urban_data_dt &lt;- ca_acs_data_sf %&gt;% \n  sf::st_join(us_urban_areas_sf, left = F) %&gt;% \n  sf::st_drop_geometry() %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = c(\"GEOID.x\",\"NAME10\"),new = c(\"GEOID\",\"urban_name\")) %&gt;% \n  .[,.(white,black,asian,hispanic,GEOID,urban_name)] %&gt;%   data.table::melt(id.vars = c(\"GEOID\",\"urban_name\"), variable.name = \"variable\",value.name = \"estimate\") %&gt;% \n.[, estimate := as.numeric(estimate)]\n\n\n\n\n\nTable 8.1: Prepared data for segregation analysis\n\n\nGEOID\nurban_name\nvariable\nestimate\n\n\n\n\n06001400100\nSan Francisco--Oakland, CA\nwhite\n2317\n\n\n06001400200\nSan Francisco--Oakland, CA\nwhite\n1475\n\n\n06001400300\nSan Francisco--Oakland, CA\nwhite\n3434\n\n\n06001400400\nSan Francisco--Oakland, CA\nwhite\n2554\n\n\n06001400500\nSan Francisco--Oakland, CA\nwhite\n1874\n\n\n06001400600\nSan Francisco--Oakland, CA\nwhite\n860\n\n\n06001400700\nSan Francisco--Oakland, CA\nwhite\n1963\n\n\n06001400800\nSan Francisco--Oakland, CA\nwhite\n1772\n\n\n\n\n\n\n\n\n\n\n\n\nThe dissimilarity index is widely used to assess neighborhood segregation between two groups within a region.\n\n\nAssess neighborhood segregation between non-Hispanic white and Hispanic populations for the San Francisco/Oakland urbanized area.\n\n\nwhite_hispanic_dissimilar &lt;- ca_urban_data_dt %&gt;% \n  .[variable %in% c(\"white\",\"hispanic\") & urban_name == \"San Francisco--Oakland, CA\",] %&gt;% \n  segregation::dissimilarity(\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\"\n  )\n\nThe D index of segregation between non-Hispanic and Hispanic populations in the San Francisco-Oakland area is D, 0.5135526.\n\nFind the dissimilarity index between non-Hispanic and Hispanic populations for all the urban areas.\n\n\ncustom_fun &lt;- function(dt){\n  dissimilar &lt;- segregation::dissimilarity(\n    data = dt,\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\"\n  )\n}\n\nwhite_hispanic_dissimilar_urban_groups_dt &lt;- ca_urban_data_dt %&gt;%\n  .[variable %in% c(\"white\",\"hispanic\"),custom_fun(.SD),by=urban_name] %&gt;% \n  data.table::setorderv(.,cols = \"est\", order = -1)\n\nLos Angeles area is the most segregated of the large urbanized areas in California with respect to non-Hispanic white and Hispanic populations\n\n\n\n\nTable 8.2: Dissimilarity indices for Hispanic and non-Hispanic white populations, large California urbanized areas\n\n\nurban_name\nstat\nest\n\n\n\n\nLos Angeles--Long Beach--Anaheim, CA\nD\n0.5999229\n\n\nSan Francisco--Oakland, CA\nD\n0.5135526\n\n\nSan Jose, CA\nD\n0.4935633\n\n\nSan Diego, CA\nD\n0.4898184\n\n\nRiverside--San Bernardino, CA\nD\n0.4079863\n\n\nSacramento, CA\nD\n0.3687927\n\n\n\n\n\n\n\n\n\n\n\n\nUse the segregation::mutual_within() function to measure segregation and diversity between multiple groups.\n\n\nmultiple_diversity_dt &lt;- segregation::mutual_within(\n  data = ca_urban_data_dt,\n  group = \"variable\",\n  unit = \"GEOID\",\n  weight = \"estimate\",\n  within = \"urban_name\",\n  wide = TRUE\n)\n\nLos Angeles remains the most segregated urban area, whereas Riverside/San Bernardino is the least segregated\n\n\n\n\nTable 8.3: Multi-group segregation results for California urban areas\n\n\nurban_name\nM\np\nH\nent_ratio\n\n\n\n\nLos Angeles--Long Beach--Anaheim, CA\n0.3391033\n0.5016371\n0.2851662\n0.9693226\n\n\nRiverside--San Bernardino, CA\n0.1497129\n0.0867808\n0.1408461\n0.8664604\n\n\nSacramento, CA\n0.1658898\n0.0736948\n0.1426804\n0.9477412\n\n\nSan Diego, CA\n0.2290891\n0.1256072\n0.2025728\n0.9218445\n\n\nSan Francisco--Oakland, CA\n0.2685992\n0.1394522\n0.2116127\n1.0346590\n\n\nSan Jose, CA\n0.2147445\n0.0728278\n0.1829190\n0.9569681\n\n\n\n\n\n\n\n\n\nUse the segregation::mutual_local() function to measure segregation across the tracts in just the Los Angeles urban area and create a choropleth map the measurements.\n\nGet the segregation measures for Los Angeles:\n\nla_local_seg_dt &lt;- ca_urban_data_dt %&gt;% \n  .[urban_name == \"Los Angeles--Long Beach--Anaheim, CA\",] %&gt;% \n  segregation::mutual_local(\n    group = \"variable\",\n    unit = \"GEOID\",\n    weight = \"estimate\",\n    wide = TRUE\n  )\n\nJoin the segregation data with tract geometries:\n\nla_tracts_seg_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = ca_fips,\n  output_dir = output_dir,\n  vintage = 2019,\n  general = T,\n  datafile = la_local_seg_dt,\n  datafile_key = \"GEOID\",\n  transform_crs = 26946,\n  check_na = TRUE,\n  sf_info = FALSE\n)\n\nCreate the choropleth map:\n\nRspatialPkg::get_geom_sf(\n  sf = la_tracts_seg_sf,\n  aes_fill = \"ls\",\n  hide_x_tics = TRUE,\n  hide_y_tics = TRUE,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::labs(fill = \"Local\\nsegregation index\") +\n  ggplot2::scale_fill_viridis_c(option = \"inferno\")\n\n\n\n\n\nFigure 8.1: Map of local multi-group segregation scores in Los Angeles\n\n\n\n\n\n\nThis section is skipped",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  },
  {
    "objectID": "8_modeling_census_data.html#regression-modeling-with-the-us-census-data",
    "href": "8_modeling_census_data.html#regression-modeling-with-the-us-census-data",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "As an illustrative example, get the predictor variable values by Census tract in the Dallas-Fort Worth metropolitan area.\n\nDefine the Texas counties FIPS and variable acronyms from both the acs/acs5 and acs/acs5/profile datasets:\n\ncounty_fips &lt;- function(fips){\n  return (substr(fips, 3, 5))\n}\n\ntexas_fips &lt;- usmap::fips(state = \"Texas\")\ncollin_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Collin\"))\ndallas_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Dallas\"))\ndenton_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Denton\"))\nellis_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Ellis\"))\nhunt_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Hunt\"))\nkaufman_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Kaufman\"))\nrockwall_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Rockwall\"))\njohnson_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Johnson\"))\nparker_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Parker\"))\ntarrant_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Tarrant\"))\nwise_fips &lt;- county_fips(usmap::fips(state = \"Texas\", county = \"Wise\"))\n\ndfw_counties &lt;- c(collin_fips,dallas_fips,denton_fips,ellis_fips,hunt_fips,kaufman_fips,rockwall_fips,johnson_fips,parker_fips,tarrant_fips,wise_fips)\n\nvariables_acs5_df &lt;- data.frame(\n  names = c(\n    'median_valueE',\n    'median_valueM',\n    'median_roomsE',\n    'median_roomsM',\n    'total_populationE',\n    'total_populationM',\n    'median_ageE',\n    'median_ageM',\n    'median_year_builtE',\n    'median_year_builtM'\n  ),\n  val = c(\n    \"B25077_001E\",\n    \"B25077_001M\",\n    \"B25018_001E\",\n    \"B25018_001M\",\n    \"B01003_001E\",\n    \"B01003_001M\",\n    \"B01002_001E\",\n    \"B01002_001M\",\n    \"B25037_001E\",\n    \"B25037_001M\"\n  )\n)\nvariables_acs5_profile_df &lt;- data.frame(\n  names = c(\n    'pct_collegeE',\n    'pct_collegeM',\n    'pct_foreign_bornE',\n    'pct_foreign_bornM',\n    'median_incomeE',\n    'median_incomeM',\n    'percent_oohE',\n    'percent_oohM',\n    'pct_whiteE',\n    'pct_whiteM'\n  ),\n  val = c(\n   \"DP02_0068PE\",\n   \"DP02_0068PM\",\n   \"DP02_0094PE\",\n   \"DP02_0094PM\",\n   \"DP03_0062E\",\n   \"DP03_0062M\",\n   \"DP04_0046PE\",\n   \"DP04_0046PM\",\n   \"DP05_0077PE\",\n   \"DP05_0077PM\"\n  )\n)\n\nGet the acs/acs5/profile data and remove negative values:\n\n# Get the data\ndfw_acs5_profile_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5/profile\",\n  vintage = 2020,\n  vars = variables_acs5_profile_df$val,\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", texas_fips)\n) %&gt;%\n  .[county %in% dfw_counties, ] %&gt;%\n  .[, DP02_0068PE:GEOID] %&gt;%\n  data.table::setnames(old = variables_acs5_profile_df$val, new = variables_acs5_profile_df$names) %&gt;%\n  .[, .(\n    GEOID,\n    median_incomeE = as.numeric(median_incomeE),\n    median_incomeM = as.numeric(median_incomeM),\n    pct_collegeE = as.numeric(pct_collegeE),\n    pct_collegeM = as.numeric(pct_collegeM),\n    pct_foreign_bornE = as.numeric(pct_foreign_bornE),\n    pct_foreign_bornM = as.numeric(pct_foreign_bornM),\n    pct_whiteE = as.numeric(pct_whiteE),\n    pct_whiteM = as.numeric(pct_whiteM),\n    percent_oohE = as.numeric(percent_oohE),\n    percent_oohM = as.numeric(percent_oohM)\n  )]\n# Reshape dfw_acs5_profile_dt to long form and remove negative values\nlong_dt &lt;- data.table::melt(\n  data = dfw_acs5_profile_dt, \n  id.vars = \"GEOID\") %&gt;% \n  .[value &gt;= 0.0, ]\n\n# Reshape long_dt back to wide format assigned to dfw_acs5_profile_dt\ndfw_acs5_profile_dt &lt;- data.table::dcast(\n  data = long_dt,\n  GEOID ~ variable,\n  value.var = 'value'\n)\n\nGet the acs/acs5 data and remove negative values.\n\ndfw_acs5_dt &lt;- RcensusPkg::get_vintage_data(\n  dataset = \"acs/acs5\",\n  vintage = 2020,\n  vars = variables_acs5_df$val,\n  region = \"tract:*\",\n  regionin = paste0(\"state:\", texas_fips)\n) %&gt;%\n  .[county %in% dfw_counties, ] %&gt;%\n  .[, B25077_001E:GEOID] %&gt;%\n  data.table::setnames(old = variables_acs5_df$val, new = variables_acs5_df$names) %&gt;%\n  .[, .(\n    GEOID,\n    median_valueE = as.numeric(median_valueE),\n    median_valueM = as.numeric(median_valueM),\n    median_roomsE = as.numeric(median_roomsE),\n    median_roomsM = as.numeric(median_roomsM),\n    total_populationE = as.numeric(total_populationE),\n    total_populationM = as.numeric(total_populationM),\n    median_ageE = as.numeric(median_ageE),\n    median_ageM = as.numeric(median_ageM),\n    median_year_builtE = as.numeric(median_year_builtE),\n    median_year_builtM = as.numeric(median_year_builtM)\n  )]\n\n# Reshape dfw_acs5_dt to long form and remove negative values\nlong_dt &lt;- data.table::melt(\n  data = dfw_acs5_dt, \n  id.vars = \"GEOID\") %&gt;% \n  .[value &gt;= 0.0, ]\n\n# Reshape long_dt back to wide format assigned to dfw_acs5_dt\ndfw_acs5_dt &lt;- data.table::dcast(\n  data = long_dt,\n  GEOID ~ variable,\n  value.var = 'value'\n) \n\nJoin acs/acs5/profile with acs/acs5 keyed to their common GEOID value:\n\ndata.table::setkey(dfw_acs5_profile_dt, \"GEOID\")\ndata.table::setkey(dfw_acs5_dt, \"GEOID\")\n\ndfw_data_dt &lt;- dfw_acs5_profile_dt[dfw_acs5_dt]\n\nGet the Dallas area simple feature tract geometries and join them with the dfw_data_dt data frame keyed via their common GEOID:\n\ndfw_data_sf &lt;- RcensusPkg::tiger_tracts_sf(\n  state = texas_fips,\n  output_dir = output_dir,\n  vintage = 2020,\n  general = TRUE, \n  datafile = dfw_data_dt,\n  datafile_key = \"GEOID\",\n  check_na = FALSE,\n  sf_info = FALSE\n) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[COUNTYFP %in% dfw_counties, ] %&gt;% \n  .[, .(\n    GEOID,\n    median_valueE,\n    median_valueM,\n    median_roomsE,\n    median_roomsM,\n    total_populationE,\n    total_populationM,\n    median_ageE,\n    median_ageM,\n    median_year_builtE,\n    median_year_builtM,\n    pct_collegeE,\n    pct_collegeM,\n    pct_foreign_bornE,\n    pct_foreign_bornM,\n    median_incomeE,\n    median_incomeM,\n    percent_oohE,\n    percent_oohM,\n    pct_whiteE,\n    pct_whiteM,\n    geometry)] %&gt;% \n  sf::st_as_sf(.) %&gt;% \n  sf::st_transform(32138) # NAD83 Texas North Central\n\n\n\n\n\nTable 8.4: Data acquired from RcensusPkg for regression modeling\n\n\nGEOID\nmedian_valueE\nmedian_valueM\nmedian_roomsE\nmedian_roomsM\ntotal_populationE\ntotal_populationM\nmedian_ageE\nmedian_ageM\nmedian_year_builtE\nmedian_year_builtM\npct_collegeE\npct_collegeM\npct_foreign_bornE\npct_foreign_bornM\nmedian_incomeE\nmedian_incomeM\npercent_oohE\npercent_oohM\npct_whiteE\npct_whiteM\ngeometry\n\n\n\n\n48085030101\n183600\n11112\n6.0\n0.3\n2296\n420\n31.9\n5.6\n1994\n6\n8.6\n4.3\n16.5\n9.7\n63036\n25030\n85.5\n6.0\n65.4\n12.6\nMULTIPOLYGON (((787828.3 21...\n\n\n48085030102\n198500\n88036\n6.0\n0.7\n2720\n524\n45.5\n4.4\n1995\n4\n19.2\n6.5\n20.0\n9.0\n65234\n19074\n78.6\n9.7\n68.8\n9.8\nMULTIPOLYGON (((784027.9 21...\n\n\n48085030201\n324200\n47203\n7.4\n0.6\n3653\n509\n35.1\n5.6\n2002\n3\n41.3\n6.6\n4.9\n2.7\n85938\n12350\n79.2\n7.1\n77.0\n7.8\nMULTIPOLYGON (((774843.6 21...\n\n\n48085030202\n366900\n20014\n7.3\n0.4\n3530\n418\n42.1\n3.3\n2001\n4\n40.9\n5.6\n8.3\n4.6\n134097\n24830\n88.3\n4.7\n72.5\n8.5\nMULTIPOLYGON (((764886.2 21...\n\n\n48085030204\n217200\n14152\n6.2\n0.8\n6592\n1193\n32.7\n4.4\n2006\n1\n51.8\n15.8\n9.7\n5.3\n98622\n6630\n63.6\n18.2\n63.0\n10.0\nMULTIPOLYGON (((778099.2 21...\n\n\n48085030205\n231200\n41519\n6.3\n0.8\n5257\n1273\n30.4\n1.6\n2007\n3\n31.7\n12.2\n28.3\n15.0\n75382\n41296\n82.2\n11.7\n45.9\n17.5\nMULTIPOLYGON (((777818.4 21...\n\n\n\n\n\n\n\n\n\n\n\n\nCreate a choropleth map of the outcome variable median home value.\n\n\nmhv_map &lt;- RspatialPkg::get_geom_sf(\n  sf = dfw_data_sf,\n  aes_fill = \"median_valueE\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c(labels = scales::label_dollar()) +\n  ggplot2::labs(fill = \"Median home value\")\n\nScale for fill is already present.\nAdding another scale for fill, which will replace the existing scale.\n\n\n\nCreate a histogram of the outcome variable median home value.\n\n\nmhv_histogram &lt;- RplotterPkg::create_histogram_plot(\n  df = dfw_data_sf,\n  aes_x = \"median_valueE\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Median home value\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n) \n\n\nmhv_map + mhv_histogram\n\n\n\n\nFigure 8.3: Median home value charts\n\n\n\n\n\nLog-transform the outcome variable to make its distribution closer to normal.\n\n\ndfw_data_sf &lt;- dfw_data_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, median_valueE_log := log(median_valueE)] %&gt;% \n  sf::st_as_sf(.)\n\nmhv_map_log &lt;- RspatialPkg::get_geom_sf(\n  sf = dfw_data_sf,\n  aes_fill = \"median_valueE_log\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c() +\n  ggplot2::labs(fill = \"Median home value\")\n\nmhv_histogram_log &lt;- RplotterPkg::create_histogram_plot(\n  df = dfw_data_sf,\n  aes_x = \"median_valueE_log\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Median home value\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n) \n\nmhv_map_log + mhv_histogram_log\n\n\n\n\nFigure 8.4: Logged median home value charts\n\n\n\n\n\n\n\n\nAdd two new variables to dfw_data_sf: pop_density and median_structure_age.\n\n\nE_cols &lt;- !endsWith(colnames(dfw_data_sf), \"M\")\narea &lt;- sf::st_area(dfw_data_sf)\n\ndfw_data_for_model_sf &lt;- data.table::as.data.table(dfw_data_sf) %&gt;%\n  .[, E_cols, with=FALSE] %&gt;%\n  .[, area := area] %&gt;%\n  .[, `:=`(pop_density = as.numeric(units::set_units(total_populationE / area, \"1/km2\")),\n           median_structure_age = 2018 - median_year_builtE)] %&gt;%\n  data.table::setnames(., old = colnames(.), new = stringr::str_remove(colnames(.), \"E\")) %&gt;%\n  na.omit(.) %&gt;%\n  sf::st_as_sf(.)\n\n\n\n\n\nTable 8.5: Engineered predictors for regression modeling\n\n\nGOID\nmedian_value\nmedian_rooms\ntotal_population\nmedian_age\nmedian_year_built\npct_college\npct_foreign_born\nmedian_income\npercent_ooh\npct_white\nmedian_value_log\narea\npop_density\nmedian_structure_age\ngeometry\n\n\n\n\n48085030101\n183600\n6.0\n2296\n31.9\n1994\n8.6\n16.5\n63036\n85.5\n65.4\n12.12051\n120507276 [m^2]\n19.05279\n24\nMULTIPOLYGON (((787828.3 21...\n\n\n48085030102\n198500\n6.0\n2720\n45.5\n1995\n19.2\n20.0\n65234\n78.6\n68.8\n12.19854\n202445272 [m^2]\n13.43573\n23\nMULTIPOLYGON (((784027.9 21...\n\n\n48085030201\n324200\n7.4\n3653\n35.1\n2002\n41.3\n4.9\n85938\n79.2\n77.0\n12.68912\n92575131 [m^2]\n39.45984\n16\nMULTIPOLYGON (((774843.6 21...\n\n\n48085030202\n366900\n7.3\n3530\n42.1\n2001\n40.9\n8.3\n134097\n88.3\n72.5\n12.81284\n153779876 [m^2]\n22.95489\n17\nMULTIPOLYGON (((764886.2 21...\n\n\n48085030204\n217200\n6.2\n6592\n32.7\n2006\n51.8\n9.7\n98622\n63.6\n63.0\n12.28857\n15789902 [m^2]\n417.48201\n12\nMULTIPOLYGON (((778099.2 21...\n\n\n48085030205\n231200\n6.3\n5257\n30.4\n2007\n31.7\n28.3\n75382\n82.2\n45.9\n12.35104\n9814228 [m^2]\n535.65092\n11\nMULTIPOLYGON (((777818.4 21...\n\n\n\n\n\n\n\n\n\n\n\n\nformula_1 &lt;- \"median_value_log ~ median_rooms + median_income + pct_college + pct_foreign_born + pct_white + median_age + median_structure_age + percent_ooh + pop_density + total_population\"\n\nmodel_1 &lt;- lm(formula = formula_1, data = dfw_data_for_model_sf)\nsummary(model_1)\n\n\nCall:\nlm(formula = formula_1, data = dfw_data_for_model_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.03016 -0.14248  0.00033  0.14793  1.45715 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           1.123e+01  6.199e-02 181.098  &lt; 2e-16 ***\nmedian_rooms          8.801e-03  1.058e-02   0.832 0.405629    \nmedian_income         5.007e-06  4.202e-07  11.915  &lt; 2e-16 ***\npct_college           1.325e-02  5.993e-04  22.109  &lt; 2e-16 ***\npct_foreign_born      2.877e-03  8.005e-04   3.594 0.000335 ***\npct_white             3.961e-03  4.735e-04   8.365  &lt; 2e-16 ***\nmedian_age            4.781e-03  1.372e-03   3.484 0.000507 ***\nmedian_structure_age  1.201e-05  2.585e-05   0.465 0.642161    \npercent_ooh          -4.761e-03  5.599e-04  -8.504  &lt; 2e-16 ***\npop_density          -7.945e-06  6.157e-06  -1.290 0.197129    \ntotal_population      8.961e-06  4.460e-06   2.009 0.044714 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2695 on 1548 degrees of freedom\nMultiple R-squared:  0.7818,    Adjusted R-squared:  0.7804 \nF-statistic: 554.6 on 10 and 1548 DF,  p-value: &lt; 2.2e-16\n\n\n\nProduce a correlation matrix among the predictors to inspect collinearity.\n\nIt appears that the predictors are correlated with one another to some degree\n\npredictors_1_v &lt;- c('median_rooms','median_income','pct_college','pct_foreign_born','pct_white','median_age','median_structure_age','percent_ooh','pop_density','total_population')\n\ndfw_estimates_dt &lt;- dfw_data_for_model_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, ..predictors_1_v]\n\ncorrelations_df &lt;- corrr::correlate(dfw_estimates_dt, method = \"pearson\", quiet = TRUE)\n\nggplot2::autoplot(correlations_df)\n\n\n\n\nFigure 8.5a: Correlations between model predictors\n\n\n\n\n\nInvestigate the collinearity further by calculating the variance inflation factor (VIF).\n\n\nA VIF value of 1 indicates no collinearity; VIF values above 5 suggest a level of collinearity that has a problematic influence on model interpretation.\n\nThe predictor median_income has a VIF over 6 and suggest removing it from the model\n\nVIF &lt;- car::vif(model_1)\nvif_df &lt;- as.data.frame(VIF)\n\nkableExtra::kbl(vif_df)\n\n\n\nVIF values among the first model predictors\n\n\n\nVIF\n\n\n\n\nmedian_rooms\n5.450352\n\n\nmedian_income\n6.210613\n\n\npct_college\n3.722382\n\n\npct_foreign_born\n2.013436\n\n\npct_white\n3.233046\n\n\nmedian_age\n1.833662\n\n\nmedian_structure_age\n1.055767\n\n\npercent_ooh\n3.953791\n\n\npop_density\n1.537542\n\n\ntotal_population\n1.174623\n\n\n\n\n\n\n\n\n\nRe-run the model with median_income removed.\n\nNote that the effect of median_rooms on median home value is positive and statistically significant.\n\nformula_2 &lt;- \"median_value_log ~ median_rooms + pct_college + pct_foreign_born + pct_white + median_age + median_structure_age + percent_ooh + pop_density + total_population\"\n\nmodel_2 &lt;- lm(formula = formula_2, data = dfw_data_for_model_sf)\nsummary(model_2)\n\n\nCall:\nlm(formula = formula_2, data = dfw_data_for_model_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.91753 -0.15319 -0.00222  0.16192  1.58950 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)           1.101e+01  6.202e-02 177.570  &lt; 2e-16 ***\nmedian_rooms          7.326e-02  9.497e-03   7.714 2.18e-14 ***\npct_college           1.775e-02  4.862e-04  36.507  &lt; 2e-16 ***\npct_foreign_born      4.170e-03  8.284e-04   5.034 5.38e-07 ***\npct_white             4.996e-03  4.862e-04  10.275  &lt; 2e-16 ***\nmedian_age            3.527e-03  1.429e-03   2.468   0.0137 *  \nmedian_structure_age  2.831e-05  2.696e-05   1.050   0.2939    \npercent_ooh          -3.888e-03  5.798e-04  -6.705 2.81e-11 ***\npop_density          -5.474e-06  6.428e-06  -0.852   0.3946    \ntotal_population      9.712e-06  4.658e-06   2.085   0.0372 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2815 on 1549 degrees of freedom\nMultiple R-squared:  0.7618,    Adjusted R-squared:  0.7604 \nF-statistic: 550.4 on 9 and 1549 DF,  p-value: &lt; 2.2e-16\n\n\n\nCompute the VIF for the second model.\n\nWith the removal of median_income from the model, all of the VIF values are now below 5.\n\nVIF &lt;- car::vif(model_2)\nvif_df &lt;- as.data.frame(VIF)\n\nkableExtra::kbl(vif_df)\n\n\n\nVIF values among the second model predictors\n\n\n\nVIF\n\n\n\n\nmedian_rooms\n4.025349\n\n\npct_college\n2.245164\n\n\npct_foreign_born\n1.976451\n\n\npct_white\n3.124310\n\n\nmedian_age\n1.822864\n\n\nmedian_structure_age\n1.052811\n\n\npercent_ooh\n3.885979\n\n\npop_density\n1.535798\n\n\ntotal_population\n1.174389\n\n\n\n\n\n\n\n\n\n\n\n\nCalculate a principal components analysis using dfw_estimates_dt as the predictor data.\n\n\npca_lst &lt;- prcomp(\n  formula = ~.,\n  data = dfw_estimates_dt,\n  scale. = TRUE,\n  center = TRUE\n)\nsummary(pca_lst)\n\nImportance of components:\n                         PC1   PC2    PC3    PC4     PC5     PC6     PC7\nStandard deviation     2.020 1.183 1.1307 1.0093 0.89918 0.70312 0.67682\nProportion of Variance 0.408 0.140 0.1278 0.1019 0.08085 0.04944 0.04581\nCumulative Proportion  0.408 0.548 0.6759 0.7778 0.85860 0.90804 0.95385\n                           PC8     PC9    PC10\nStandard deviation     0.48099 0.36127 0.31568\nProportion of Variance 0.02314 0.01305 0.00997\nCumulative Proportion  0.97698 0.99003 1.00000\n\n\n\nShow the loading values for the predictors under each of the first 5 out of 10 components.\n\n\npca_dt &lt;- pca_lst$rotation %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  cbind(predictors_1_v, .) %&gt;% \n  data.table::setnames(old = \"predictors_1_v\", new = \"predictor\") %&gt;% \n  .[, predictor := as.factor(predictor)]\n\n\n\n\n\nTable 8.6: PCA variable loadings\n\n\npredictor\nPC1\nPC2\nPC3\nPC4\nPC5\n\n\n\n\nmedian_rooms\n-0.4077831\n0.1322892\n-0.3487259\n-0.0587324\n0.2076067\n\n\nmedian_income\n-0.4149986\n-0.2277823\n-0.3213260\n0.0366773\n-0.0067022\n\n\npct_college\n-0.3116228\n-0.5359323\n-0.1567025\n0.1562390\n-0.2059928\n\n\npct_foreign_born\n0.2812599\n-0.2409594\n-0.4666664\n-0.0771557\n0.4515800\n\n\npct_white\n-0.3910565\n-0.0924263\n0.2855171\n0.1710000\n-0.3472556\n\n\nmedian_age\n-0.3474772\n-0.1379305\n0.2394049\n0.0781057\n0.2959928\n\n\nmedian_structure_age\n-0.0095854\n-0.2700258\n-0.0448758\n-0.8829222\n-0.3133622\n\n\npercent_ooh\n-0.3813014\n0.3032373\n-0.1929917\n-0.1681026\n0.3004939\n\n\npop_density\n0.2571276\n-0.4253733\n-0.2877394\n0.3248123\n-0.1262100\n\n\ntotal_population\n-0.0032156\n0.4603837\n-0.5214579\n0.1272285\n-0.5457814\n\n\n\n\n\n\n\n\n\nbuild_plot &lt;- function(id, df, pca_v){\n  a_plot &lt;- RplotterPkg::create_bar_plot(\n    df = df,\n    aes_x = \"predictor\",\n    aes_y = pca_v[[id]],\n    bar_fill = \"darkgreen\",\n    bar_alpha = 0.5,\n    y_limits = c(-1.0, 1.0),\n    y_major_breaks = c(-1.0, -0.5, 0.0, 0.5, 1.0),\n    do_coord_flip = T,\n    rot_y_tic_label = T,\n    panel_border_color = \"white\"\n  )\n  return(a_plot)\n}\n\npca_v &lt;- c('PC1','PC2','PC3','PC4','PC5')\n\nplot_lst &lt;- purrr::map(1:5,\n  build_plot,\n  df = pca_dt,\n  pca_v = pca_v\n)\n\nlayout &lt;- list(\n  plots = plot_lst,\n  rows = c(1, 1, 1, 1, 1),\n  cols = c(1, 2, 3, 4, 5)\n)\n\nRplotterPkg::multi_panel_grid(\n  layout = layout,\n  cell_width = 4,\n  cell_height = 14,\n  plot_titles = pca_v\n)\n\n\n\n\nFigure 8.6: Loadings for first five principal components\n\n\n\n\n\nAttach the principal components to the original data dfw_estimates_dt with predict() to produce a matrix of 10 principal component values for each tract observation.\n\n\ncomponents_m &lt;- predict(pca_lst, dfw_estimates_dt)\n\n\nShow the choropleth map of tract values for principal component PC1.\n\n\ndfw_pca_sf &lt;- dfw_data_for_model_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  cbind(components_m) %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_pca_sf,\n  aes_fill = \"PC1\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.7: Map of principal component 1\n\n\n\n\nThe brighter yellow areas, which have higher values for PC1, are located in communities like east Fort Worth, east Arlington, Grand Prairie, and south Dallas. Generally speaking, these are low-to-middle income areas with larger nonwhite populations. The locations with the lowest values for PC1 are Southlake (northeast of Fort Worth) and Highland Park (north of downtown Dallas); these communities are segregated, predominantly non-Hispanic white, and are among the wealthiest neighborhoods in the entire United States.\n\n\nUse the first six components as predictors of the outcome variable, median home value.\n\n\npca_formula &lt;- paste0(\"median_value_log ~ \", paste0('PC', 1:6, collapse = ' + '))\npca_model &lt;- lm(formula = pca_formula, data = dfw_pca_sf)\nsummary(pca_model)\n\n\nCall:\nlm(formula = pca_formula, data = dfw_pca_sf)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.78885 -0.16885 -0.00754  0.16940  1.60060 \n\nCoefficients:\n             Estimate Std. Error  t value Pr(&gt;|t|)    \n(Intercept) 12.301439   0.007483 1643.874   &lt;2e-16 ***\nPC1         -0.180706   0.003706  -48.764   &lt;2e-16 ***\nPC2         -0.247209   0.006327  -39.074   &lt;2e-16 ***\nPC3         -0.077089   0.006620  -11.644   &lt;2e-16 ***\nPC4          0.084413   0.007417   11.382   &lt;2e-16 ***\nPC5         -0.111437   0.008325  -13.386   &lt;2e-16 ***\nPC6          0.003698   0.010646    0.347    0.728    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2955 on 1552 degrees of freedom\nMultiple R-squared:  0.737, Adjusted R-squared:  0.736 \nF-statistic: 724.9 on 6 and 1552 DF,  p-value: &lt; 2.2e-16\n\n\n\nOne possible disadvantage of principal components regression is the interpretation of the results as the different variables which are comprehensible on their own are now spread across the components.",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  },
  {
    "objectID": "8_modeling_census_data.html#spatial-regression",
    "href": "8_modeling_census_data.html#spatial-regression",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "Chart the distribution of the model_2 residuals to check for normality.\n\n\ndfw_data_for_model_sf$residuals &lt;- residuals(model_2)\n\nRplotterPkg::create_histogram_plot(\n  df = dfw_data_for_model_sf,\n  aes_x = \"residuals\",\n  bins = 100,\n  bar_fill = \"navy\",\n  bar_color = \"navy\",\n  bar_alpha = 0.5,\n  x_title = \"Residuals\",\n  y_title = \"Count\",\n  rot_y_tic_label = TRUE,\n  panel_border_color = \"white\"\n)\n\n\n\n\n\nFigure 8.8: Distribution of model residuals with RplotterPkg::create_histogram_plot\n\n\n\n\nUse the Moran I test to evaluate the correlation of tract residuals with their neighbors.\n\nThe Moran’s I statistic of 0.21 is modest and positive but is statistically significant\n\n# Compute the tract weights\nweights_lst &lt;- dfw_data_for_model_sf %&gt;% \n  spdep::poly2nb() %&gt;% \n  spdep::nb2listw()\n\nspdep::moran.test(\n  x = dfw_data_for_model_sf$residuals,\n  listw = weights_lst\n)\n\n\n    Moran I test under randomisation\n\ndata:  dfw_data_for_model_sf$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 14.017, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.2101039004     -0.0006418485      0.0002260366 \n\n\n\nShow a scatterplot of the residual value vs. the average residual for the neighbors of each tract.\n\nPlot illustrates the positive spatial autocorrelation in the residuals, suggesting that the assumption of independence in the model error term is violated\n\ndfw_data_for_model_sf$lagged_residuals &lt;- spdep::lag.listw(\n  x = weights_lst,\n  var = dfw_data_for_model_sf$residuals\n)\n\nRplotterPkg::create_scatter_plot(\n  df = dfw_data_for_model_sf,\n  aes_x = \"residuals\",\n  aes_y = \"lagged_residuals\",\n  pts_size = 2,\n  pts_fill = \"gray40\",\n  pts_line_alpha = 0.5,\n  panel_border_color = \"white\",\n  x_title = \"residuals\",\n  y_title = \"lagged_residuals\"\n) +\n  geom_smooth(method = \"lm\", color = \"red\")\n\n\n\n\n\nFigure 8.9: Moran scatterplot of residual spatial autocorrelation\n\n\n\n\n\n\n\n\nEstimate the spatial lag model for the relationship between logged median home value and its predictors as a spatial lag model using spatialreg::lagsarlm() function.\n\n\nlag_model &lt;- spatialreg::lagsarlm(\n  formula = formula_2,\n  data = dfw_data_for_model_sf,\n  listw = weights_lst\n)\nsummary(lag_model, Nagelkerke = TRUE)\n\n\nCall:spatialreg::lagsarlm(formula = formula_2, data = dfw_data_for_model_sf, \n    listw = weights_lst)\n\nResiduals:\n       Min         1Q     Median         3Q        Max \n-2.0648694 -0.1377201 -0.0033418  0.1393358  1.4820565 \n\nType: lag \nCoefficients: (asymptotic standard errors) \n                        Estimate  Std. Error z value  Pr(&gt;|z|)\n(Intercept)           7.0145e+00  2.6904e-01 26.0726 &lt; 2.2e-16\nmedian_rooms          6.1989e-02  8.8554e-03  7.0002 2.556e-12\npct_college           1.2854e-02  5.4694e-04 23.5022 &lt; 2.2e-16\npct_foreign_born      2.0049e-03  7.7480e-04  2.5877  0.009662\npct_white             2.7053e-03  4.7181e-04  5.7340 9.810e-09\nmedian_age            3.4313e-03  1.3162e-03  2.6070  0.009134\nmedian_structure_age  2.6057e-05  2.4826e-05  1.0496  0.293909\npercent_ooh          -3.0388e-03  5.4319e-04 -5.5944 2.214e-08\npop_density          -1.3576e-05  5.9297e-06 -2.2895  0.022053\ntotal_population      8.4044e-06  4.2925e-06  1.9579  0.050239\n\nRho: 0.35357, LR test value: 211.02, p-value: &lt; 2.22e-16\nAsymptotic standard error: 0.023382\n    z-value: 15.122, p-value: &lt; 2.22e-16\nWald statistic: 228.66, p-value: &lt; 2.22e-16\n\nLog likelihood: -125.2091 for lag model\nML residual variance (sigma squared): 0.067169, (sigma: 0.25917)\nNagelkerke pseudo-R-squared: 0.79195 \nNumber of observations: 1559 \nNumber of parameters estimated: 12 \nAIC: 274.42, (AIC for lm: 483.43)\nLM test for residual autocorrelation\ntest value: 6.8633, p-value: 0.0087984\n\n\n\n\n\n\n\nCompute the alternative spatial error model which includes a spatial lag in the model’s error term using spatialreg::errorsarlm() function.\n\n\nerror_model &lt;- spatialreg::errorsarlm(\n  formula = formula_2,\n  data = dfw_data_for_model_sf,\n  listw = weights_lst\n)\nsummary(error_model, Nagelkerke = TRUE)\n\n\nCall:spatialreg::errorsarlm(formula = formula_2, data = dfw_data_for_model_sf, \n    listw = weights_lst)\n\nResiduals:\n        Min          1Q      Median          3Q         Max \n-1.97995036 -0.13648443 -0.00053403  0.13927657  1.54937157 \n\nType: error \nCoefficients: (asymptotic standard errors) \n                        Estimate  Std. Error  z value  Pr(&gt;|z|)\n(Intercept)           1.1098e+01  6.6718e-02 166.3418 &lt; 2.2e-16\nmedian_rooms          8.3008e-02  9.7138e-03   8.5453 &lt; 2.2e-16\npct_college           1.5855e-02  5.7435e-04  27.6047 &lt; 2.2e-16\npct_foreign_born      3.6574e-03  9.6580e-04   3.7869 0.0001526\npct_white             4.6693e-03  6.1196e-04   7.6301 2.354e-14\nmedian_age            3.9280e-03  1.4129e-03   2.7801 0.0054341\nmedian_structure_age  2.6012e-05  2.5450e-05   1.0221 0.3067450\npercent_ooh          -4.7624e-03  5.6765e-04  -8.3897 &lt; 2.2e-16\npop_density          -1.5031e-05  6.8705e-06  -2.1878 0.0286845\ntotal_population      1.0553e-05  4.4676e-06   2.3621 0.0181721\n\nLambda: 0.46781, LR test value: 164.17, p-value: &lt; 2.22e-16\nAsymptotic standard error: 0.031993\n    z-value: 14.622, p-value: &lt; 2.22e-16\nWald statistic: 213.81, p-value: &lt; 2.22e-16\n\nLog likelihood: -148.6307 for error model\nML residual variance (sigma squared): 0.067876, (sigma: 0.26053)\nNagelkerke pseudo-R-squared: 0.7856 \nNumber of observations: 1559 \nNumber of parameters estimated: 12 \nAIC: 321.26, (AIC for lm: 483.43)\n\n\n\n\n\n\nRe-compute Moran I test over the residuals of both models to evaluate their effectiveness in reducing spatial dependence.\n\nFor the lag_model$residuals we have:\n\nspdep::moran.test(lag_model$residuals, weights_lst)\n\n\n    Moran I test under randomisation\n\ndata:  lag_model$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = 2.0342, p-value = 0.02096\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.0299267176     -0.0006418485      0.0002258128 \n\n\nFor the error_model$residuals we have:\n\nspdep::moran.test(error_model$residuals, weights_lst)\n\n\n    Moran I test under randomisation\n\ndata:  error_model$residuals  \nweights: weights_lst    \n\nMoran I statistic standard deviate = -1.618, p-value = 0.9472\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n    -0.0249564490     -0.0006418485      0.0002258232 \n\n\nThe error model does a better job of eliminating spatial autocorrelation in the residuals entirely\n\nUse the lm.LMtests() function to apply Lagrange multiplier tests for spatial dependence of model_2.\n\n\nspdep::lm.RStests(\n  model_2,\n  weights_lst,\n  test = c(\"LMerr\",\"LMlag\",\"RLMerr\",\"RLMlag\")\n)\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nRSerr = 193.99, df = 1, p-value &lt; 2.2e-16\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nRSlag = 223.45, df = 1, p-value &lt; 2.2e-16\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nadjRSerr = 32.887, df = 1, p-value = 9.767e-09\n\n\n    Rao's score (a.k.a Lagrange multiplier) diagnostics for spatial\n    dependence\n\ndata:  \nmodel: lm(formula = formula_2, data = dfw_data_for_model_sf)\ntest weights: weights_lst\n\nadjRSlag = 62.343, df = 1, p-value = 2.887e-15",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  },
  {
    "objectID": "8_modeling_census_data.html#geographically-weighted-regression",
    "href": "8_modeling_census_data.html#geographically-weighted-regression",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "Geographically weighted regression (GWR) is a technique designed to evaluate local variations in the results of regression models given a kernel (distance-decay) weighting function.\n\n\n\n\nGWR relies on the concept of a “kernel bandwidth” to compute the local regression model for each location. A kernel bandwidth is based on the kernel type (fixed or adaptive) and a distance-decay function. A fixed kernel uses a cutoff distance to determine which observations will be included in the local model for a given location i, whereas an adaptive kernel uses the nearest neighbors to a given location.\n\n\nFrom the formula_2 model regression and the dfw_data_for_model_sf simple feature data, compute an adaptive kernel bandwidth using the GWmodel::bw.gwr() function.\n\n\ndfw_data_sp &lt;- dfw_data_for_model_sf %&gt;% \n  sf::as_Spatial()\n\nbw &lt;- GWmodel::bw.gwr(\n  formula = formula_2,\n  data = dfw_data_sp,\n  kernel = \"bisquare\",\n  adaptive = TRUE\n)\n\nTake a cup of tea and have a break, it will take a few minutes.\n          -----A kind suggestion from GWmodel development group\nAdaptive bandwidth: 971 CV score: 116.9119 \nAdaptive bandwidth: 608 CV score: 111.8214 \nAdaptive bandwidth: 383 CV score: 107.8615 \nAdaptive bandwidth: 244 CV score: 105.2766 \nAdaptive bandwidth: 158 CV score: 110.0219 \nAdaptive bandwidth: 297 CV score: 106.3267 \nAdaptive bandwidth: 211 CV score: 104.6335 \nAdaptive bandwidth: 190 CV score: 104.3428 \nAdaptive bandwidth: 178 CV score: 104.4641 \nAdaptive bandwidth: 198 CV score: 104.5065 \nAdaptive bandwidth: 185 CV score: 104.3518 \nAdaptive bandwidth: 193 CV score: 104.4187 \nAdaptive bandwidth: 188 CV score: 104.3302 \nAdaptive bandwidth: 187 CV score: 104.322 \nAdaptive bandwidth: 186 CV score: 104.3448 \nAdaptive bandwidth: 187 CV score: 104.322 \n\n\n\nThe function chose 187 as the number of nearest neighbors baseed on cross-validation. This means that for each Census tract, the nearest 187 of the total 1559 Census tracts in the Dallas-Fort Worth region will be used to estimate the local model, with weights calculated using the bisquare distance-decay function…\n\n\n\n\n\nUse the GWmodel::gwr.basic() together with the bandwidth bw, the regression model formula_2, and the data dfw_data_sp to compute the locally estimated model parameters.\n\n\ngw_model &lt;- GWmodel::gwr.basic(\n  formula = formula_2,\n  data = dfw_data_sp,\n  bw = bw,\n  kernel = \"bisquare\",\n  adaptive = TRUE\n)\n\n\nRetrieve the SDF element from gw_model and show a choropleth map of the local R-squared values.\n\nThe map suggests that the model performs very well in Fort Worth, Collin County, and the eastern edge of the the metropolitan area, with the local R-squared values exceeding 0.9.\n\ngw_model_results_sf &lt;- gw_model$SDF %&gt;% \n  sf::st_as_sf()\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"Local_R2\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.10: Local R-squared values from the GWR model\n\n\n\n\nShow a choropleth map of the local coefficent values for the owner-occupied housing predictor(percent_ooh).\n\nThe high negative values(dark purple areas) reflect high median home values with lower ownership (i.e. uptown Dallas with renter-occupied housing). Low positive values(yellow areas) reflect higher median home values and greater percentage of owner-occupied housing.\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"percent_ooh\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.11: Local parameter estimates for percent owner-occupied housing\n\n\n\n\nShow a choropleth map of the local coefficent values for the population density predictor(pop_density).\n\nBright yellow locations are those where high population densities are associated with higher home values. Dark purples are associated with rural areas/suburbs withsimilarie low densities and higher home values.\n\nRspatialPkg::get_geom_sf(\n  sf = gw_model_results_sf,\n  aes_fill = \"pop_density\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_viridis_c()\n\n\n\n\n\nFigure 8.12: Local parameter estimates for population density",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  },
  {
    "objectID": "8_modeling_census_data.html#classification-and-clustering-of-acs-data",
    "href": "8_modeling_census_data.html#classification-and-clustering-of-acs-data",
    "title": "8 Modeling US Census data",
    "section": "",
    "text": "Geodemographic classification refers to the grouping of geographic observations based on similar demographic (or other) characteristics. It is commonly used to generate neighborhood “typologies” that can help explain general similarities and differences among neighborhoods in a broader region.\n\n\nThe dataset dfw_pca_sf provides 10 principal components and their loading values across 1559 Dallas-Fort Worth area tracts. Take the first 8 principal component loadings and cluster them into 6 groups using the kmeans() function.\n\n\nset.seed(1983)\n\ndfw_kmeans_lst &lt;- dfw_pca_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, PC1:PC8] %&gt;% \n  kmeans(centers = 6) \n  \ndfw_kmeans_freq_dt &lt;- table(dfw_kmeans_lst$cluster) %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  data.table::setnames(old = c(\"V1\",\"N\"), new = c(\"Cluster\", \"Freq\"))\n\nThe smallest(Cluster 4) has 83 Census tracts, whereas the largest(Cluster 1) has 456 Census tracts\n\n\n\n\n\n\nCluster\nFreq\n\n\n\n\n1\n456\n\n\n2\n193\n\n\n3\n172\n\n\n4\n83\n\n\n5\n228\n\n\n6\n427\n\n\n\n\n\n\n\n\n\nMutate the cluster id’s vector (i.e. dfw_kmeans_lst$cluster) to dfw_pca_sf and create a choropleth map with the id as the fill aesthetic.\n\n\ndfw_clusters_sf &lt;- dfw_pca_sf %&gt;% \n  data.table::as.data.table(.) %&gt;% \n  .[, Cluster := as.factor(dfw_kmeans_lst$cluster)] %&gt;% \n  sf::st_as_sf(.)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_clusters_sf,\n  aes_fill = \"Cluster\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_brewer(palette = \"Set1\")\n\n\n\n\n\nFigure 8.13: Map of geodemographic clusters in Dallas-Fort Worth\n\n\n\n\ncluster_plot &lt;- ggplot(\n  data = dfw_clusters_sf,\n  aes(x = PC1, y = PC2, data_id = GOID, color = Cluster)\n) +\nggiraph::geom_point_interactive(aes(\n    tooltip = paste(\n      \"&lt;strong&gt;PC1:&lt;/strong&gt;\", round(PC1,digits = 2),\n      \"&lt;br&gt;&lt;strong&gt;PC2:&lt;/strong&gt;\", round(PC2,digits = 2),\n      \"&lt;br&gt;&lt;strong&gt;Cluster:&lt;/strong&gt;\", Cluster\n    )\n)) +\nggplot2::scale_color_brewer(palette = \"Set1\") +\ntheme_minimal()\n\nggiraph::girafe(ggobj = cluster_plot)\n\n\n\n\nFigure 8.14: Interactive scatterplot of PC1 and PC2 by Cluster\n# cluster_plot  &lt;- ggplot(data = dfw_clusters_sf, aes(x = PC1, y = PC2, color = Cluster)) +\n# #ggplot2::scale_color_brewer(palette = \"Set1\") +\n# theme_minimal()\n# \n# cluster_plot &lt;- cluster_plot + geom_point()\n# \n# plotly::ggplotly(cluster_plot)\n\n\n\n\n\nThe geodemographic classification outlined in the previous section offers a useful methodology for identifying similar types of Census tracts in varying parts of a metropolitan region. However, this approach was aspatial in that it did not take the geographic properties of the Census tracts into account.\n\n\nFrom dfw_pca_sf simple feature use the SKATER algorithm to take into account a spatial, Census tract constraint to the clusters.\n\nGenerate the weights:\n\ninput_vars_dt &lt;- dfw_pca_sf %&gt;%\n  data.table::as.data.table(.) %&gt;%\n  .[, PC1:PC8]\n\nskater_nbrs &lt;- spdep::poly2nb(dfw_pca_sf, queen = TRUE)\ncosts_lst &lt;- spdep::nbcosts(skater_nbrs, input_vars_dt)\nskater_weights &lt;- spdep::nb2listw(skater_nbrs, costs_lst, style = \"B\")\n\nCreate a minimum spanning tree and call spdep::skater() to identify groups of tracts that make up “regions”:\n\nmst &lt;- spdep::mstree(skater_weights)\n\nregions &lt;- spdep::skater(\n  mst[, 1:2],\n  input_vars_dt,\n  ncuts = 7,\n  crit = 10\n)\n\n\nCreate a choropleth map of the “regions” based on the group identifiers in regions$groups.\n\n\ndfw_clusters_sf$Region &lt;- as.factor(regions$groups)\n\nRspatialPkg::get_geom_sf(\n  sf = dfw_clusters_sf,\n  aes_fill = \"Region\",\n  hide_x_tics = T,\n  hide_y_tics = T,\n  panel_color = \"white\",\n  panel_border_color = \"white\"\n) +\n  ggplot2::scale_fill_brewer(palette = \"Set1\")  \n\n\n\n\n\nFigure 8.15: Map of contiguous regions derived with the SKATER algorithm",
    "crumbs": [
      "8 Modeling US Census data"
    ]
  }
]